//! @file ArmDebugger/Main.cpp
//! @brief The definition of the entry point for the interactive ARM debugger
//! application.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2024
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header File Includes
////////////////////////////////////////////////////////////////////////////////
#include "DebuggerApp.hpp"

#include <QMessageBox>

#include "Ag/Core/ErrorGuard.hpp"
#include "Ag/QtInterop/CommandLineWrangler.hpp"

#include "Tools.hpp"

////////////////////////////////////////////////////////////////////////////////
// Macro Definitions
////////////////////////////////////////////////////////////////////////////////

namespace {

////////////////////////////////////////////////////////////////////////////////
// Local Data Types
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Data
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Functions
////////////////////////////////////////////////////////////////////////////////

} // Anonymous namespace


////////////////////////////////////////////////////////////////////////////////
// Global Function Definitions
////////////////////////////////////////////////////////////////////////////////

int main(int argc, char *argv[])
{
    Ag::ErrorGuard guard;

    Ag::Qt::CommandLineWrangler cliWrangler(argc, argv);
    Mo::DebuggerApp app(cliWrangler.getNarrowArgumentCount(),
                        cliWrangler.getNarrowArguments());

    QStringList args = cliWrangler.getWideArguments();
    int processResult = 1;
    bool canContinue = false;

    if (guard.tryExecMemberFunction<Mo::DebuggerApp, bool, const QStringList &, int &>(
        &app, &Mo::DebuggerApp::initialise, canContinue, args, processResult))
    {
        if (canContinue && !guard.tryExecFunction(&Mo::DebuggerApp::exec, processResult))
        {
            Mo::reportError(nullptr, "Initialisation Error", guard.getError());
        }
    }
    else
    {
        Mo::reportError(nullptr, "Runtime Error", guard.getError());
    }

    return processResult;
}

////////////////////////////////////////////////////////////////////////////////

