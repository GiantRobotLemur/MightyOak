//! @file ArmDebugger/Annotations/InstructionFormat.cpp
//! @brief The definition of an annotation which alters the way in which
//! instructions are interpreted for display to the user.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2024
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header File Includes
////////////////////////////////////////////////////////////////////////////////
#include "InstructionFormat.hpp"
#include "Tools.hpp"

////////////////////////////////////////////////////////////////////////////////
// Macro Definitions
////////////////////////////////////////////////////////////////////////////////

namespace Mo {

namespace {
////////////////////////////////////////////////////////////////////////////////
// Local Data Types
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Data
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Functions
////////////////////////////////////////////////////////////////////////////////

} // Anonymous namespace

////////////////////////////////////////////////////////////////////////////////
// InstructionFormat Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
InstructionFormat::InstructionFormat() :
    Annotation(AnnotationType::Format),
    _options(0)
{
}

InstructionFormat::InstructionFormat(uint32_t baseAddr, uint32_t length,
                                     uint32_t asmFormatterOptions) :
    Annotation(AnnotationType::Format, baseAddr, length & ~3u),
    _options(asmFormatterOptions)
{
}

//! @brief Gets disassembly format flags compatible with the values in the
//! Mo::Asm::FormatterOptions::Flags enumeration type.
//! @return The current option flags.
uint32_t InstructionFormat::getDisassemblyFormatOptions() const { return _options; }

QJsonObject InstructionFormat::write() const
{
    QJsonObject jsonObj = Annotation::write();
    setJsonValue(jsonObj, "AsmFormatOptions", _options);

    return jsonObj;
}

void InstructionFormat::read(const QJsonObject &jsonObj)
{
    tryGetJsonValue(jsonObj, "AsmFormatOptions", _options);
}

////////////////////////////////////////////////////////////////////////////////
// Global Function Definitions
////////////////////////////////////////////////////////////////////////////////

} // namespace Mo
////////////////////////////////////////////////////////////////////////////////

