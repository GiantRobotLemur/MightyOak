//! @file Ag/GLAPI/BaseTypes.hpp
//! @brief A file generated from the OpenGL API schema definition and modified
//! for compatibility with C++ 17 and to de-couple it from the standard
//! Khronos group header file.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2022-2023
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

#ifndef __15EC58E9_CDD7_44B0_BEA2_11EC221B8179_INCLUDED__
#define __15EC58E9_CDD7_44B0_BEA2_11EC221B8179_INCLUDED__

////////////////////////////////////////////////////////////////////////////////
// Dependent Header Files
////////////////////////////////////////////////////////////////////////////////
#include "Platform.hpp"

#include <cstdint>
#include <cstddef>

////////////////////////////////////////////////////////////////////////////////
// Data Type Declarations
////////////////////////////////////////////////////////////////////////////////
// NOTE: Some of the following have been modified to de-couple them from
// KHR/khrplatform.h.
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
struct _cl_context;
struct _cl_event;
typedef char GLchar;
typedef char GLcharARB;
typedef double GLclampd;
typedef double GLdouble;
typedef int GLint;
typedef int GLsizei;
typedef struct __GLsync *GLsync;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef unsigned int GLenum;
typedef unsigned int GLuint;
typedef unsigned short GLhalfNV;
typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);
typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);
typedef void (APIENTRY *GLVULKANPROCNV)(void);
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef void GLvoid;
typedef float GLfloat;
typedef uint8_t GLubyte;
typedef int8_t GLbyte;
typedef int16_t GLshort;
typedef uint16_t GLushort;
typedef float GLclampf;
typedef intptr_t GLsizeiptr;
typedef intptr_t GLintptr;
typedef uint16_t GLhalf;
typedef uint64_t GLuint64;
typedef int64_t GLint64;
typedef int64_t GLint64EXT;
typedef uint64_t GLuint64EXT;
typedef uint16_t GLhalfARB;
typedef intptr_t GLsizeiptrARB;
typedef intptr_t GLintptrARB;
typedef int32_t GLfixed;
typedef GLintptr GLvdpauSurfaceNV;

namespace gl
{
// A structure which resolves function pointers and detects extensions
// at runtime using an appropriate platform-specific interface.
struct APIResolver
{
    // A pointer to a function which reports successive errors.
    typedef unsigned int(APIENTRY *GetNextErrorFn)();

    // Returns true if the named extension is present in the current context.
    virtual bool isExtensionPresent(const char *extName) const = 0;

    // Returns a pointer to a named function in the current context or nullptr.
    virtual void *resolveEntryPoint(const char *fnName) const = 0;

    // Gets a pointer to a function which will get the next successive error
    // generated by the previous command on the current thread.
    virtual GetNextErrorFn getErrorReporterProc() const = 0;
};

//! @brief Converts a scalar type into an OpenGL compatible boolean.
//! @tparam T The data type of the input value.
//! @param[in] scalar The scalar to convert.
//! @return The value as an OpenGL compatible boolean.
template<typename T>
GLboolean toBool(T scalar)
{
    static constexpr T False = static_cast<T>(0);

    return static_cast<GLboolean>((scalar == False) ? 0 : 1);
}

} // namespace gl

#endif // ifndef __15EC58E9_CDD7_44B0_BEA2_11EC221B8179_INCLUDED__
