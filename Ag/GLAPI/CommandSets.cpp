//! @file GLAPI/CommandSets.cpp
//! @brief The definition of structures defining the C++ language binding
//! to the OpenGL API commands generated from the API registry.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2022-2023
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Dependent Header Files
////////////////////////////////////////////////////////////////////////////////
#include <stdexcept>
#include <string>
#include <type_traits>

#include "Ag/Core/Exception.hpp"
#include "Ag/GLAPI/CommandSets.hpp"

namespace gl {

namespace {
////////////////////////////////////////////////////////////////////////////////
// Local Functions
////////////////////////////////////////////////////////////////////////////////
// Convert an enum class type to original type.
template<typename T>
typename std::underlying_type<T>::type toScalar(T value)
{
    return static_cast<std::underlying_type<T>::type>(value);
}

// Converts a pointer to an enum class to a pointer to the original type.
template<typename T>
typename std::underlying_type<T>::type *toScalarPtr(T *value)
{
    return reinterpret_cast<std::underlying_type<T>::type *>(value);
}

// Converts a read-only pointer to an enum class to a pointer to the original type.
template<typename T>
typename const std::underlying_type<T>::type *toScalarPtr(const T *value)
{
    return reinterpret_cast<const std::underlying_type<T>::type *>(value);
}

} // anonymous namespace

////////////////////////////////////////////////////////////////////////////////
// BaseAPI Member Functions
////////////////////////////////////////////////////////////////////////////////
BaseAPI::BaseAPI() :
    _getError(nullptr)
{
}

void BaseAPI::beforeCommand(const char *commandName, const void *entryPoint) const
{
    if (entryPoint == nullptr)
    {
        // TODO: Throw NotSupportedException.
        std::string message;

        message.assign("The command '");
        message.append(commandName);
        message.append("()' is not supported.");
        throw Ag::NotSupportedException(message.c_str());
    }
}

void BaseAPI::afterCommand(const char *commandName) const
{
    auto errorCode = (_getError == nullptr) ? 0 : _getError();

    if (errorCode != 0)
    {
        // Flush additional errors.
        // TODO: Gather all error codes in order to report them.
        while (_getError() != 0) { }

        // TODO: Throw SubsystemErrorException.
        std::string message;

        message.assign("The command '");
        message.append(commandName);
        message.append("()' failed.");
        throw std::runtime_error(message);
    }
}

void BaseAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _getError = resolver->getErrorReporterProc();
    }
}

////////////////////////////////////////////////////////////////////////////////
// BaseExtension Member Functions
////////////////////////////////////////////////////////////////////////////////
BaseExtension::BaseExtension(const char *extName) :
    _extName(extName),
    _isPresent(false)
{
}

bool BaseExtension::isPresent() const
{
    return _isPresent;
}

void BaseExtension::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _isPresent = resolver->isExtensionPresent(_extName);

        // Call the base class.
        BaseAPI::resolve(resolver);
    }
}

////////////////////////////////////////////////////////////////////////////////
// GLAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Constructs an unresolved command set for the core API.
GLAPI::GLAPI()
{
}

// Grant read-only access to the underlying function pointers.
const GL &GLAPI::getRawAPI() const
{
    return _api;
}

//! @brief Gets the version of the API detected, this maybe an empty value if
//! the API has not yet been resolved.
const Ag::Version &GLAPI::getAPIVersion() const
{
    return _version;
}

//! @brief Verifies the API is advanced enough to support a specific function.
//! @param[in] minRequired The minimum required function for the feature.
//! @param[in] feature Text describing the feature used to annotate an exception
//! message should the function fail.
//! @throws Ag::NotSupportedException If the API version is less than the minimum
//! required API version.
void GLAPI::verifyAPIVersion(const Ag::Version &minRequired, const char *feature) const
{
    if (_version < minRequired)
    {
        std::string message("In OpenGL version ");
        Ag::appendAgString(message, _version.toString(2, false));
        message.push_back(' ');
        message.append(feature);

        throw Ag::NotSupportedException(message.c_str());
    }
}

// Resolve core API entry points.
void GLAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _version.clear();
        _api.resolveEntryPoints(resolver);
        const char *versionText = getString(StringName::Version);

        if ((versionText == nullptr) || (_version.tryParse(versionText) == false))
        {
            throw Ag::OperationException("Failed to obtain OpenGL API version.");
        }

        // Call the base class.
        BaseAPI::resolve(resolver);
    }
}

// Calls glBlendFunc().
void GLAPI::blendFunc(BlendingFactor sfactor, BlendingFactor dfactor) const
{
    static const char *fnName = "glBlendFunc";

    beforeCommand(fnName, _api.glBlendFunc);
    _api.glBlendFunc(toScalar(sfactor), toScalar(dfactor));
    afterCommand(fnName);
}

// Calls glClear().
void GLAPI::clear(GLbitfield  /* ClearBufferMask */ mask) const
{
    static const char *fnName = "glClear";

    beforeCommand(fnName, _api.glClear);
    _api.glClear(mask);
    afterCommand(fnName);
}

// Calls glClearColor().
void GLAPI::clearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) const
{
    static const char *fnName = "glClearColor";

    beforeCommand(fnName, _api.glClearColor);
    _api.glClearColor(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glClearDepth().
void GLAPI::clearDepth(GLdouble depth) const
{
    static const char *fnName = "glClearDepth";

    beforeCommand(fnName, _api.glClearDepth);
    _api.glClearDepth(depth);
    afterCommand(fnName);
}

// Calls glClearStencil().
void GLAPI::clearStencil(GLint s) const
{
    static const char *fnName = "glClearStencil";

    beforeCommand(fnName, _api.glClearStencil);
    _api.glClearStencil(s);
    afterCommand(fnName);
}

// Calls glColorMask().
void GLAPI::colorMask(Boolean red, Boolean green, Boolean blue, Boolean alpha) const
{
    static const char *fnName = "glColorMask";

    beforeCommand(fnName, _api.glColorMask);
    _api.glColorMask(toScalar(red), toScalar(green), toScalar(blue),
                     toScalar(alpha));
    afterCommand(fnName);
}

// Calls glCullFace().
void GLAPI::cullFace(CullFaceMode mode) const
{
    static const char *fnName = "glCullFace";

    beforeCommand(fnName, _api.glCullFace);
    _api.glCullFace(toScalar(mode));
    afterCommand(fnName);
}

// Calls glDepthFunc().
void GLAPI::depthFunc(DepthFunction func) const
{
    static const char *fnName = "glDepthFunc";

    beforeCommand(fnName, _api.glDepthFunc);
    _api.glDepthFunc(toScalar(func));
    afterCommand(fnName);
}

// Calls glDepthMask().
void GLAPI::depthMask(Boolean flag) const
{
    static const char *fnName = "glDepthMask";

    beforeCommand(fnName, _api.glDepthMask);
    _api.glDepthMask(toScalar(flag));
    afterCommand(fnName);
}

// Calls glDepthRange().
void GLAPI::depthRange(GLdouble n, GLdouble f) const
{
    static const char *fnName = "glDepthRange";

    beforeCommand(fnName, _api.glDepthRange);
    _api.glDepthRange(n, f);
    afterCommand(fnName);
}

// Calls glDisable().
void GLAPI::disable(EnableCap cap) const
{
    static const char *fnName = "glDisable";

    beforeCommand(fnName, _api.glDisable);
    _api.glDisable(toScalar(cap));
    afterCommand(fnName);
}

// Calls glDrawBuffer().
void GLAPI::drawBuffer(DrawBufferMode buf) const
{
    static const char *fnName = "glDrawBuffer";

    beforeCommand(fnName, _api.glDrawBuffer);
    _api.glDrawBuffer(toScalar(buf));
    afterCommand(fnName);
}

// Calls glEnable().
void GLAPI::enable(EnableCap cap) const
{
    static const char *fnName = "glEnable";

    beforeCommand(fnName, _api.glEnable);
    _api.glEnable(toScalar(cap));
    afterCommand(fnName);
}

// Calls glFinish().
void GLAPI::finish() const
{
    static const char *fnName = "glFinish";

    beforeCommand(fnName, _api.glFinish);
    _api.glFinish();
    afterCommand(fnName);
}

// Calls glFlush().
void GLAPI::flush() const
{
    static const char *fnName = "glFlush";

    beforeCommand(fnName, _api.glFlush);
    _api.glFlush();
    afterCommand(fnName);
}

// Calls glFrontFace().
void GLAPI::frontFace(FrontFaceDirection mode) const
{
    static const char *fnName = "glFrontFace";

    beforeCommand(fnName, _api.glFrontFace);
    _api.glFrontFace(toScalar(mode));
    afterCommand(fnName);
}

// Calls glGetBooleanv().
void GLAPI::getBooleanV(GetPName pname, Boolean *data) const
{
    static const char *fnName = "glGetBooleanv";

    beforeCommand(fnName, _api.glGetBooleanv);
    _api.glGetBooleanv(toScalar(pname), toScalarPtr(data));
    afterCommand(fnName);
}

// Calls glGetDoublev().
void GLAPI::getDoubleV(GetPName pname, GLdouble *data) const
{
    static const char *fnName = "glGetDoublev";

    beforeCommand(fnName, _api.glGetDoublev);
    _api.glGetDoublev(toScalar(pname), data);
    afterCommand(fnName);
}

// Calls glGetError().
ErrorCode GLAPI::getError() const
{
    static const char *fnName = "glGetError";

    beforeCommand(fnName, _api.glGetError);
    GLenum result = _api.glGetError();
    afterCommand(fnName);

    return static_cast<ErrorCode>(result);
}

// Calls glGetFloatv().
void GLAPI::getFloatV(GetPName pname, GLfloat *data) const
{
    static const char *fnName = "glGetFloatv";

    beforeCommand(fnName, _api.glGetFloatv);
    _api.glGetFloatv(toScalar(pname), data);
    afterCommand(fnName);
}

// Calls glGetIntegerv().
void GLAPI::getIntegerV(GetPName pname, GLint *data) const
{
    static const char *fnName = "glGetIntegerv";

    beforeCommand(fnName, _api.glGetIntegerv);
    _api.glGetIntegerv(toScalar(pname), data);
    afterCommand(fnName);
}

// Calls glGetString().
const char *GLAPI::getString(StringName name) const
{
    static const char *fnName = "glGetString";

    beforeCommand(fnName, _api.glGetString);
    const char *result = _api.glGetString(toScalar(name));
    afterCommand(fnName);

    return result;
}

// Calls glGetTexImage().
void GLAPI::getTexImage(TextureTarget target, GLint level, PixelFormat format,
                        PixelType type, void *pixels) const
{
    static const char *fnName = "glGetTexImage";

    beforeCommand(fnName, _api.glGetTexImage);
    _api.glGetTexImage(toScalar(target), level, toScalar(format), toScalar(type),
                       pixels);
    afterCommand(fnName);
}

// Calls glGetTexLevelParameterfv().
void GLAPI::getTexLevelParameterFV(TextureTarget target, GLint level,
                                   GetTextureParameter pname, GLfloat *params) const
{
    static const char *fnName = "glGetTexLevelParameterfv";

    beforeCommand(fnName, _api.glGetTexLevelParameterfv);
    _api.glGetTexLevelParameterfv(toScalar(target), level, toScalar(pname),
                                  params);
    afterCommand(fnName);
}

// Calls glGetTexLevelParameteriv().
void GLAPI::getTexLevelParameterIV(TextureTarget target, GLint level,
                                   GetTextureParameter pname, GLint *params) const
{
    static const char *fnName = "glGetTexLevelParameteriv";

    beforeCommand(fnName, _api.glGetTexLevelParameteriv);
    _api.glGetTexLevelParameteriv(toScalar(target), level, toScalar(pname),
                                  params);
    afterCommand(fnName);
}

// Calls glGetTexParameterfv().
void GLAPI::getTexParameterFV(TextureTarget target, GetTextureParameter pname,
                              GLfloat *params) const
{
    static const char *fnName = "glGetTexParameterfv";

    beforeCommand(fnName, _api.glGetTexParameterfv);
    _api.glGetTexParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTexParameteriv().
void GLAPI::getTexParameterIV(TextureTarget target, GetTextureParameter pname,
                              GLint *params) const
{
    static const char *fnName = "glGetTexParameteriv";

    beforeCommand(fnName, _api.glGetTexParameteriv);
    _api.glGetTexParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glHint().
void GLAPI::hint(HintTarget target, HintMode mode) const
{
    static const char *fnName = "glHint";

    beforeCommand(fnName, _api.glHint);
    _api.glHint(toScalar(target), toScalar(mode));
    afterCommand(fnName);
}

// Calls glIsEnabled().
Boolean GLAPI::isEnabled(EnableCap cap) const
{
    static const char *fnName = "glIsEnabled";

    beforeCommand(fnName, _api.glIsEnabled);
    GLboolean result = _api.glIsEnabled(toScalar(cap));
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glLineWidth().
void GLAPI::lineWidth(GLfloat width) const
{
    static const char *fnName = "glLineWidth";

    beforeCommand(fnName, _api.glLineWidth);
    _api.glLineWidth(width);
    afterCommand(fnName);
}

// Calls glLogicOp().
void GLAPI::logicOp(LogicOp opcode) const
{
    static const char *fnName = "glLogicOp";

    beforeCommand(fnName, _api.glLogicOp);
    _api.glLogicOp(toScalar(opcode));
    afterCommand(fnName);
}

// Calls glPixelStoref().
void GLAPI::pixelStoreF(PixelStoreParameter pname, GLfloat param) const
{
    static const char *fnName = "glPixelStoref";

    beforeCommand(fnName, _api.glPixelStoref);
    _api.glPixelStoref(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPixelStorei().
void GLAPI::pixelStoreI(PixelStoreParameter pname, GLint param) const
{
    static const char *fnName = "glPixelStorei";

    beforeCommand(fnName, _api.glPixelStorei);
    _api.glPixelStorei(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPointSize().
void GLAPI::pointSize(GLfloat size) const
{
    static const char *fnName = "glPointSize";

    beforeCommand(fnName, _api.glPointSize);
    _api.glPointSize(size);
    afterCommand(fnName);
}

// Calls glPolygonMode().
void GLAPI::polygonMode(MaterialFace face, PolygonMode mode) const
{
    static const char *fnName = "glPolygonMode";

    beforeCommand(fnName, _api.glPolygonMode);
    _api.glPolygonMode(toScalar(face), toScalar(mode));
    afterCommand(fnName);
}

// Calls glReadBuffer().
void GLAPI::readBuffer(ReadBufferMode src) const
{
    static const char *fnName = "glReadBuffer";

    beforeCommand(fnName, _api.glReadBuffer);
    _api.glReadBuffer(toScalar(src));
    afterCommand(fnName);
}

// Calls glReadPixels().
void GLAPI::readPixels(GLint x, GLint y, GLsizei width, GLsizei height,
                       PixelFormat format, PixelType type, void *pixels) const
{
    static const char *fnName = "glReadPixels";

    beforeCommand(fnName, _api.glReadPixels);
    _api.glReadPixels(x, y, width, height, toScalar(format), toScalar(type),
                      pixels);
    afterCommand(fnName);
}

// Calls glScissor().
void GLAPI::scissor(GLint x, GLint y, GLsizei width, GLsizei height) const
{
    static const char *fnName = "glScissor";

    beforeCommand(fnName, _api.glScissor);
    _api.glScissor(x, y, width, height);
    afterCommand(fnName);
}

// Calls glStencilFunc().
void GLAPI::stencilFunc(StencilFunction func, GLint ref, GLuint mask) const
{
    static const char *fnName = "glStencilFunc";

    beforeCommand(fnName, _api.glStencilFunc);
    _api.glStencilFunc(toScalar(func), ref, mask);
    afterCommand(fnName);
}

// Calls glStencilMask().
void GLAPI::stencilMask(GLuint mask) const
{
    static const char *fnName = "glStencilMask";

    beforeCommand(fnName, _api.glStencilMask);
    _api.glStencilMask(mask);
    afterCommand(fnName);
}

// Calls glStencilOp().
void GLAPI::stencilOp(StencilOp fail, StencilOp zfail, StencilOp zpass) const
{
    static const char *fnName = "glStencilOp";

    beforeCommand(fnName, _api.glStencilOp);
    _api.glStencilOp(toScalar(fail), toScalar(zfail), toScalar(zpass));
    afterCommand(fnName);
}

// Calls glTexImage1D().
void GLAPI::texImage1D(TextureTarget target, GLint level,
                       InternalFormat internalformat, GLsizei width,
                       GLint border, PixelFormat format, PixelType type,
                       const void *pixels) const
{
    static const char *fnName = "glTexImage1D";

    beforeCommand(fnName, _api.glTexImage1D);
    _api.glTexImage1D(toScalar(target), level, toScalar(internalformat), width,
                      border, toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTexImage2D().
void GLAPI::texImage2D(TextureTarget target, GLint level,
                       InternalFormat internalformat, GLsizei width,
                       GLsizei height, GLint border, PixelFormat format,
                       PixelType type, const void *pixels) const
{
    static const char *fnName = "glTexImage2D";

    beforeCommand(fnName, _api.glTexImage2D);
    _api.glTexImage2D(toScalar(target), level, toScalar(internalformat), width,
                      height, border, toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTexParameterf().
void GLAPI::texParameterF(TextureTarget target, TextureParameterName pname,
                          GLfloat param) const
{
    static const char *fnName = "glTexParameterf";

    beforeCommand(fnName, _api.glTexParameterf);
    _api.glTexParameterf(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTexParameterfv().
void GLAPI::texParameterFV(TextureTarget target, TextureParameterName pname,
                           const GLfloat *params) const
{
    static const char *fnName = "glTexParameterfv";

    beforeCommand(fnName, _api.glTexParameterfv);
    _api.glTexParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTexParameteri().
void GLAPI::texParameterI(TextureTarget target, TextureParameterName pname,
                          GLint param) const
{
    static const char *fnName = "glTexParameteri";

    beforeCommand(fnName, _api.glTexParameteri);
    _api.glTexParameteri(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTexParameteriv().
void GLAPI::texParameterIV(TextureTarget target, TextureParameterName pname,
                           const GLint *params) const
{
    static const char *fnName = "glTexParameteriv";

    beforeCommand(fnName, _api.glTexParameteriv);
    _api.glTexParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glViewport().
void GLAPI::viewport(GLint x, GLint y, GLsizei width, GLsizei height) const
{
    static const char *fnName = "glViewport";

    beforeCommand(fnName, _api.glViewport);
    _api.glViewport(x, y, width, height);
    afterCommand(fnName);
}

// Calls glBindTexture().
void GLAPI::bindTexture(TextureTarget target, TextureName texture) const
{
    static const char *fnName = "glBindTexture";

    beforeCommand(fnName, _api.glBindTexture);
    _api.glBindTexture(toScalar(target), texture.ID);
    afterCommand(fnName);
}

// Calls glCopyTexImage1D().
void GLAPI::copyTexImage1D(TextureTarget target, GLint level,
                           InternalFormat internalformat, GLint x, GLint y,
                           GLsizei width, GLint border) const
{
    static const char *fnName = "glCopyTexImage1D";

    beforeCommand(fnName, _api.glCopyTexImage1D);
    _api.glCopyTexImage1D(toScalar(target), level, toScalar(internalformat), x,
                          y, width, border);
    afterCommand(fnName);
}

// Calls glCopyTexImage2D().
void GLAPI::copyTexImage2D(TextureTarget target, GLint level,
                           InternalFormat internalformat, GLint x, GLint y,
                           GLsizei width, GLsizei height, GLint border) const
{
    static const char *fnName = "glCopyTexImage2D";

    beforeCommand(fnName, _api.glCopyTexImage2D);
    _api.glCopyTexImage2D(toScalar(target), level, toScalar(internalformat), x,
                          y, width, height, border);
    afterCommand(fnName);
}

// Calls glCopyTexSubImage1D().
void GLAPI::copyTexSubImage1D(TextureTarget target, GLint level, GLint xoffset,
                              GLint x, GLint y, GLsizei width) const
{
    static const char *fnName = "glCopyTexSubImage1D";

    beforeCommand(fnName, _api.glCopyTexSubImage1D);
    _api.glCopyTexSubImage1D(toScalar(target), level, xoffset, x, y, width);
    afterCommand(fnName);
}

// Calls glCopyTexSubImage2D().
void GLAPI::copyTexSubImage2D(TextureTarget target, GLint level, GLint xoffset,
                              GLint yoffset, GLint x, GLint y, GLsizei width,
                              GLsizei height) const
{
    static const char *fnName = "glCopyTexSubImage2D";

    beforeCommand(fnName, _api.glCopyTexSubImage2D);
    _api.glCopyTexSubImage2D(toScalar(target), level, xoffset, yoffset, x, y,
                             width, height);
    afterCommand(fnName);
}

// Calls glDeleteTextures().
void GLAPI::deleteTextures(GLsizei n, const TextureName *textures) const
{
    static const char *fnName = "glDeleteTextures";

    beforeCommand(fnName, _api.glDeleteTextures);
    _api.glDeleteTextures(n, reinterpret_cast<const GLuint *>(textures));
    afterCommand(fnName);
}

// Calls glDrawArrays().
void GLAPI::drawArrays(PrimitiveType mode, GLint first, GLsizei count) const
{
    static const char *fnName = "glDrawArrays";

    beforeCommand(fnName, _api.glDrawArrays);
    _api.glDrawArrays(toScalar(mode), first, count);
    afterCommand(fnName);
}

// Calls glDrawElements().
void GLAPI::drawElements(PrimitiveType mode, GLsizei count,
                         DrawElementsType type, const void *indices) const
{
    static const char *fnName = "glDrawElements";

    beforeCommand(fnName, _api.glDrawElements);
    _api.glDrawElements(toScalar(mode), count, toScalar(type), indices);
    afterCommand(fnName);
}

// Calls glGenTextures().
void GLAPI::genTextures(GLsizei n, TextureName *textures) const
{
    static const char *fnName = "glGenTextures";

    beforeCommand(fnName, _api.glGenTextures);
    _api.glGenTextures(n, reinterpret_cast<GLuint *>(textures));
    afterCommand(fnName);
}

// Calls glIsTexture().
Boolean GLAPI::isTexture(TextureName texture) const
{
    static const char *fnName = "glIsTexture";

    beforeCommand(fnName, _api.glIsTexture);
    GLboolean result = _api.glIsTexture(texture.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glPolygonOffset().
void GLAPI::polygonOffset(GLfloat factor, GLfloat units) const
{
    static const char *fnName = "glPolygonOffset";

    beforeCommand(fnName, _api.glPolygonOffset);
    _api.glPolygonOffset(factor, units);
    afterCommand(fnName);
}

// Calls glTexSubImage1D().
void GLAPI::texSubImage1D(TextureTarget target, GLint level, GLint xoffset,
                          GLsizei width, PixelFormat format, PixelType type,
                          const void *pixels) const
{
    static const char *fnName = "glTexSubImage1D";

    beforeCommand(fnName, _api.glTexSubImage1D);
    _api.glTexSubImage1D(toScalar(target), level, xoffset, width,
                         toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTexSubImage2D().
void GLAPI::texSubImage2D(TextureTarget target, GLint level, GLint xoffset,
                          GLint yoffset, GLsizei width, GLsizei height,
                          PixelFormat format, PixelType type, const void *pixels) const
{
    static const char *fnName = "glTexSubImage2D";

    beforeCommand(fnName, _api.glTexSubImage2D);
    _api.glTexSubImage2D(toScalar(target), level, xoffset, yoffset, width,
                         height, toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glCopyTexSubImage3D().
void GLAPI::copyTexSubImage3D(TextureTarget target, GLint level, GLint xoffset,
                              GLint yoffset, GLint zoffset, GLint x, GLint y,
                              GLsizei width, GLsizei height) const
{
    static const char *fnName = "glCopyTexSubImage3D";

    beforeCommand(fnName, _api.glCopyTexSubImage3D);
    _api.glCopyTexSubImage3D(toScalar(target), level, xoffset, yoffset, zoffset,
                             x, y, width, height);
    afterCommand(fnName);
}

// Calls glDrawRangeElements().
void GLAPI::drawRangeElements(PrimitiveType mode, GLuint start, GLuint end,
                              GLsizei count, DrawElementsType type,
                              const void *indices) const
{
    static const char *fnName = "glDrawRangeElements";

    beforeCommand(fnName, _api.glDrawRangeElements);
    _api.glDrawRangeElements(toScalar(mode), start, end, count, toScalar(type),
                             indices);
    afterCommand(fnName);
}

// Calls glTexImage3D().
void GLAPI::texImage3D(TextureTarget target, GLint level,
                       InternalFormat internalformat, GLsizei width,
                       GLsizei height, GLsizei depth, GLint border,
                       PixelFormat format, PixelType type, const void *pixels) const
{
    static const char *fnName = "glTexImage3D";

    beforeCommand(fnName, _api.glTexImage3D);
    _api.glTexImage3D(toScalar(target), level, toScalar(internalformat), width,
                      height, depth, border, toScalar(format), toScalar(type),
                      pixels);
    afterCommand(fnName);
}

// Calls glTexSubImage3D().
void GLAPI::texSubImage3D(TextureTarget target, GLint level, GLint xoffset,
                          GLint yoffset, GLint zoffset, GLsizei width,
                          GLsizei height, GLsizei depth, PixelFormat format,
                          PixelType type, const void *pixels) const
{
    static const char *fnName = "glTexSubImage3D";

    beforeCommand(fnName, _api.glTexSubImage3D);
    _api.glTexSubImage3D(toScalar(target), level, xoffset, yoffset, zoffset,
                         width, height, depth, toScalar(format), toScalar(type),
                         pixels);
    afterCommand(fnName);
}

// Calls glActiveTexture().
void GLAPI::activeTexture(TextureUnit texture) const
{
    static const char *fnName = "glActiveTexture";

    beforeCommand(fnName, _api.glActiveTexture);
    _api.glActiveTexture(toScalar(texture));
    afterCommand(fnName);
}

// Calls glCompressedTexImage1D().
void GLAPI::compressedTexImage1D(TextureTarget target, GLint level,
                                 InternalFormat internalformat, GLsizei width,
                                 GLint border, GLsizei imageSize,
                                 const void *data) const
{
    static const char *fnName = "glCompressedTexImage1D";

    beforeCommand(fnName, _api.glCompressedTexImage1D);
    _api.glCompressedTexImage1D(toScalar(target), level,
                                toScalar(internalformat), width, border,
                                imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTexImage2D().
void GLAPI::compressedTexImage2D(TextureTarget target, GLint level,
                                 InternalFormat internalformat, GLsizei width,
                                 GLsizei height, GLint border, GLsizei imageSize,
                                 const void *data) const
{
    static const char *fnName = "glCompressedTexImage2D";

    beforeCommand(fnName, _api.glCompressedTexImage2D);
    _api.glCompressedTexImage2D(toScalar(target), level,
                                toScalar(internalformat), width, height, border,
                                imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTexImage3D().
void GLAPI::compressedTexImage3D(TextureTarget target, GLint level,
                                 InternalFormat internalformat, GLsizei width,
                                 GLsizei height, GLsizei depth, GLint border,
                                 GLsizei imageSize, const void *data) const
{
    static const char *fnName = "glCompressedTexImage3D";

    beforeCommand(fnName, _api.glCompressedTexImage3D);
    _api.glCompressedTexImage3D(toScalar(target), level,
                                toScalar(internalformat), width, height, depth,
                                border, imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTexSubImage1D().
void GLAPI::compressedTexSubImage1D(TextureTarget target, GLint level,
                                    GLint xoffset, GLsizei width,
                                    InternalFormat format, GLsizei imageSize,
                                    const void *data) const
{
    static const char *fnName = "glCompressedTexSubImage1D";

    beforeCommand(fnName, _api.glCompressedTexSubImage1D);
    _api.glCompressedTexSubImage1D(toScalar(target), level, xoffset, width,
                                   toScalar(format), imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTexSubImage2D().
void GLAPI::compressedTexSubImage2D(TextureTarget target, GLint level,
                                    GLint xoffset, GLint yoffset, GLsizei width,
                                    GLsizei height, InternalFormat format,
                                    GLsizei imageSize, const void *data) const
{
    static const char *fnName = "glCompressedTexSubImage2D";

    beforeCommand(fnName, _api.glCompressedTexSubImage2D);
    _api.glCompressedTexSubImage2D(toScalar(target), level, xoffset, yoffset,
                                   width, height, toScalar(format), imageSize,
                                   data);
    afterCommand(fnName);
}

// Calls glCompressedTexSubImage3D().
void GLAPI::compressedTexSubImage3D(TextureTarget target, GLint level,
                                    GLint xoffset, GLint yoffset, GLint zoffset,
                                    GLsizei width, GLsizei height, GLsizei depth,
                                    InternalFormat format, GLsizei imageSize,
                                    const void *data) const
{
    static const char *fnName = "glCompressedTexSubImage3D";

    beforeCommand(fnName, _api.glCompressedTexSubImage3D);
    _api.glCompressedTexSubImage3D(toScalar(target), level, xoffset, yoffset,
                                   zoffset, width, height, depth,
                                   toScalar(format), imageSize, data);
    afterCommand(fnName);
}

// Calls glGetCompressedTexImage().
void GLAPI::getCompressedTexImage(TextureTarget target, GLint level, void *img) const
{
    static const char *fnName = "glGetCompressedTexImage";

    beforeCommand(fnName, _api.glGetCompressedTexImage);
    _api.glGetCompressedTexImage(toScalar(target), level, img);
    afterCommand(fnName);
}

// Calls glSampleCoverage().
void GLAPI::sampleCoverage(GLfloat value, Boolean invert) const
{
    static const char *fnName = "glSampleCoverage";

    beforeCommand(fnName, _api.glSampleCoverage);
    _api.glSampleCoverage(value, toScalar(invert));
    afterCommand(fnName);
}

// Calls glBlendColor().
void GLAPI::blendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha) const
{
    static const char *fnName = "glBlendColor";

    beforeCommand(fnName, _api.glBlendColor);
    _api.glBlendColor(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glBlendEquation().
void GLAPI::blendEquation(BlendEquationModeEXT mode) const
{
    static const char *fnName = "glBlendEquation";

    beforeCommand(fnName, _api.glBlendEquation);
    _api.glBlendEquation(toScalar(mode));
    afterCommand(fnName);
}

// Calls glBlendFuncSeparate().
void GLAPI::blendFuncSeparate(BlendingFactor sfactorRGB,
                              BlendingFactor dfactorRGB,
                              BlendingFactor sfactorAlpha,
                              BlendingFactor dfactorAlpha) const
{
    static const char *fnName = "glBlendFuncSeparate";

    beforeCommand(fnName, _api.glBlendFuncSeparate);
    _api.glBlendFuncSeparate(toScalar(sfactorRGB), toScalar(dfactorRGB),
                             toScalar(sfactorAlpha), toScalar(dfactorAlpha));
    afterCommand(fnName);
}

// Calls glMultiDrawArrays().
void GLAPI::multiDrawArrays(PrimitiveType mode, const GLint *first,
                            const GLsizei *count, GLsizei drawcount) const
{
    static const char *fnName = "glMultiDrawArrays";

    beforeCommand(fnName, _api.glMultiDrawArrays);
    _api.glMultiDrawArrays(toScalar(mode), first, count, drawcount);
    afterCommand(fnName);
}

// Calls glMultiDrawElements().
void GLAPI::multiDrawElements(PrimitiveType mode, const GLsizei *count,
                              DrawElementsType type, const void *const*indices,
                              GLsizei drawcount) const
{
    static const char *fnName = "glMultiDrawElements";

    beforeCommand(fnName, _api.glMultiDrawElements);
    _api.glMultiDrawElements(toScalar(mode), count, toScalar(type), indices,
                             drawcount);
    afterCommand(fnName);
}

// Calls glPointParameterf().
void GLAPI::pointParameterF(PointParameterNameARB pname, GLfloat param) const
{
    static const char *fnName = "glPointParameterf";

    beforeCommand(fnName, _api.glPointParameterf);
    _api.glPointParameterf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPointParameterfv().
void GLAPI::pointParameterFV(PointParameterNameARB pname, const GLfloat *params) const
{
    static const char *fnName = "glPointParameterfv";

    beforeCommand(fnName, _api.glPointParameterfv);
    _api.glPointParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glPointParameteri().
void GLAPI::pointParameterI(PointParameterNameARB pname, GLint param) const
{
    static const char *fnName = "glPointParameteri";

    beforeCommand(fnName, _api.glPointParameteri);
    _api.glPointParameteri(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPointParameteriv().
void GLAPI::pointParameterIV(PointParameterNameARB pname, const GLint *params) const
{
    static const char *fnName = "glPointParameteriv";

    beforeCommand(fnName, _api.glPointParameteriv);
    _api.glPointParameteriv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glBeginQuery().
void GLAPI::beginQuery(QueryTarget target, QueryName id) const
{
    static const char *fnName = "glBeginQuery";

    beforeCommand(fnName, _api.glBeginQuery);
    _api.glBeginQuery(toScalar(target), id.ID);
    afterCommand(fnName);
}

// Calls glBindBuffer().
void GLAPI::bindBuffer(BufferTarget target, BufferName buffer) const
{
    static const char *fnName = "glBindBuffer";

    beforeCommand(fnName, _api.glBindBuffer);
    _api.glBindBuffer(toScalar(target), buffer.ID);
    afterCommand(fnName);
}

// Calls glBufferData().
void GLAPI::bufferData(BufferTarget target, GLsizeiptr size, const void *data,
                       BufferUsage usage) const
{
    static const char *fnName = "glBufferData";

    beforeCommand(fnName, _api.glBufferData);
    _api.glBufferData(toScalar(target), size, data, toScalar(usage));
    afterCommand(fnName);
}

// Calls glBufferSubData().
void GLAPI::bufferSubData(BufferTarget target, GLintptr offset,
                          GLsizeiptr size, const void *data) const
{
    static const char *fnName = "glBufferSubData";

    beforeCommand(fnName, _api.glBufferSubData);
    _api.glBufferSubData(toScalar(target), offset, size, data);
    afterCommand(fnName);
}

// Calls glDeleteBuffers().
void GLAPI::deleteBuffers(GLsizei n, const BufferName *buffers) const
{
    static const char *fnName = "glDeleteBuffers";

    beforeCommand(fnName, _api.glDeleteBuffers);
    _api.glDeleteBuffers(n, reinterpret_cast<const GLuint *>(buffers));
    afterCommand(fnName);
}

// Calls glDeleteQueries().
void GLAPI::deleteQueries(GLsizei n, const QueryName *ids) const
{
    static const char *fnName = "glDeleteQueries";

    beforeCommand(fnName, _api.glDeleteQueries);
    _api.glDeleteQueries(n, reinterpret_cast<const GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glEndQuery().
void GLAPI::endQuery(QueryTarget target) const
{
    static const char *fnName = "glEndQuery";

    beforeCommand(fnName, _api.glEndQuery);
    _api.glEndQuery(toScalar(target));
    afterCommand(fnName);
}

// Calls glGenBuffers().
void GLAPI::genBuffers(GLsizei n, BufferName *buffers) const
{
    static const char *fnName = "glGenBuffers";

    beforeCommand(fnName, _api.glGenBuffers);
    _api.glGenBuffers(n, reinterpret_cast<GLuint *>(buffers));
    afterCommand(fnName);
}

// Calls glGenQueries().
void GLAPI::genQueries(GLsizei n, QueryName *ids) const
{
    static const char *fnName = "glGenQueries";

    beforeCommand(fnName, _api.glGenQueries);
    _api.glGenQueries(n, reinterpret_cast<GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glGetBufferParameteriv().
void GLAPI::getBufferParameterIV(BufferTarget target, BufferPNameARB pname,
                                 GLint *params) const
{
    static const char *fnName = "glGetBufferParameteriv";

    beforeCommand(fnName, _api.glGetBufferParameteriv);
    _api.glGetBufferParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetBufferPointerv().
void GLAPI::getBufferPointerV(BufferTarget target, BufferPointerNameARB pname,
                              void **params) const
{
    static const char *fnName = "glGetBufferPointerv";

    beforeCommand(fnName, _api.glGetBufferPointerv);
    _api.glGetBufferPointerv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetBufferSubData().
void GLAPI::getBufferSubData(BufferTarget target, GLintptr offset,
                             GLsizeiptr size, void *data) const
{
    static const char *fnName = "glGetBufferSubData";

    beforeCommand(fnName, _api.glGetBufferSubData);
    _api.glGetBufferSubData(toScalar(target), offset, size, data);
    afterCommand(fnName);
}

// Calls glGetQueryObjectiv().
void GLAPI::getQueryObjectIV(QueryName id, QueryObjectParameterName pname,
                             GLint *params) const
{
    static const char *fnName = "glGetQueryObjectiv";

    beforeCommand(fnName, _api.glGetQueryObjectiv);
    _api.glGetQueryObjectiv(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetQueryObjectuiv().
void GLAPI::getQueryObjectUIV(QueryName id, QueryObjectParameterName pname,
                              GLuint *params) const
{
    static const char *fnName = "glGetQueryObjectuiv";

    beforeCommand(fnName, _api.glGetQueryObjectuiv);
    _api.glGetQueryObjectuiv(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetQueryiv().
void GLAPI::getQueryIV(QueryTarget target, QueryParameterName pname,
                       GLint *params) const
{
    static const char *fnName = "glGetQueryiv";

    beforeCommand(fnName, _api.glGetQueryiv);
    _api.glGetQueryiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsBuffer().
Boolean GLAPI::isBuffer(BufferName buffer) const
{
    static const char *fnName = "glIsBuffer";

    beforeCommand(fnName, _api.glIsBuffer);
    GLboolean result = _api.glIsBuffer(buffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsQuery().
Boolean GLAPI::isQuery(QueryName id) const
{
    static const char *fnName = "glIsQuery";

    beforeCommand(fnName, _api.glIsQuery);
    GLboolean result = _api.glIsQuery(id.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMapBuffer().
void *GLAPI::mapBuffer(BufferTarget target, BufferAccessARB access) const
{
    static const char *fnName = "glMapBuffer";

    beforeCommand(fnName, _api.glMapBuffer);
    void *result = _api.glMapBuffer(toScalar(target), toScalar(access));
    afterCommand(fnName);

    return result;
}

// Calls glUnmapBuffer().
Boolean GLAPI::unmapBuffer(BufferTarget target) const
{
    static const char *fnName = "glUnmapBuffer";

    beforeCommand(fnName, _api.glUnmapBuffer);
    GLboolean result = _api.glUnmapBuffer(toScalar(target));
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glAttachShader().
void GLAPI::attachShader(ProgramName program, ShaderName shader) const
{
    static const char *fnName = "glAttachShader";

    beforeCommand(fnName, _api.glAttachShader);
    _api.glAttachShader(program.ID, shader.ID);
    afterCommand(fnName);
}

// Calls glBindAttribLocation().
void GLAPI::bindAttribLocation(ProgramName program, GLuint index,
                               const GLchar *name) const
{
    static const char *fnName = "glBindAttribLocation";

    beforeCommand(fnName, _api.glBindAttribLocation);
    _api.glBindAttribLocation(program.ID, index, name);
    afterCommand(fnName);
}

// Calls glBlendEquationSeparate().
void GLAPI::blendEquationSeparate(BlendEquationModeEXT modeRGB,
                                  BlendEquationModeEXT modeAlpha) const
{
    static const char *fnName = "glBlendEquationSeparate";

    beforeCommand(fnName, _api.glBlendEquationSeparate);
    _api.glBlendEquationSeparate(toScalar(modeRGB), toScalar(modeAlpha));
    afterCommand(fnName);
}

// Calls glCompileShader().
void GLAPI::compileShader(ShaderName shader) const
{
    static const char *fnName = "glCompileShader";

    beforeCommand(fnName, _api.glCompileShader);
    _api.glCompileShader(shader.ID);
    afterCommand(fnName);
}

// Calls glCreateProgram().
ProgramName GLAPI::createProgram() const
{
    static const char *fnName = "glCreateProgram";

    beforeCommand(fnName, _api.glCreateProgram);
    GLuint result = _api.glCreateProgram();
    afterCommand(fnName);

    return ProgramName(result);
}

// Calls glCreateShader().
ShaderName GLAPI::createShader(ShaderType type) const
{
    static const char *fnName = "glCreateShader";

    beforeCommand(fnName, _api.glCreateShader);
    GLuint result = _api.glCreateShader(toScalar(type));
    afterCommand(fnName);

    return ShaderName(result);
}

// Calls glDeleteProgram().
void GLAPI::deleteProgram(ProgramName program) const
{
    static const char *fnName = "glDeleteProgram";

    beforeCommand(fnName, _api.glDeleteProgram);
    _api.glDeleteProgram(program.ID);
    afterCommand(fnName);
}

// Calls glDeleteShader().
void GLAPI::deleteShader(ShaderName shader) const
{
    static const char *fnName = "glDeleteShader";

    beforeCommand(fnName, _api.glDeleteShader);
    _api.glDeleteShader(shader.ID);
    afterCommand(fnName);
}

// Calls glDetachShader().
void GLAPI::detachShader(ProgramName program, ShaderName shader) const
{
    static const char *fnName = "glDetachShader";

    beforeCommand(fnName, _api.glDetachShader);
    _api.glDetachShader(program.ID, shader.ID);
    afterCommand(fnName);
}

// Calls glDisableVertexAttribArray().
void GLAPI::disableVertexAttribArray(GLuint index) const
{
    static const char *fnName = "glDisableVertexAttribArray";

    beforeCommand(fnName, _api.glDisableVertexAttribArray);
    _api.glDisableVertexAttribArray(index);
    afterCommand(fnName);
}

// Calls glDrawBuffers().
void GLAPI::drawBuffers(GLsizei n, const DrawBufferMode *bufs) const
{
    static const char *fnName = "glDrawBuffers";

    beforeCommand(fnName, _api.glDrawBuffers);
    _api.glDrawBuffers(n, toScalarPtr(bufs));
    afterCommand(fnName);
}

// Calls glEnableVertexAttribArray().
void GLAPI::enableVertexAttribArray(GLuint index) const
{
    static const char *fnName = "glEnableVertexAttribArray";

    beforeCommand(fnName, _api.glEnableVertexAttribArray);
    _api.glEnableVertexAttribArray(index);
    afterCommand(fnName);
}

// Calls glGetActiveAttrib().
void GLAPI::getActiveAttrib(ProgramName program, GLuint index, GLsizei bufSize,
                            GLsizei *length, GLint *size, AttributeType *type,
                            GLchar *name) const
{
    static const char *fnName = "glGetActiveAttrib";

    beforeCommand(fnName, _api.glGetActiveAttrib);
    _api.glGetActiveAttrib(program.ID, index, bufSize, length, size,
                           toScalarPtr(type), name);
    afterCommand(fnName);
}

// Calls glGetActiveUniform().
void GLAPI::getActiveUniform(ProgramName program, GLuint index, GLsizei bufSize,
                             GLsizei *length, GLint *size, UniformType *type,
                             GLchar *name) const
{
    static const char *fnName = "glGetActiveUniform";

    beforeCommand(fnName, _api.glGetActiveUniform);
    _api.glGetActiveUniform(program.ID, index, bufSize, length, size,
                            toScalarPtr(type), name);
    afterCommand(fnName);
}

// Calls glGetAttachedShaders().
void GLAPI::getAttachedShaders(ProgramName program, GLsizei maxCount,
                               GLsizei *count, ShaderName *shaders) const
{
    static const char *fnName = "glGetAttachedShaders";

    beforeCommand(fnName, _api.glGetAttachedShaders);
    _api.glGetAttachedShaders(program.ID, maxCount, count,
                              reinterpret_cast<GLuint *>(shaders));
    afterCommand(fnName);
}

// Calls glGetAttribLocation().
GLint GLAPI::getAttribLocation(ProgramName program, const GLchar *name) const
{
    static const char *fnName = "glGetAttribLocation";

    beforeCommand(fnName, _api.glGetAttribLocation);
    GLint result = _api.glGetAttribLocation(program.ID, name);
    afterCommand(fnName);

    return result;
}

// Calls glGetProgramInfoLog().
void GLAPI::getProgramInfoLog(ProgramName program, GLsizei bufSize,
                              GLsizei *length, GLchar *infoLog) const
{
    static const char *fnName = "glGetProgramInfoLog";

    beforeCommand(fnName, _api.glGetProgramInfoLog);
    _api.glGetProgramInfoLog(program.ID, bufSize, length, infoLog);
    afterCommand(fnName);
}

// Calls glGetProgramiv().
void GLAPI::getProgramIV(ProgramName program, ProgramProperty pname,
                         GLint *params) const
{
    static const char *fnName = "glGetProgramiv";

    beforeCommand(fnName, _api.glGetProgramiv);
    _api.glGetProgramiv(program.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetShaderInfoLog().
void GLAPI::getShaderInfoLog(ShaderName shader, GLsizei bufSize, GLsizei *length,
                             GLchar *infoLog) const
{
    static const char *fnName = "glGetShaderInfoLog";

    beforeCommand(fnName, _api.glGetShaderInfoLog);
    _api.glGetShaderInfoLog(shader.ID, bufSize, length, infoLog);
    afterCommand(fnName);
}

// Calls glGetShaderSource().
void GLAPI::getShaderSource(ShaderName shader, GLsizei bufSize, GLsizei *length,
                            GLchar *source) const
{
    static const char *fnName = "glGetShaderSource";

    beforeCommand(fnName, _api.glGetShaderSource);
    _api.glGetShaderSource(shader.ID, bufSize, length, source);
    afterCommand(fnName);
}

// Calls glGetShaderiv().
void GLAPI::getShaderIV(ShaderName shader, ShaderParameterName pname,
                        GLint *params) const
{
    static const char *fnName = "glGetShaderiv";

    beforeCommand(fnName, _api.glGetShaderiv);
    _api.glGetShaderiv(shader.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetUniformLocation().
GLint GLAPI::getUniformLocation(ProgramName program, const GLchar *name) const
{
    static const char *fnName = "glGetUniformLocation";

    beforeCommand(fnName, _api.glGetUniformLocation);
    GLint result = _api.glGetUniformLocation(program.ID, name);
    afterCommand(fnName);

    return result;
}

// Calls glGetUniformfv().
void GLAPI::getUniformFV(ProgramName program, GLint location, GLfloat *params) const
{
    static const char *fnName = "glGetUniformfv";

    beforeCommand(fnName, _api.glGetUniformfv);
    _api.glGetUniformfv(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glGetUniformiv().
void GLAPI::getUniformIV(ProgramName program, GLint location, GLint *params) const
{
    static const char *fnName = "glGetUniformiv";

    beforeCommand(fnName, _api.glGetUniformiv);
    _api.glGetUniformiv(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribPointerv().
void GLAPI::getVertexAttribPointerV(GLuint index,
                                    VertexAttribPointerPropertyARB pname,
                                    void **pointer) const
{
    static const char *fnName = "glGetVertexAttribPointerv";

    beforeCommand(fnName, _api.glGetVertexAttribPointerv);
    _api.glGetVertexAttribPointerv(index, toScalar(pname), pointer);
    afterCommand(fnName);
}

// Calls glGetVertexAttribdv().
void GLAPI::getVertexAttribDV(GLuint index, VertexAttribPropertyARB pname,
                              GLdouble *params) const
{
    static const char *fnName = "glGetVertexAttribdv";

    beforeCommand(fnName, _api.glGetVertexAttribdv);
    _api.glGetVertexAttribdv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribfv().
void GLAPI::getVertexAttribFV(GLuint index, VertexAttribPropertyARB pname,
                              GLfloat *params) const
{
    static const char *fnName = "glGetVertexAttribfv";

    beforeCommand(fnName, _api.glGetVertexAttribfv);
    _api.glGetVertexAttribfv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribiv().
void GLAPI::getVertexAttribIV(GLuint index, VertexAttribPropertyARB pname,
                              GLint *params) const
{
    static const char *fnName = "glGetVertexAttribiv";

    beforeCommand(fnName, _api.glGetVertexAttribiv);
    _api.glGetVertexAttribiv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsProgram().
Boolean GLAPI::isProgram(ProgramName program) const
{
    static const char *fnName = "glIsProgram";

    beforeCommand(fnName, _api.glIsProgram);
    GLboolean result = _api.glIsProgram(program.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsShader().
Boolean GLAPI::isShader(ShaderName shader) const
{
    static const char *fnName = "glIsShader";

    beforeCommand(fnName, _api.glIsShader);
    GLboolean result = _api.glIsShader(shader.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glLinkProgram().
void GLAPI::linkProgram(ProgramName program) const
{
    static const char *fnName = "glLinkProgram";

    beforeCommand(fnName, _api.glLinkProgram);
    _api.glLinkProgram(program.ID);
    afterCommand(fnName);
}

// Calls glShaderSource().
void GLAPI::shaderSource(ShaderName shader, GLsizei count,
                         const GLchar *const*string, const GLint *length) const
{
    static const char *fnName = "glShaderSource";

    beforeCommand(fnName, _api.glShaderSource);
    _api.glShaderSource(shader.ID, count, string, length);
    afterCommand(fnName);
}

// Calls glStencilFuncSeparate().
void GLAPI::stencilFuncSeparate(StencilFaceDirection face, StencilFunction func,
                                GLint ref, GLuint mask) const
{
    static const char *fnName = "glStencilFuncSeparate";

    beforeCommand(fnName, _api.glStencilFuncSeparate);
    _api.glStencilFuncSeparate(toScalar(face), toScalar(func), ref, mask);
    afterCommand(fnName);
}

// Calls glStencilMaskSeparate().
void GLAPI::stencilMaskSeparate(StencilFaceDirection face, GLuint mask) const
{
    static const char *fnName = "glStencilMaskSeparate";

    beforeCommand(fnName, _api.glStencilMaskSeparate);
    _api.glStencilMaskSeparate(toScalar(face), mask);
    afterCommand(fnName);
}

// Calls glStencilOpSeparate().
void GLAPI::stencilOpSeparate(StencilFaceDirection face, StencilOp sfail,
                              StencilOp dpfail, StencilOp dppass) const
{
    static const char *fnName = "glStencilOpSeparate";

    beforeCommand(fnName, _api.glStencilOpSeparate);
    _api.glStencilOpSeparate(toScalar(face), toScalar(sfail), toScalar(dpfail),
                             toScalar(dppass));
    afterCommand(fnName);
}

// Calls glUniform1f().
void GLAPI::uniform1F(GLint location, GLfloat v0) const
{
    static const char *fnName = "glUniform1f";

    beforeCommand(fnName, _api.glUniform1f);
    _api.glUniform1f(location, v0);
    afterCommand(fnName);
}

// Calls glUniform1fv().
void GLAPI::uniform1FV(GLint location, GLsizei count, const GLfloat *value) const
{
    static const char *fnName = "glUniform1fv";

    beforeCommand(fnName, _api.glUniform1fv);
    _api.glUniform1fv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform1i().
void GLAPI::uniform1I(GLint location, GLint v0) const
{
    static const char *fnName = "glUniform1i";

    beforeCommand(fnName, _api.glUniform1i);
    _api.glUniform1i(location, v0);
    afterCommand(fnName);
}

// Calls glUniform1iv().
void GLAPI::uniform1IV(GLint location, GLsizei count, const GLint *value) const
{
    static const char *fnName = "glUniform1iv";

    beforeCommand(fnName, _api.glUniform1iv);
    _api.glUniform1iv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2f().
void GLAPI::uniform2F(GLint location, GLfloat v0, GLfloat v1) const
{
    static const char *fnName = "glUniform2f";

    beforeCommand(fnName, _api.glUniform2f);
    _api.glUniform2f(location, v0, v1);
    afterCommand(fnName);
}

// Calls glUniform2fv().
void GLAPI::uniform2FV(GLint location, GLsizei count, const GLfloat *value) const
{
    static const char *fnName = "glUniform2fv";

    beforeCommand(fnName, _api.glUniform2fv);
    _api.glUniform2fv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2i().
void GLAPI::uniform2I(GLint location, GLint v0, GLint v1) const
{
    static const char *fnName = "glUniform2i";

    beforeCommand(fnName, _api.glUniform2i);
    _api.glUniform2i(location, v0, v1);
    afterCommand(fnName);
}

// Calls glUniform2iv().
void GLAPI::uniform2IV(GLint location, GLsizei count, const GLint *value) const
{
    static const char *fnName = "glUniform2iv";

    beforeCommand(fnName, _api.glUniform2iv);
    _api.glUniform2iv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3f().
void GLAPI::uniform3F(GLint location, GLfloat v0, GLfloat v1, GLfloat v2) const
{
    static const char *fnName = "glUniform3f";

    beforeCommand(fnName, _api.glUniform3f);
    _api.glUniform3f(location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glUniform3fv().
void GLAPI::uniform3FV(GLint location, GLsizei count, const GLfloat *value) const
{
    static const char *fnName = "glUniform3fv";

    beforeCommand(fnName, _api.glUniform3fv);
    _api.glUniform3fv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3i().
void GLAPI::uniform3I(GLint location, GLint v0, GLint v1, GLint v2) const
{
    static const char *fnName = "glUniform3i";

    beforeCommand(fnName, _api.glUniform3i);
    _api.glUniform3i(location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glUniform3iv().
void GLAPI::uniform3IV(GLint location, GLsizei count, const GLint *value) const
{
    static const char *fnName = "glUniform3iv";

    beforeCommand(fnName, _api.glUniform3iv);
    _api.glUniform3iv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4f().
void GLAPI::uniform4F(GLint location, GLfloat v0, GLfloat v1, GLfloat v2,
                      GLfloat v3) const
{
    static const char *fnName = "glUniform4f";

    beforeCommand(fnName, _api.glUniform4f);
    _api.glUniform4f(location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glUniform4fv().
void GLAPI::uniform4FV(GLint location, GLsizei count, const GLfloat *value) const
{
    static const char *fnName = "glUniform4fv";

    beforeCommand(fnName, _api.glUniform4fv);
    _api.glUniform4fv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4i().
void GLAPI::uniform4I(GLint location, GLint v0, GLint v1, GLint v2, GLint v3) const
{
    static const char *fnName = "glUniform4i";

    beforeCommand(fnName, _api.glUniform4i);
    _api.glUniform4i(location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glUniform4iv().
void GLAPI::uniform4IV(GLint location, GLsizei count, const GLint *value) const
{
    static const char *fnName = "glUniform4iv";

    beforeCommand(fnName, _api.glUniform4iv);
    _api.glUniform4iv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniformMatrix2fv().
void GLAPI::uniformMatrix2FV(GLint location, GLsizei count, Boolean transpose,
                             const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix2fv";

    beforeCommand(fnName, _api.glUniformMatrix2fv);
    _api.glUniformMatrix2fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix3fv().
void GLAPI::uniformMatrix3FV(GLint location, GLsizei count, Boolean transpose,
                             const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix3fv";

    beforeCommand(fnName, _api.glUniformMatrix3fv);
    _api.glUniformMatrix3fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix4fv().
void GLAPI::uniformMatrix4FV(GLint location, GLsizei count, Boolean transpose,
                             const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix4fv";

    beforeCommand(fnName, _api.glUniformMatrix4fv);
    _api.glUniformMatrix4fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUseProgram().
void GLAPI::useProgram(ProgramName program) const
{
    static const char *fnName = "glUseProgram";

    beforeCommand(fnName, _api.glUseProgram);
    _api.glUseProgram(program.ID);
    afterCommand(fnName);
}

// Calls glValidateProgram().
void GLAPI::validateProgram(ProgramName program) const
{
    static const char *fnName = "glValidateProgram";

    beforeCommand(fnName, _api.glValidateProgram);
    _api.glValidateProgram(program.ID);
    afterCommand(fnName);
}

// Calls glVertexAttrib1d().
void GLAPI::vertexAttrib1D(GLuint index, GLdouble x) const
{
    static const char *fnName = "glVertexAttrib1d";

    beforeCommand(fnName, _api.glVertexAttrib1d);
    _api.glVertexAttrib1d(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1dv().
void GLAPI::vertexAttrib1DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib1dv";

    beforeCommand(fnName, _api.glVertexAttrib1dv);
    _api.glVertexAttrib1dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib1f().
void GLAPI::vertexAttrib1F(GLuint index, GLfloat x) const
{
    static const char *fnName = "glVertexAttrib1f";

    beforeCommand(fnName, _api.glVertexAttrib1f);
    _api.glVertexAttrib1f(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1fv().
void GLAPI::vertexAttrib1FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib1fv";

    beforeCommand(fnName, _api.glVertexAttrib1fv);
    _api.glVertexAttrib1fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib1s().
void GLAPI::vertexAttrib1S(GLuint index, GLshort x) const
{
    static const char *fnName = "glVertexAttrib1s";

    beforeCommand(fnName, _api.glVertexAttrib1s);
    _api.glVertexAttrib1s(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1sv().
void GLAPI::vertexAttrib1SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib1sv";

    beforeCommand(fnName, _api.glVertexAttrib1sv);
    _api.glVertexAttrib1sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2d().
void GLAPI::vertexAttrib2D(GLuint index, GLdouble x, GLdouble y) const
{
    static const char *fnName = "glVertexAttrib2d";

    beforeCommand(fnName, _api.glVertexAttrib2d);
    _api.glVertexAttrib2d(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2dv().
void GLAPI::vertexAttrib2DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib2dv";

    beforeCommand(fnName, _api.glVertexAttrib2dv);
    _api.glVertexAttrib2dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2f().
void GLAPI::vertexAttrib2F(GLuint index, GLfloat x, GLfloat y) const
{
    static const char *fnName = "glVertexAttrib2f";

    beforeCommand(fnName, _api.glVertexAttrib2f);
    _api.glVertexAttrib2f(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2fv().
void GLAPI::vertexAttrib2FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib2fv";

    beforeCommand(fnName, _api.glVertexAttrib2fv);
    _api.glVertexAttrib2fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2s().
void GLAPI::vertexAttrib2S(GLuint index, GLshort x, GLshort y) const
{
    static const char *fnName = "glVertexAttrib2s";

    beforeCommand(fnName, _api.glVertexAttrib2s);
    _api.glVertexAttrib2s(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2sv().
void GLAPI::vertexAttrib2SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib2sv";

    beforeCommand(fnName, _api.glVertexAttrib2sv);
    _api.glVertexAttrib2sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3d().
void GLAPI::vertexAttrib3D(GLuint index, GLdouble x, GLdouble y, GLdouble z) const
{
    static const char *fnName = "glVertexAttrib3d";

    beforeCommand(fnName, _api.glVertexAttrib3d);
    _api.glVertexAttrib3d(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3dv().
void GLAPI::vertexAttrib3DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib3dv";

    beforeCommand(fnName, _api.glVertexAttrib3dv);
    _api.glVertexAttrib3dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3f().
void GLAPI::vertexAttrib3F(GLuint index, GLfloat x, GLfloat y, GLfloat z) const
{
    static const char *fnName = "glVertexAttrib3f";

    beforeCommand(fnName, _api.glVertexAttrib3f);
    _api.glVertexAttrib3f(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3fv().
void GLAPI::vertexAttrib3FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib3fv";

    beforeCommand(fnName, _api.glVertexAttrib3fv);
    _api.glVertexAttrib3fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3s().
void GLAPI::vertexAttrib3S(GLuint index, GLshort x, GLshort y, GLshort z) const
{
    static const char *fnName = "glVertexAttrib3s";

    beforeCommand(fnName, _api.glVertexAttrib3s);
    _api.glVertexAttrib3s(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3sv().
void GLAPI::vertexAttrib3SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib3sv";

    beforeCommand(fnName, _api.glVertexAttrib3sv);
    _api.glVertexAttrib3sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4Nbv().
void GLAPI::vertexAttrib4NBV(GLuint index, const GLbyte *v) const
{
    static const char *fnName = "glVertexAttrib4Nbv";

    beforeCommand(fnName, _api.glVertexAttrib4Nbv);
    _api.glVertexAttrib4Nbv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4Niv().
void GLAPI::vertexAttrib4NIV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttrib4Niv";

    beforeCommand(fnName, _api.glVertexAttrib4Niv);
    _api.glVertexAttrib4Niv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4Nsv().
void GLAPI::vertexAttrib4NSV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib4Nsv";

    beforeCommand(fnName, _api.glVertexAttrib4Nsv);
    _api.glVertexAttrib4Nsv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4Nub().
void GLAPI::vertexAttrib4NUB(GLuint index, GLubyte x, GLubyte y, GLubyte z,
                             GLubyte w) const
{
    static const char *fnName = "glVertexAttrib4Nub";

    beforeCommand(fnName, _api.glVertexAttrib4Nub);
    _api.glVertexAttrib4Nub(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4Nubv().
void GLAPI::vertexAttrib4NUBV(GLuint index, const GLubyte *v) const
{
    static const char *fnName = "glVertexAttrib4Nubv";

    beforeCommand(fnName, _api.glVertexAttrib4Nubv);
    _api.glVertexAttrib4Nubv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4Nuiv().
void GLAPI::vertexAttrib4NUIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttrib4Nuiv";

    beforeCommand(fnName, _api.glVertexAttrib4Nuiv);
    _api.glVertexAttrib4Nuiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4Nusv().
void GLAPI::vertexAttrib4NUSV(GLuint index, const GLushort *v) const
{
    static const char *fnName = "glVertexAttrib4Nusv";

    beforeCommand(fnName, _api.glVertexAttrib4Nusv);
    _api.glVertexAttrib4Nusv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4bv().
void GLAPI::vertexAttrib4BV(GLuint index, const GLbyte *v) const
{
    static const char *fnName = "glVertexAttrib4bv";

    beforeCommand(fnName, _api.glVertexAttrib4bv);
    _api.glVertexAttrib4bv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4d().
void GLAPI::vertexAttrib4D(GLuint index, GLdouble x, GLdouble y, GLdouble z,
                           GLdouble w) const
{
    static const char *fnName = "glVertexAttrib4d";

    beforeCommand(fnName, _api.glVertexAttrib4d);
    _api.glVertexAttrib4d(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4dv().
void GLAPI::vertexAttrib4DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib4dv";

    beforeCommand(fnName, _api.glVertexAttrib4dv);
    _api.glVertexAttrib4dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4f().
void GLAPI::vertexAttrib4F(GLuint index, GLfloat x, GLfloat y, GLfloat z,
                           GLfloat w) const
{
    static const char *fnName = "glVertexAttrib4f";

    beforeCommand(fnName, _api.glVertexAttrib4f);
    _api.glVertexAttrib4f(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4fv().
void GLAPI::vertexAttrib4FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib4fv";

    beforeCommand(fnName, _api.glVertexAttrib4fv);
    _api.glVertexAttrib4fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4iv().
void GLAPI::vertexAttrib4IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttrib4iv";

    beforeCommand(fnName, _api.glVertexAttrib4iv);
    _api.glVertexAttrib4iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4s().
void GLAPI::vertexAttrib4S(GLuint index, GLshort x, GLshort y, GLshort z,
                           GLshort w) const
{
    static const char *fnName = "glVertexAttrib4s";

    beforeCommand(fnName, _api.glVertexAttrib4s);
    _api.glVertexAttrib4s(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4sv().
void GLAPI::vertexAttrib4SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib4sv";

    beforeCommand(fnName, _api.glVertexAttrib4sv);
    _api.glVertexAttrib4sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4ubv().
void GLAPI::vertexAttrib4UBV(GLuint index, const GLubyte *v) const
{
    static const char *fnName = "glVertexAttrib4ubv";

    beforeCommand(fnName, _api.glVertexAttrib4ubv);
    _api.glVertexAttrib4ubv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4uiv().
void GLAPI::vertexAttrib4UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttrib4uiv";

    beforeCommand(fnName, _api.glVertexAttrib4uiv);
    _api.glVertexAttrib4uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4usv().
void GLAPI::vertexAttrib4USV(GLuint index, const GLushort *v) const
{
    static const char *fnName = "glVertexAttrib4usv";

    beforeCommand(fnName, _api.glVertexAttrib4usv);
    _api.glVertexAttrib4usv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribPointer().
void GLAPI::vertexAttribPointer(GLuint index, GLint size,
                                VertexAttribPointerType type, Boolean normalized,
                                GLsizei stride, const void *pointer) const
{
    static const char *fnName = "glVertexAttribPointer";

    beforeCommand(fnName, _api.glVertexAttribPointer);
    _api.glVertexAttribPointer(index, size, toScalar(type), toScalar(normalized),
                               stride, pointer);
    afterCommand(fnName);
}

// Calls glUniformMatrix2x3fv().
void GLAPI::uniformMatrix2x3FV(GLint location, GLsizei count, Boolean transpose,
                               const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix2x3fv";

    beforeCommand(fnName, _api.glUniformMatrix2x3fv);
    _api.glUniformMatrix2x3fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix2x4fv().
void GLAPI::uniformMatrix2x4FV(GLint location, GLsizei count, Boolean transpose,
                               const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix2x4fv";

    beforeCommand(fnName, _api.glUniformMatrix2x4fv);
    _api.glUniformMatrix2x4fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix3x2fv().
void GLAPI::uniformMatrix3x2FV(GLint location, GLsizei count, Boolean transpose,
                               const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix3x2fv";

    beforeCommand(fnName, _api.glUniformMatrix3x2fv);
    _api.glUniformMatrix3x2fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix3x4fv().
void GLAPI::uniformMatrix3x4FV(GLint location, GLsizei count, Boolean transpose,
                               const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix3x4fv";

    beforeCommand(fnName, _api.glUniformMatrix3x4fv);
    _api.glUniformMatrix3x4fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix4x2fv().
void GLAPI::uniformMatrix4x2FV(GLint location, GLsizei count, Boolean transpose,
                               const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix4x2fv";

    beforeCommand(fnName, _api.glUniformMatrix4x2fv);
    _api.glUniformMatrix4x2fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix4x3fv().
void GLAPI::uniformMatrix4x3FV(GLint location, GLsizei count, Boolean transpose,
                               const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix4x3fv";

    beforeCommand(fnName, _api.glUniformMatrix4x3fv);
    _api.glUniformMatrix4x3fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glBeginConditionalRender().
void GLAPI::beginConditionalRender(GLuint id, ConditionalRenderMode mode) const
{
    static const char *fnName = "glBeginConditionalRender";

    beforeCommand(fnName, _api.glBeginConditionalRender);
    _api.glBeginConditionalRender(id, toScalar(mode));
    afterCommand(fnName);
}

// Calls glBeginTransformFeedback().
void GLAPI::beginTransformFeedback(PrimitiveType primitiveMode) const
{
    static const char *fnName = "glBeginTransformFeedback";

    beforeCommand(fnName, _api.glBeginTransformFeedback);
    _api.glBeginTransformFeedback(toScalar(primitiveMode));
    afterCommand(fnName);
}

// Calls glBindBufferBase().
void GLAPI::bindBufferBase(BufferTarget target, GLuint index,
                           BufferName buffer) const
{
    static const char *fnName = "glBindBufferBase";

    beforeCommand(fnName, _api.glBindBufferBase);
    _api.glBindBufferBase(toScalar(target), index, buffer.ID);
    afterCommand(fnName);
}

// Calls glBindBufferRange().
void GLAPI::bindBufferRange(BufferTarget target, GLuint index,
                            BufferName buffer, GLintptr offset, GLsizeiptr size) const
{
    static const char *fnName = "glBindBufferRange";

    beforeCommand(fnName, _api.glBindBufferRange);
    _api.glBindBufferRange(toScalar(target), index, buffer.ID, offset, size);
    afterCommand(fnName);
}

// Calls glBindFragDataLocation().
void GLAPI::bindFragDataLocation(ProgramName program, GLuint color,
                                 const GLchar *name) const
{
    static const char *fnName = "glBindFragDataLocation";

    beforeCommand(fnName, _api.glBindFragDataLocation);
    _api.glBindFragDataLocation(program.ID, color, name);
    afterCommand(fnName);
}

// Calls glBindFramebuffer().
void GLAPI::bindFramebuffer(FramebufferTarget target,
                            FrameBufferName framebuffer) const
{
    static const char *fnName = "glBindFramebuffer";

    beforeCommand(fnName, _api.glBindFramebuffer);
    _api.glBindFramebuffer(toScalar(target), framebuffer.ID);
    afterCommand(fnName);
}

// Calls glBindRenderbuffer().
void GLAPI::bindRenderbuffer(RenderBufferTarget target,
                             RenderBufferName renderbuffer) const
{
    static const char *fnName = "glBindRenderbuffer";

    beforeCommand(fnName, _api.glBindRenderbuffer);
    _api.glBindRenderbuffer(toScalar(target), renderbuffer.ID);
    afterCommand(fnName);
}

// Calls glBindVertexArray().
void GLAPI::bindVertexArray(VertexArrayName array) const
{
    static const char *fnName = "glBindVertexArray";

    beforeCommand(fnName, _api.glBindVertexArray);
    _api.glBindVertexArray(array.ID);
    afterCommand(fnName);
}

// Calls glBlitFramebuffer().
void GLAPI::blitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1,
                            GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1,
                            GLbitfield  /* ClearBufferMask */ mask,
                            BlitFramebufferFilter filter) const
{
    static const char *fnName = "glBlitFramebuffer";

    beforeCommand(fnName, _api.glBlitFramebuffer);
    _api.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1,
                           dstY1, mask, toScalar(filter));
    afterCommand(fnName);
}

// Calls glCheckFramebufferStatus().
FramebufferStatus GLAPI::checkFramebufferStatus(FramebufferTarget target) const
{
    static const char *fnName = "glCheckFramebufferStatus";

    beforeCommand(fnName, _api.glCheckFramebufferStatus);
    GLenum result = _api.glCheckFramebufferStatus(toScalar(target));
    afterCommand(fnName);

    return static_cast<FramebufferStatus>(result);
}

// Calls glClampColor().
void GLAPI::clampColor(ClampColorTargetARB target, ClampColorModeARB clamp) const
{
    static const char *fnName = "glClampColor";

    beforeCommand(fnName, _api.glClampColor);
    _api.glClampColor(toScalar(target), toScalar(clamp));
    afterCommand(fnName);
}

// Calls glClearBufferfi().
void GLAPI::clearBufferFI(BufferEnum buffer, GLint drawbuffer, GLfloat depth,
                          GLint stencil) const
{
    static const char *fnName = "glClearBufferfi";

    beforeCommand(fnName, _api.glClearBufferfi);
    _api.glClearBufferfi(toScalar(buffer), drawbuffer, depth, stencil);
    afterCommand(fnName);
}

// Calls glClearBufferfv().
void GLAPI::clearBufferFV(BufferEnum buffer, GLint drawbuffer,
                          const GLfloat *value) const
{
    static const char *fnName = "glClearBufferfv";

    beforeCommand(fnName, _api.glClearBufferfv);
    _api.glClearBufferfv(toScalar(buffer), drawbuffer, value);
    afterCommand(fnName);
}

// Calls glClearBufferiv().
void GLAPI::clearBufferIV(BufferEnum buffer, GLint drawbuffer,
                          const GLint *value) const
{
    static const char *fnName = "glClearBufferiv";

    beforeCommand(fnName, _api.glClearBufferiv);
    _api.glClearBufferiv(toScalar(buffer), drawbuffer, value);
    afterCommand(fnName);
}

// Calls glClearBufferuiv().
void GLAPI::clearBufferUIV(BufferEnum buffer, GLint drawbuffer,
                           const GLuint *value) const
{
    static const char *fnName = "glClearBufferuiv";

    beforeCommand(fnName, _api.glClearBufferuiv);
    _api.glClearBufferuiv(toScalar(buffer), drawbuffer, value);
    afterCommand(fnName);
}

// Calls glColorMaski().
void GLAPI::colorMaskI(GLuint index, Boolean r, Boolean g, Boolean b, Boolean a) const
{
    static const char *fnName = "glColorMaski";

    beforeCommand(fnName, _api.glColorMaski);
    _api.glColorMaski(index, toScalar(r), toScalar(g), toScalar(b), toScalar(a));
    afterCommand(fnName);
}

// Calls glDeleteFramebuffers().
void GLAPI::deleteFramebuffers(GLsizei n, const FrameBufferName *framebuffers) const
{
    static const char *fnName = "glDeleteFramebuffers";

    beforeCommand(fnName, _api.glDeleteFramebuffers);
    _api.glDeleteFramebuffers(n, reinterpret_cast<const GLuint *>(framebuffers));
    afterCommand(fnName);
}

// Calls glDeleteRenderbuffers().
void GLAPI::deleteRenderbuffers(GLsizei n, const RenderBufferName *renderbuffers) const
{
    static const char *fnName = "glDeleteRenderbuffers";

    beforeCommand(fnName, _api.glDeleteRenderbuffers);
    _api.glDeleteRenderbuffers(n,
                               reinterpret_cast<const GLuint *>(renderbuffers));
    afterCommand(fnName);
}

// Calls glDeleteVertexArrays().
void GLAPI::deleteVertexArrays(GLsizei n, const VertexArrayName *arrays) const
{
    static const char *fnName = "glDeleteVertexArrays";

    beforeCommand(fnName, _api.glDeleteVertexArrays);
    _api.glDeleteVertexArrays(n, reinterpret_cast<const GLuint *>(arrays));
    afterCommand(fnName);
}

// Calls glDisablei().
void GLAPI::disableI(EnableCap target, GLuint index) const
{
    static const char *fnName = "glDisablei";

    beforeCommand(fnName, _api.glDisablei);
    _api.glDisablei(toScalar(target), index);
    afterCommand(fnName);
}

// Calls glEnablei().
void GLAPI::enableI(EnableCap target, GLuint index) const
{
    static const char *fnName = "glEnablei";

    beforeCommand(fnName, _api.glEnablei);
    _api.glEnablei(toScalar(target), index);
    afterCommand(fnName);
}

// Calls glEndConditionalRender().
void GLAPI::endConditionalRender() const
{
    static const char *fnName = "glEndConditionalRender";

    beforeCommand(fnName, _api.glEndConditionalRender);
    _api.glEndConditionalRender();
    afterCommand(fnName);
}

// Calls glEndTransformFeedback().
void GLAPI::endTransformFeedback() const
{
    static const char *fnName = "glEndTransformFeedback";

    beforeCommand(fnName, _api.glEndTransformFeedback);
    _api.glEndTransformFeedback();
    afterCommand(fnName);
}

// Calls glFlushMappedBufferRange().
void GLAPI::flushMappedBufferRange(BufferTarget target, GLintptr offset,
                                   GLsizeiptr length) const
{
    static const char *fnName = "glFlushMappedBufferRange";

    beforeCommand(fnName, _api.glFlushMappedBufferRange);
    _api.glFlushMappedBufferRange(toScalar(target), offset, length);
    afterCommand(fnName);
}

// Calls glFramebufferRenderbuffer().
void GLAPI::framebufferRenderbuffer(FramebufferTarget target,
                                    FramebufferAttachment attachment,
                                    RenderBufferTarget renderbuffertarget,
                                    RenderBufferName renderbuffer) const
{
    static const char *fnName = "glFramebufferRenderbuffer";

    beforeCommand(fnName, _api.glFramebufferRenderbuffer);
    _api.glFramebufferRenderbuffer(toScalar(target), toScalar(attachment),
                                   toScalar(renderbuffertarget), renderbuffer.ID);
    afterCommand(fnName);
}

// Calls glFramebufferTexture1D().
void GLAPI::framebufferTexture1D(FramebufferTarget target,
                                 FramebufferAttachment attachment,
                                 TextureTarget textarget, TextureName texture,
                                 GLint level) const
{
    static const char *fnName = "glFramebufferTexture1D";

    beforeCommand(fnName, _api.glFramebufferTexture1D);
    _api.glFramebufferTexture1D(toScalar(target), toScalar(attachment),
                                toScalar(textarget), texture.ID, level);
    afterCommand(fnName);
}

// Calls glFramebufferTexture2D().
void GLAPI::framebufferTexture2D(FramebufferTarget target,
                                 FramebufferAttachment attachment,
                                 TextureTarget textarget, TextureName texture,
                                 GLint level) const
{
    static const char *fnName = "glFramebufferTexture2D";

    beforeCommand(fnName, _api.glFramebufferTexture2D);
    _api.glFramebufferTexture2D(toScalar(target), toScalar(attachment),
                                toScalar(textarget), texture.ID, level);
    afterCommand(fnName);
}

// Calls glFramebufferTexture3D().
void GLAPI::framebufferTexture3D(FramebufferTarget target,
                                 FramebufferAttachment attachment,
                                 TextureTarget textarget, TextureName texture,
                                 GLint level, GLint zoffset) const
{
    static const char *fnName = "glFramebufferTexture3D";

    beforeCommand(fnName, _api.glFramebufferTexture3D);
    _api.glFramebufferTexture3D(toScalar(target), toScalar(attachment),
                                toScalar(textarget), texture.ID, level, zoffset);
    afterCommand(fnName);
}

// Calls glFramebufferTextureLayer().
void GLAPI::framebufferTextureLayer(FramebufferTarget target,
                                    FramebufferAttachment attachment,
                                    TextureName texture, GLint level,
                                    GLint layer) const
{
    static const char *fnName = "glFramebufferTextureLayer";

    beforeCommand(fnName, _api.glFramebufferTextureLayer);
    _api.glFramebufferTextureLayer(toScalar(target), toScalar(attachment),
                                   texture.ID, level, layer);
    afterCommand(fnName);
}

// Calls glGenFramebuffers().
void GLAPI::genFramebuffers(GLsizei n, FrameBufferName *framebuffers) const
{
    static const char *fnName = "glGenFramebuffers";

    beforeCommand(fnName, _api.glGenFramebuffers);
    _api.glGenFramebuffers(n, reinterpret_cast<GLuint *>(framebuffers));
    afterCommand(fnName);
}

// Calls glGenRenderbuffers().
void GLAPI::genRenderbuffers(GLsizei n, RenderBufferName *renderbuffers) const
{
    static const char *fnName = "glGenRenderbuffers";

    beforeCommand(fnName, _api.glGenRenderbuffers);
    _api.glGenRenderbuffers(n, reinterpret_cast<GLuint *>(renderbuffers));
    afterCommand(fnName);
}

// Calls glGenVertexArrays().
void GLAPI::genVertexArrays(GLsizei n, VertexArrayName *arrays) const
{
    static const char *fnName = "glGenVertexArrays";

    beforeCommand(fnName, _api.glGenVertexArrays);
    _api.glGenVertexArrays(n, reinterpret_cast<GLuint *>(arrays));
    afterCommand(fnName);
}

// Calls glGenerateMipmap().
void GLAPI::generateMipmap(TextureTarget target) const
{
    static const char *fnName = "glGenerateMipmap";

    beforeCommand(fnName, _api.glGenerateMipmap);
    _api.glGenerateMipmap(toScalar(target));
    afterCommand(fnName);
}

// Calls glGetBooleani_v().
void GLAPI::getBooleanIV(BufferTarget target, GLuint index, Boolean *data) const
{
    static const char *fnName = "glGetBooleani_v";

    beforeCommand(fnName, _api.glGetBooleani_v);
    _api.glGetBooleani_v(toScalar(target), index, toScalarPtr(data));
    afterCommand(fnName);
}

// Calls glGetFragDataLocation().
GLint GLAPI::getFragDataLocation(ProgramName program, const GLchar *name) const
{
    static const char *fnName = "glGetFragDataLocation";

    beforeCommand(fnName, _api.glGetFragDataLocation);
    GLint result = _api.glGetFragDataLocation(program.ID, name);
    afterCommand(fnName);

    return result;
}

// Calls glGetFramebufferAttachmentParameteriv().
void GLAPI::getFramebufferAttachmentParameterIV(FramebufferTarget target,
                                                FramebufferAttachment attachment,
                                                FramebufferAttachmentParameterName pname,
                                                GLint *params) const
{
    static const char *fnName = "glGetFramebufferAttachmentParameteriv";

    beforeCommand(fnName, _api.glGetFramebufferAttachmentParameteriv);
    _api.glGetFramebufferAttachmentParameteriv(toScalar(target),
                                               toScalar(attachment),
                                               toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetIntegeri_v().
void GLAPI::getIntegerIV(GetPName target, GLuint index, GLint *data) const
{
    static const char *fnName = "glGetIntegeri_v";

    beforeCommand(fnName, _api.glGetIntegeri_v);
    _api.glGetIntegeri_v(toScalar(target), index, data);
    afterCommand(fnName);
}

// Calls glGetRenderbufferParameteriv().
void GLAPI::getRenderbufferParameterIV(RenderBufferTarget target,
                                       RenderBufferParameterName pname,
                                       GLint *params) const
{
    static const char *fnName = "glGetRenderbufferParameteriv";

    beforeCommand(fnName, _api.glGetRenderbufferParameteriv);
    _api.glGetRenderbufferParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetStringi().
const char *GLAPI::getStringI(StringName name, GLuint index) const
{
    static const char *fnName = "glGetStringi";

    beforeCommand(fnName, _api.glGetStringi);
    const char *result = _api.glGetStringi(toScalar(name), index);
    afterCommand(fnName);

    return result;
}

// Calls glGetTexParameterIiv().
void GLAPI::getTexParameterIIV(TextureTarget target, GetTextureParameter pname,
                               GLint *params) const
{
    static const char *fnName = "glGetTexParameterIiv";

    beforeCommand(fnName, _api.glGetTexParameterIiv);
    _api.glGetTexParameterIiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTexParameterIuiv().
void GLAPI::getTexParameterIUIV(TextureTarget target, GetTextureParameter pname,
                                GLuint *params) const
{
    static const char *fnName = "glGetTexParameterIuiv";

    beforeCommand(fnName, _api.glGetTexParameterIuiv);
    _api.glGetTexParameterIuiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTransformFeedbackVarying().
void GLAPI::getTransformFeedbackVarying(ProgramName program, GLuint index,
                                        GLsizei bufSize, GLsizei *length,
                                        GLsizei *size, AttributeType *type,
                                        GLchar *name) const
{
    static const char *fnName = "glGetTransformFeedbackVarying";

    beforeCommand(fnName, _api.glGetTransformFeedbackVarying);
    _api.glGetTransformFeedbackVarying(program.ID, index, bufSize, length, size,
                                       toScalarPtr(type), name);
    afterCommand(fnName);
}

// Calls glGetUniformuiv().
void GLAPI::getUniformUIV(ProgramName program, GLint location, GLuint *params) const
{
    static const char *fnName = "glGetUniformuiv";

    beforeCommand(fnName, _api.glGetUniformuiv);
    _api.glGetUniformuiv(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribIiv().
void GLAPI::getVertexAttribIIV(GLuint index, VertexAttribEnum pname,
                               GLint *params) const
{
    static const char *fnName = "glGetVertexAttribIiv";

    beforeCommand(fnName, _api.glGetVertexAttribIiv);
    _api.glGetVertexAttribIiv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribIuiv().
void GLAPI::getVertexAttribIUIV(GLuint index, VertexAttribEnum pname,
                                GLuint *params) const
{
    static const char *fnName = "glGetVertexAttribIuiv";

    beforeCommand(fnName, _api.glGetVertexAttribIuiv);
    _api.glGetVertexAttribIuiv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsEnabledi().
Boolean GLAPI::isEnabledI(EnableCap target, GLuint index) const
{
    static const char *fnName = "glIsEnabledi";

    beforeCommand(fnName, _api.glIsEnabledi);
    GLboolean result = _api.glIsEnabledi(toScalar(target), index);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsFramebuffer().
Boolean GLAPI::isFramebuffer(FrameBufferName framebuffer) const
{
    static const char *fnName = "glIsFramebuffer";

    beforeCommand(fnName, _api.glIsFramebuffer);
    GLboolean result = _api.glIsFramebuffer(framebuffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsRenderbuffer().
Boolean GLAPI::isRenderbuffer(RenderBufferName renderbuffer) const
{
    static const char *fnName = "glIsRenderbuffer";

    beforeCommand(fnName, _api.glIsRenderbuffer);
    GLboolean result = _api.glIsRenderbuffer(renderbuffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsVertexArray().
Boolean GLAPI::isVertexArray(VertexArrayName array) const
{
    static const char *fnName = "glIsVertexArray";

    beforeCommand(fnName, _api.glIsVertexArray);
    GLboolean result = _api.glIsVertexArray(array.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMapBufferRange().
void *GLAPI::mapBufferRange(BufferTarget target, GLintptr offset,
                            GLsizeiptr length,
                            GLbitfield  /* MapBufferAccessMask */ access) const
{
    static const char *fnName = "glMapBufferRange";

    beforeCommand(fnName, _api.glMapBufferRange);
    void *result = _api.glMapBufferRange(toScalar(target), offset, length,
                                         access);
    afterCommand(fnName);

    return result;
}

// Calls glRenderbufferStorage().
void GLAPI::renderbufferStorage(RenderBufferTarget target,
                                InternalFormat internalformat, GLsizei width,
                                GLsizei height) const
{
    static const char *fnName = "glRenderbufferStorage";

    beforeCommand(fnName, _api.glRenderbufferStorage);
    _api.glRenderbufferStorage(toScalar(target), toScalar(internalformat), width,
                               height);
    afterCommand(fnName);
}

// Calls glRenderbufferStorageMultisample().
void GLAPI::renderbufferStorageMultisample(RenderBufferTarget target,
                                           GLsizei samples,
                                           InternalFormat internalformat,
                                           GLsizei width, GLsizei height) const
{
    static const char *fnName = "glRenderbufferStorageMultisample";

    beforeCommand(fnName, _api.glRenderbufferStorageMultisample);
    _api.glRenderbufferStorageMultisample(toScalar(target), samples,
                                          toScalar(internalformat), width,
                                          height);
    afterCommand(fnName);
}

// Calls glTexParameterIiv().
void GLAPI::texParameterIIV(TextureTarget target, TextureParameterName pname,
                            const GLint *params) const
{
    static const char *fnName = "glTexParameterIiv";

    beforeCommand(fnName, _api.glTexParameterIiv);
    _api.glTexParameterIiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTexParameterIuiv().
void GLAPI::texParameterIUIV(TextureTarget target, TextureParameterName pname,
                             const GLuint *params) const
{
    static const char *fnName = "glTexParameterIuiv";

    beforeCommand(fnName, _api.glTexParameterIuiv);
    _api.glTexParameterIuiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTransformFeedbackVaryings().
void GLAPI::transformFeedbackVaryings(ProgramName program, GLsizei count,
                                      const GLchar *const*varyings,
                                      TransformFeedbackBufferMode bufferMode) const
{
    static const char *fnName = "glTransformFeedbackVaryings";

    beforeCommand(fnName, _api.glTransformFeedbackVaryings);
    _api.glTransformFeedbackVaryings(program.ID, count, varyings,
                                     toScalar(bufferMode));
    afterCommand(fnName);
}

// Calls glUniform1ui().
void GLAPI::uniform1UI(GLint location, GLuint v0) const
{
    static const char *fnName = "glUniform1ui";

    beforeCommand(fnName, _api.glUniform1ui);
    _api.glUniform1ui(location, v0);
    afterCommand(fnName);
}

// Calls glUniform1uiv().
void GLAPI::uniform1UIV(GLint location, GLsizei count, const GLuint *value) const
{
    static const char *fnName = "glUniform1uiv";

    beforeCommand(fnName, _api.glUniform1uiv);
    _api.glUniform1uiv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2ui().
void GLAPI::uniform2UI(GLint location, GLuint v0, GLuint v1) const
{
    static const char *fnName = "glUniform2ui";

    beforeCommand(fnName, _api.glUniform2ui);
    _api.glUniform2ui(location, v0, v1);
    afterCommand(fnName);
}

// Calls glUniform2uiv().
void GLAPI::uniform2UIV(GLint location, GLsizei count, const GLuint *value) const
{
    static const char *fnName = "glUniform2uiv";

    beforeCommand(fnName, _api.glUniform2uiv);
    _api.glUniform2uiv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3ui().
void GLAPI::uniform3UI(GLint location, GLuint v0, GLuint v1, GLuint v2) const
{
    static const char *fnName = "glUniform3ui";

    beforeCommand(fnName, _api.glUniform3ui);
    _api.glUniform3ui(location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glUniform3uiv().
void GLAPI::uniform3UIV(GLint location, GLsizei count, const GLuint *value) const
{
    static const char *fnName = "glUniform3uiv";

    beforeCommand(fnName, _api.glUniform3uiv);
    _api.glUniform3uiv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4ui().
void GLAPI::uniform4UI(GLint location, GLuint v0, GLuint v1, GLuint v2,
                       GLuint v3) const
{
    static const char *fnName = "glUniform4ui";

    beforeCommand(fnName, _api.glUniform4ui);
    _api.glUniform4ui(location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glUniform4uiv().
void GLAPI::uniform4UIV(GLint location, GLsizei count, const GLuint *value) const
{
    static const char *fnName = "glUniform4uiv";

    beforeCommand(fnName, _api.glUniform4uiv);
    _api.glUniform4uiv(location, count, value);
    afterCommand(fnName);
}

// Calls glVertexAttribI1i().
void GLAPI::vertexAttribI1I(GLuint index, GLint x) const
{
    static const char *fnName = "glVertexAttribI1i";

    beforeCommand(fnName, _api.glVertexAttribI1i);
    _api.glVertexAttribI1i(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribI1iv().
void GLAPI::vertexAttribI1IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttribI1iv";

    beforeCommand(fnName, _api.glVertexAttribI1iv);
    _api.glVertexAttribI1iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI1ui().
void GLAPI::vertexAttribI1UI(GLuint index, GLuint x) const
{
    static const char *fnName = "glVertexAttribI1ui";

    beforeCommand(fnName, _api.glVertexAttribI1ui);
    _api.glVertexAttribI1ui(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribI1uiv().
void GLAPI::vertexAttribI1UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttribI1uiv";

    beforeCommand(fnName, _api.glVertexAttribI1uiv);
    _api.glVertexAttribI1uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI2i().
void GLAPI::vertexAttribI2I(GLuint index, GLint x, GLint y) const
{
    static const char *fnName = "glVertexAttribI2i";

    beforeCommand(fnName, _api.glVertexAttribI2i);
    _api.glVertexAttribI2i(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttribI2iv().
void GLAPI::vertexAttribI2IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttribI2iv";

    beforeCommand(fnName, _api.glVertexAttribI2iv);
    _api.glVertexAttribI2iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI2ui().
void GLAPI::vertexAttribI2UI(GLuint index, GLuint x, GLuint y) const
{
    static const char *fnName = "glVertexAttribI2ui";

    beforeCommand(fnName, _api.glVertexAttribI2ui);
    _api.glVertexAttribI2ui(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttribI2uiv().
void GLAPI::vertexAttribI2UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttribI2uiv";

    beforeCommand(fnName, _api.glVertexAttribI2uiv);
    _api.glVertexAttribI2uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI3i().
void GLAPI::vertexAttribI3I(GLuint index, GLint x, GLint y, GLint z) const
{
    static const char *fnName = "glVertexAttribI3i";

    beforeCommand(fnName, _api.glVertexAttribI3i);
    _api.glVertexAttribI3i(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttribI3iv().
void GLAPI::vertexAttribI3IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttribI3iv";

    beforeCommand(fnName, _api.glVertexAttribI3iv);
    _api.glVertexAttribI3iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI3ui().
void GLAPI::vertexAttribI3UI(GLuint index, GLuint x, GLuint y, GLuint z) const
{
    static const char *fnName = "glVertexAttribI3ui";

    beforeCommand(fnName, _api.glVertexAttribI3ui);
    _api.glVertexAttribI3ui(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttribI3uiv().
void GLAPI::vertexAttribI3UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttribI3uiv";

    beforeCommand(fnName, _api.glVertexAttribI3uiv);
    _api.glVertexAttribI3uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4bv().
void GLAPI::vertexAttribI4BV(GLuint index, const GLbyte *v) const
{
    static const char *fnName = "glVertexAttribI4bv";

    beforeCommand(fnName, _api.glVertexAttribI4bv);
    _api.glVertexAttribI4bv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4i().
void GLAPI::vertexAttribI4I(GLuint index, GLint x, GLint y, GLint z, GLint w) const
{
    static const char *fnName = "glVertexAttribI4i";

    beforeCommand(fnName, _api.glVertexAttribI4i);
    _api.glVertexAttribI4i(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttribI4iv().
void GLAPI::vertexAttribI4IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttribI4iv";

    beforeCommand(fnName, _api.glVertexAttribI4iv);
    _api.glVertexAttribI4iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4sv().
void GLAPI::vertexAttribI4SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttribI4sv";

    beforeCommand(fnName, _api.glVertexAttribI4sv);
    _api.glVertexAttribI4sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4ubv().
void GLAPI::vertexAttribI4UBV(GLuint index, const GLubyte *v) const
{
    static const char *fnName = "glVertexAttribI4ubv";

    beforeCommand(fnName, _api.glVertexAttribI4ubv);
    _api.glVertexAttribI4ubv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4ui().
void GLAPI::vertexAttribI4UI(GLuint index, GLuint x, GLuint y, GLuint z,
                             GLuint w) const
{
    static const char *fnName = "glVertexAttribI4ui";

    beforeCommand(fnName, _api.glVertexAttribI4ui);
    _api.glVertexAttribI4ui(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttribI4uiv().
void GLAPI::vertexAttribI4UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttribI4uiv";

    beforeCommand(fnName, _api.glVertexAttribI4uiv);
    _api.glVertexAttribI4uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4usv().
void GLAPI::vertexAttribI4USV(GLuint index, const GLushort *v) const
{
    static const char *fnName = "glVertexAttribI4usv";

    beforeCommand(fnName, _api.glVertexAttribI4usv);
    _api.glVertexAttribI4usv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribIPointer().
void GLAPI::vertexAttribIPointer(GLuint index, GLint size,
                                 VertexAttribIType type, GLsizei stride,
                                 const void *pointer) const
{
    static const char *fnName = "glVertexAttribIPointer";

    beforeCommand(fnName, _api.glVertexAttribIPointer);
    _api.glVertexAttribIPointer(index, size, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glCopyBufferSubData().
void GLAPI::copyBufferSubData(CopyBufferSubDataTarget readTarget,
                              CopyBufferSubDataTarget writeTarget,
                              GLintptr readOffset, GLintptr writeOffset,
                              GLsizeiptr size) const
{
    static const char *fnName = "glCopyBufferSubData";

    beforeCommand(fnName, _api.glCopyBufferSubData);
    _api.glCopyBufferSubData(toScalar(readTarget), toScalar(writeTarget),
                             readOffset, writeOffset, size);
    afterCommand(fnName);
}

// Calls glDrawArraysInstanced().
void GLAPI::drawArraysInstanced(PrimitiveType mode, GLint first, GLsizei count,
                                GLsizei instancecount) const
{
    static const char *fnName = "glDrawArraysInstanced";

    beforeCommand(fnName, _api.glDrawArraysInstanced);
    _api.glDrawArraysInstanced(toScalar(mode), first, count, instancecount);
    afterCommand(fnName);
}

// Calls glDrawElementsInstanced().
void GLAPI::drawElementsInstanced(PrimitiveType mode, GLsizei count,
                                  DrawElementsType type, const void *indices,
                                  GLsizei instancecount) const
{
    static const char *fnName = "glDrawElementsInstanced";

    beforeCommand(fnName, _api.glDrawElementsInstanced);
    _api.glDrawElementsInstanced(toScalar(mode), count, toScalar(type), indices,
                                 instancecount);
    afterCommand(fnName);
}

// Calls glGetActiveUniformBlockName().
void GLAPI::getActiveUniformBlockName(ProgramName program,
                                      GLuint uniformBlockIndex, GLsizei bufSize,
                                      GLsizei *length, GLchar *uniformBlockName) const
{
    static const char *fnName = "glGetActiveUniformBlockName";

    beforeCommand(fnName, _api.glGetActiveUniformBlockName);
    _api.glGetActiveUniformBlockName(program.ID, uniformBlockIndex, bufSize,
                                     length, uniformBlockName);
    afterCommand(fnName);
}

// Calls glGetActiveUniformBlockiv().
void GLAPI::getActiveUniformBlockIV(ProgramName program,
                                    GLuint uniformBlockIndex,
                                    UniformBlockPName pname, GLint *params) const
{
    static const char *fnName = "glGetActiveUniformBlockiv";

    beforeCommand(fnName, _api.glGetActiveUniformBlockiv);
    _api.glGetActiveUniformBlockiv(program.ID, uniformBlockIndex,
                                   toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetActiveUniformName().
void GLAPI::getActiveUniformName(ProgramName program, GLuint uniformIndex,
                                 GLsizei bufSize, GLsizei *length,
                                 GLchar *uniformName) const
{
    static const char *fnName = "glGetActiveUniformName";

    beforeCommand(fnName, _api.glGetActiveUniformName);
    _api.glGetActiveUniformName(program.ID, uniformIndex, bufSize, length,
                                uniformName);
    afterCommand(fnName);
}

// Calls glGetActiveUniformsiv().
void GLAPI::getActiveUniformsIV(ProgramName program, GLsizei uniformCount,
                                const GLuint *uniformIndices, UniformPName pname,
                                GLint *params) const
{
    static const char *fnName = "glGetActiveUniformsiv";

    beforeCommand(fnName, _api.glGetActiveUniformsiv);
    _api.glGetActiveUniformsiv(program.ID, uniformCount, uniformIndices,
                               toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetUniformBlockIndex().
GLuint GLAPI::getUniformBlockIndex(ProgramName program,
                                   const GLchar *uniformBlockName) const
{
    static const char *fnName = "glGetUniformBlockIndex";

    beforeCommand(fnName, _api.glGetUniformBlockIndex);
    GLuint result = _api.glGetUniformBlockIndex(program.ID, uniformBlockName);
    afterCommand(fnName);

    return result;
}

// Calls glGetUniformIndices().
void GLAPI::getUniformIndices(ProgramName program, GLsizei uniformCount,
                              const GLchar *const*uniformNames,
                              GLuint *uniformIndices) const
{
    static const char *fnName = "glGetUniformIndices";

    beforeCommand(fnName, _api.glGetUniformIndices);
    _api.glGetUniformIndices(program.ID, uniformCount, uniformNames,
                             uniformIndices);
    afterCommand(fnName);
}

// Calls glPrimitiveRestartIndex().
void GLAPI::primitiveRestartIndex(GLuint index) const
{
    static const char *fnName = "glPrimitiveRestartIndex";

    beforeCommand(fnName, _api.glPrimitiveRestartIndex);
    _api.glPrimitiveRestartIndex(index);
    afterCommand(fnName);
}

// Calls glTexBuffer().
void GLAPI::texBuffer(TextureTarget target, SizedInternalFormat internalformat,
                      BufferName buffer) const
{
    static const char *fnName = "glTexBuffer";

    beforeCommand(fnName, _api.glTexBuffer);
    _api.glTexBuffer(toScalar(target), toScalar(internalformat), buffer.ID);
    afterCommand(fnName);
}

// Calls glUniformBlockBinding().
void GLAPI::uniformBlockBinding(ProgramName program, GLuint uniformBlockIndex,
                                GLuint uniformBlockBinding) const
{
    static const char *fnName = "glUniformBlockBinding";

    beforeCommand(fnName, _api.glUniformBlockBinding);
    _api.glUniformBlockBinding(program.ID, uniformBlockIndex,
                               uniformBlockBinding);
    afterCommand(fnName);
}

// Calls glClientWaitSync().
SyncStatus GLAPI::clientWaitSync(SyncName sync,
                                 GLbitfield  /* SyncObjectMask */ flags,
                                 GLuint64 timeout) const
{
    static const char *fnName = "glClientWaitSync";

    beforeCommand(fnName, _api.glClientWaitSync);
    GLenum result = _api.glClientWaitSync(sync.ID, flags, timeout);
    afterCommand(fnName);

    return static_cast<SyncStatus>(result);
}

// Calls glDeleteSync().
void GLAPI::deleteSync(SyncName sync) const
{
    static const char *fnName = "glDeleteSync";

    beforeCommand(fnName, _api.glDeleteSync);
    _api.glDeleteSync(sync.ID);
    afterCommand(fnName);
}

// Calls glDrawElementsBaseVertex().
void GLAPI::drawElementsBaseVertex(PrimitiveType mode, GLsizei count,
                                   DrawElementsType type, const void *indices,
                                   GLint basevertex) const
{
    static const char *fnName = "glDrawElementsBaseVertex";

    beforeCommand(fnName, _api.glDrawElementsBaseVertex);
    _api.glDrawElementsBaseVertex(toScalar(mode), count, toScalar(type), indices,
                                  basevertex);
    afterCommand(fnName);
}

// Calls glDrawElementsInstancedBaseVertex().
void GLAPI::drawElementsInstancedBaseVertex(PrimitiveType mode, GLsizei count,
                                            DrawElementsType type,
                                            const void *indices,
                                            GLsizei instancecount,
                                            GLint basevertex) const
{
    static const char *fnName = "glDrawElementsInstancedBaseVertex";

    beforeCommand(fnName, _api.glDrawElementsInstancedBaseVertex);
    _api.glDrawElementsInstancedBaseVertex(toScalar(mode), count, toScalar(type),
                                           indices, instancecount, basevertex);
    afterCommand(fnName);
}

// Calls glDrawRangeElementsBaseVertex().
void GLAPI::drawRangeElementsBaseVertex(PrimitiveType mode, GLuint start,
                                        GLuint end, GLsizei count,
                                        DrawElementsType type,
                                        const void *indices, GLint basevertex) const
{
    static const char *fnName = "glDrawRangeElementsBaseVertex";

    beforeCommand(fnName, _api.glDrawRangeElementsBaseVertex);
    _api.glDrawRangeElementsBaseVertex(toScalar(mode), start, end, count,
                                       toScalar(type), indices, basevertex);
    afterCommand(fnName);
}

// Calls glFenceSync().
SyncName GLAPI::fenceSync(SyncCondition condition, SyncBehaviorFlags flags) const
{
    static const char *fnName = "glFenceSync";

    beforeCommand(fnName, _api.glFenceSync);
    GLsync result = _api.glFenceSync(toScalar(condition), toScalar(flags));
    afterCommand(fnName);

    return SyncName(result);
}

// Calls glFramebufferTexture().
void GLAPI::framebufferTexture(FramebufferTarget target,
                               FramebufferAttachment attachment,
                               TextureName texture, GLint level) const
{
    static const char *fnName = "glFramebufferTexture";

    beforeCommand(fnName, _api.glFramebufferTexture);
    _api.glFramebufferTexture(toScalar(target), toScalar(attachment), texture.ID,
                              level);
    afterCommand(fnName);
}

// Calls glGetBufferParameteri64v().
void GLAPI::getBufferParameterI64V(BufferTarget target, BufferPNameARB pname,
                                   GLint64 *params) const
{
    static const char *fnName = "glGetBufferParameteri64v";

    beforeCommand(fnName, _api.glGetBufferParameteri64v);
    _api.glGetBufferParameteri64v(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetInteger64i_v().
void GLAPI::getInteger64IV(GetPName target, GLuint index, GLint64 *data) const
{
    static const char *fnName = "glGetInteger64i_v";

    beforeCommand(fnName, _api.glGetInteger64i_v);
    _api.glGetInteger64i_v(toScalar(target), index, data);
    afterCommand(fnName);
}

// Calls glGetInteger64v().
void GLAPI::getInteger64V(GetPName pname, GLint64 *data) const
{
    static const char *fnName = "glGetInteger64v";

    beforeCommand(fnName, _api.glGetInteger64v);
    _api.glGetInteger64v(toScalar(pname), data);
    afterCommand(fnName);
}

// Calls glGetMultisamplefv().
void GLAPI::getMultisampleFV(GetMultisamplePNameNV pname, GLuint index,
                             GLfloat *val) const
{
    static const char *fnName = "glGetMultisamplefv";

    beforeCommand(fnName, _api.glGetMultisamplefv);
    _api.glGetMultisamplefv(toScalar(pname), index, val);
    afterCommand(fnName);
}

// Calls glGetSynciv().
void GLAPI::getSyncIV(SyncName sync, SyncParameterName pname, GLsizei count,
                      GLsizei *length, GLint *values) const
{
    static const char *fnName = "glGetSynciv";

    beforeCommand(fnName, _api.glGetSynciv);
    _api.glGetSynciv(sync.ID, toScalar(pname), count, length, values);
    afterCommand(fnName);
}

// Calls glIsSync().
Boolean GLAPI::isSync(SyncName sync) const
{
    static const char *fnName = "glIsSync";

    beforeCommand(fnName, _api.glIsSync);
    GLboolean result = _api.glIsSync(sync.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMultiDrawElementsBaseVertex().
void GLAPI::multiDrawElementsBaseVertex(PrimitiveType mode, const GLsizei *count,
                                        DrawElementsType type,
                                        const void *const*indices,
                                        GLsizei drawcount,
                                        const GLint *basevertex) const
{
    static const char *fnName = "glMultiDrawElementsBaseVertex";

    beforeCommand(fnName, _api.glMultiDrawElementsBaseVertex);
    _api.glMultiDrawElementsBaseVertex(toScalar(mode), count, toScalar(type),
                                       indices, drawcount, basevertex);
    afterCommand(fnName);
}

// Calls glProvokingVertex().
void GLAPI::provokingVertex(VertexProvokingMode mode) const
{
    static const char *fnName = "glProvokingVertex";

    beforeCommand(fnName, _api.glProvokingVertex);
    _api.glProvokingVertex(toScalar(mode));
    afterCommand(fnName);
}

// Calls glSampleMaski().
void GLAPI::sampleMaskI(GLuint maskNumber, GLbitfield mask) const
{
    static const char *fnName = "glSampleMaski";

    beforeCommand(fnName, _api.glSampleMaski);
    _api.glSampleMaski(maskNumber, mask);
    afterCommand(fnName);
}

// Calls glTexImage2DMultisample().
void GLAPI::texImage2DMultisample(TextureTarget target, GLsizei samples,
                                  InternalFormat internalformat, GLsizei width,
                                  GLsizei height, Boolean fixedsamplelocations) const
{
    static const char *fnName = "glTexImage2DMultisample";

    beforeCommand(fnName, _api.glTexImage2DMultisample);
    _api.glTexImage2DMultisample(toScalar(target), samples,
                                 toScalar(internalformat), width, height,
                                 toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

// Calls glTexImage3DMultisample().
void GLAPI::texImage3DMultisample(TextureTarget target, GLsizei samples,
                                  InternalFormat internalformat, GLsizei width,
                                  GLsizei height, GLsizei depth,
                                  Boolean fixedsamplelocations) const
{
    static const char *fnName = "glTexImage3DMultisample";

    beforeCommand(fnName, _api.glTexImage3DMultisample);
    _api.glTexImage3DMultisample(toScalar(target), samples,
                                 toScalar(internalformat), width, height, depth,
                                 toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

// Calls glWaitSync().
void GLAPI::waitSync(SyncName sync, SyncBehaviorFlags flags, GLuint64 timeout) const
{
    static const char *fnName = "glWaitSync";

    beforeCommand(fnName, _api.glWaitSync);
    _api.glWaitSync(sync.ID, toScalar(flags), timeout);
    afterCommand(fnName);
}

// Calls glBindFragDataLocationIndexed().
void GLAPI::bindFragDataLocationIndexed(ProgramName program, GLuint colorNumber,
                                        GLuint index, const GLchar *name) const
{
    static const char *fnName = "glBindFragDataLocationIndexed";

    beforeCommand(fnName, _api.glBindFragDataLocationIndexed);
    _api.glBindFragDataLocationIndexed(program.ID, colorNumber, index, name);
    afterCommand(fnName);
}

// Calls glBindSampler().
void GLAPI::bindSampler(GLuint unit, SamplerName sampler) const
{
    static const char *fnName = "glBindSampler";

    beforeCommand(fnName, _api.glBindSampler);
    _api.glBindSampler(unit, sampler.ID);
    afterCommand(fnName);
}

// Calls glDeleteSamplers().
void GLAPI::deleteSamplers(GLsizei count, const SamplerName *samplers) const
{
    static const char *fnName = "glDeleteSamplers";

    beforeCommand(fnName, _api.glDeleteSamplers);
    _api.glDeleteSamplers(count, reinterpret_cast<const GLuint *>(samplers));
    afterCommand(fnName);
}

// Calls glGenSamplers().
void GLAPI::genSamplers(GLsizei count, SamplerName *samplers) const
{
    static const char *fnName = "glGenSamplers";

    beforeCommand(fnName, _api.glGenSamplers);
    _api.glGenSamplers(count, reinterpret_cast<GLuint *>(samplers));
    afterCommand(fnName);
}

// Calls glGetFragDataIndex().
GLint GLAPI::getFragDataIndex(ProgramName program, const GLchar *name) const
{
    static const char *fnName = "glGetFragDataIndex";

    beforeCommand(fnName, _api.glGetFragDataIndex);
    GLint result = _api.glGetFragDataIndex(program.ID, name);
    afterCommand(fnName);

    return result;
}

// Calls glGetQueryObjecti64v().
void GLAPI::getQueryObjectI64V(QueryName id, QueryObjectParameterName pname,
                               GLint64 *params) const
{
    static const char *fnName = "glGetQueryObjecti64v";

    beforeCommand(fnName, _api.glGetQueryObjecti64v);
    _api.glGetQueryObjecti64v(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetQueryObjectui64v().
void GLAPI::getQueryObjectUI64(QueryName id, QueryObjectParameterName pname,
                               GLuint64 *params) const
{
    static const char *fnName = "glGetQueryObjectui64v";

    beforeCommand(fnName, _api.glGetQueryObjectui64v);
    _api.glGetQueryObjectui64v(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetSamplerParameterIiv().
void GLAPI::getSamplerParameterIIV(SamplerName sampler, SamplerParameterI pname,
                                   GLint *params) const
{
    static const char *fnName = "glGetSamplerParameterIiv";

    beforeCommand(fnName, _api.glGetSamplerParameterIiv);
    _api.glGetSamplerParameterIiv(sampler.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetSamplerParameterIuiv().
void GLAPI::getSamplerParameterIUIV(SamplerName sampler, SamplerParameterI pname,
                                    GLuint *params) const
{
    static const char *fnName = "glGetSamplerParameterIuiv";

    beforeCommand(fnName, _api.glGetSamplerParameterIuiv);
    _api.glGetSamplerParameterIuiv(sampler.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetSamplerParameterfv().
void GLAPI::getSamplerParameterFV(SamplerName sampler, SamplerParameterF pname,
                                  GLfloat *params) const
{
    static const char *fnName = "glGetSamplerParameterfv";

    beforeCommand(fnName, _api.glGetSamplerParameterfv);
    _api.glGetSamplerParameterfv(sampler.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetSamplerParameteriv().
void GLAPI::getSamplerParameterIV(SamplerName sampler, SamplerParameterI pname,
                                  GLint *params) const
{
    static const char *fnName = "glGetSamplerParameteriv";

    beforeCommand(fnName, _api.glGetSamplerParameteriv);
    _api.glGetSamplerParameteriv(sampler.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsSampler().
Boolean GLAPI::isSampler(SamplerName sampler) const
{
    static const char *fnName = "glIsSampler";

    beforeCommand(fnName, _api.glIsSampler);
    GLboolean result = _api.glIsSampler(sampler.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glQueryCounter().
void GLAPI::queryCounter(QueryName id, QueryCounterTarget target) const
{
    static const char *fnName = "glQueryCounter";

    beforeCommand(fnName, _api.glQueryCounter);
    _api.glQueryCounter(id.ID, toScalar(target));
    afterCommand(fnName);
}

// Calls glSamplerParameterIiv().
void GLAPI::samplerParameterIIV(SamplerName sampler, SamplerParameterI pname,
                                const GLint *param) const
{
    static const char *fnName = "glSamplerParameterIiv";

    beforeCommand(fnName, _api.glSamplerParameterIiv);
    _api.glSamplerParameterIiv(sampler.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glSamplerParameterIuiv().
void GLAPI::samplerParameterIUIV(SamplerName sampler, SamplerParameterI pname,
                                 const GLuint *param) const
{
    static const char *fnName = "glSamplerParameterIuiv";

    beforeCommand(fnName, _api.glSamplerParameterIuiv);
    _api.glSamplerParameterIuiv(sampler.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glSamplerParameterf().
void GLAPI::samplerParameterF(SamplerName sampler, SamplerParameterF pname,
                              GLfloat param) const
{
    static const char *fnName = "glSamplerParameterf";

    beforeCommand(fnName, _api.glSamplerParameterf);
    _api.glSamplerParameterf(sampler.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glSamplerParameterfv().
void GLAPI::samplerParameterFV(SamplerName sampler, SamplerParameterF pname,
                               const GLfloat *param) const
{
    static const char *fnName = "glSamplerParameterfv";

    beforeCommand(fnName, _api.glSamplerParameterfv);
    _api.glSamplerParameterfv(sampler.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glSamplerParameteri().
void GLAPI::samplerParameterI(SamplerName sampler, SamplerParameterI pname,
                              GLint param) const
{
    static const char *fnName = "glSamplerParameteri";

    beforeCommand(fnName, _api.glSamplerParameteri);
    _api.glSamplerParameteri(sampler.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glSamplerParameteriv().
void GLAPI::samplerParameterIV(SamplerName sampler, SamplerParameterI pname,
                               const GLint *param) const
{
    static const char *fnName = "glSamplerParameteriv";

    beforeCommand(fnName, _api.glSamplerParameteriv);
    _api.glSamplerParameteriv(sampler.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glVertexAttribDivisor().
void GLAPI::vertexAttribDivisor(GLuint index, GLuint divisor) const
{
    static const char *fnName = "glVertexAttribDivisor";

    beforeCommand(fnName, _api.glVertexAttribDivisor);
    _api.glVertexAttribDivisor(index, divisor);
    afterCommand(fnName);
}

// Calls glVertexAttribP1ui().
void GLAPI::vertexAttribP1UI(GLuint index, VertexAttribPointerType type,
                             Boolean normalized, GLuint value) const
{
    static const char *fnName = "glVertexAttribP1ui";

    beforeCommand(fnName, _api.glVertexAttribP1ui);
    _api.glVertexAttribP1ui(index, toScalar(type), toScalar(normalized), value);
    afterCommand(fnName);
}

// Calls glVertexAttribP1uiv().
void GLAPI::vertexAttribP1UIV(GLuint index, VertexAttribPointerType type,
                              Boolean normalized, const GLuint *value) const
{
    static const char *fnName = "glVertexAttribP1uiv";

    beforeCommand(fnName, _api.glVertexAttribP1uiv);
    _api.glVertexAttribP1uiv(index, toScalar(type), toScalar(normalized), value);
    afterCommand(fnName);
}

// Calls glVertexAttribP2ui().
void GLAPI::vertexAttribP2UI(GLuint index, VertexAttribPointerType type,
                             Boolean normalized, GLuint value) const
{
    static const char *fnName = "glVertexAttribP2ui";

    beforeCommand(fnName, _api.glVertexAttribP2ui);
    _api.glVertexAttribP2ui(index, toScalar(type), toScalar(normalized), value);
    afterCommand(fnName);
}

// Calls glVertexAttribP2uiv().
void GLAPI::vertexAttribP2UIV(GLuint index, VertexAttribPointerType type,
                              Boolean normalized, const GLuint *value) const
{
    static const char *fnName = "glVertexAttribP2uiv";

    beforeCommand(fnName, _api.glVertexAttribP2uiv);
    _api.glVertexAttribP2uiv(index, toScalar(type), toScalar(normalized), value);
    afterCommand(fnName);
}

// Calls glVertexAttribP3ui().
void GLAPI::vertexAttribP3UI(GLuint index, VertexAttribPointerType type,
                             Boolean normalized, GLuint value) const
{
    static const char *fnName = "glVertexAttribP3ui";

    beforeCommand(fnName, _api.glVertexAttribP3ui);
    _api.glVertexAttribP3ui(index, toScalar(type), toScalar(normalized), value);
    afterCommand(fnName);
}

// Calls glVertexAttribP3uiv().
void GLAPI::vertexAttribP3UIV(GLuint index, VertexAttribPointerType type,
                              Boolean normalized, const GLuint *value) const
{
    static const char *fnName = "glVertexAttribP3uiv";

    beforeCommand(fnName, _api.glVertexAttribP3uiv);
    _api.glVertexAttribP3uiv(index, toScalar(type), toScalar(normalized), value);
    afterCommand(fnName);
}

// Calls glVertexAttribP4ui().
void GLAPI::vertexAttribP4UI(GLuint index, VertexAttribPointerType type,
                             Boolean normalized, GLuint value) const
{
    static const char *fnName = "glVertexAttribP4ui";

    beforeCommand(fnName, _api.glVertexAttribP4ui);
    _api.glVertexAttribP4ui(index, toScalar(type), toScalar(normalized), value);
    afterCommand(fnName);
}

// Calls glVertexAttribP4uiv().
void GLAPI::vertexAttribP4UIV(GLuint index, VertexAttribPointerType type,
                              Boolean normalized, const GLuint *value) const
{
    static const char *fnName = "glVertexAttribP4uiv";

    beforeCommand(fnName, _api.glVertexAttribP4uiv);
    _api.glVertexAttribP4uiv(index, toScalar(type), toScalar(normalized), value);
    afterCommand(fnName);
}

// Calls glBeginQueryIndexed().
void GLAPI::beginQueryIndexed(QueryTarget target, GLuint index, QueryName id) const
{
    static const char *fnName = "glBeginQueryIndexed";

    beforeCommand(fnName, _api.glBeginQueryIndexed);
    _api.glBeginQueryIndexed(toScalar(target), index, id.ID);
    afterCommand(fnName);
}

// Calls glBindTransformFeedback().
void GLAPI::bindTransformFeedback(BindTransformFeedbackTarget target,
                                  TransformFeedbackName id) const
{
    static const char *fnName = "glBindTransformFeedback";

    beforeCommand(fnName, _api.glBindTransformFeedback);
    _api.glBindTransformFeedback(toScalar(target), id.ID);
    afterCommand(fnName);
}

// Calls glBlendEquationSeparatei().
void GLAPI::blendEquationSeparateI(GLuint buf, BlendEquationModeEXT modeRGB,
                                   BlendEquationModeEXT modeAlpha) const
{
    static const char *fnName = "glBlendEquationSeparatei";

    beforeCommand(fnName, _api.glBlendEquationSeparatei);
    _api.glBlendEquationSeparatei(buf, toScalar(modeRGB), toScalar(modeAlpha));
    afterCommand(fnName);
}

// Calls glBlendEquationi().
void GLAPI::blendEquationI(GLuint buf, BlendEquationModeEXT mode) const
{
    static const char *fnName = "glBlendEquationi";

    beforeCommand(fnName, _api.glBlendEquationi);
    _api.glBlendEquationi(buf, toScalar(mode));
    afterCommand(fnName);
}

// Calls glBlendFuncSeparatei().
void GLAPI::blendFuncSeparateI(GLuint buf, BlendingFactor srcRGB,
                               BlendingFactor dstRGB, BlendingFactor srcAlpha,
                               BlendingFactor dstAlpha) const
{
    static const char *fnName = "glBlendFuncSeparatei";

    beforeCommand(fnName, _api.glBlendFuncSeparatei);
    _api.glBlendFuncSeparatei(buf, toScalar(srcRGB), toScalar(dstRGB),
                              toScalar(srcAlpha), toScalar(dstAlpha));
    afterCommand(fnName);
}

// Calls glBlendFunci().
void GLAPI::blendFuncI(GLuint buf, BlendingFactor src, BlendingFactor dst) const
{
    static const char *fnName = "glBlendFunci";

    beforeCommand(fnName, _api.glBlendFunci);
    _api.glBlendFunci(buf, toScalar(src), toScalar(dst));
    afterCommand(fnName);
}

// Calls glDeleteTransformFeedbacks().
void GLAPI::deleteTransformFeedbacks(GLsizei n, const TransformFeedbackName *ids) const
{
    static const char *fnName = "glDeleteTransformFeedbacks";

    beforeCommand(fnName, _api.glDeleteTransformFeedbacks);
    _api.glDeleteTransformFeedbacks(n, reinterpret_cast<const GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glDrawArraysIndirect().
void GLAPI::drawArraysIndirect(PrimitiveType mode, const void *indirect) const
{
    static const char *fnName = "glDrawArraysIndirect";

    beforeCommand(fnName, _api.glDrawArraysIndirect);
    _api.glDrawArraysIndirect(toScalar(mode), indirect);
    afterCommand(fnName);
}

// Calls glDrawElementsIndirect().
void GLAPI::drawElementsIndirect(PrimitiveType mode, DrawElementsType type,
                                 const void *indirect) const
{
    static const char *fnName = "glDrawElementsIndirect";

    beforeCommand(fnName, _api.glDrawElementsIndirect);
    _api.glDrawElementsIndirect(toScalar(mode), toScalar(type), indirect);
    afterCommand(fnName);
}

// Calls glDrawTransformFeedback().
void GLAPI::drawTransformFeedback(PrimitiveType mode, TransformFeedbackName id) const
{
    static const char *fnName = "glDrawTransformFeedback";

    beforeCommand(fnName, _api.glDrawTransformFeedback);
    _api.glDrawTransformFeedback(toScalar(mode), id.ID);
    afterCommand(fnName);
}

// Calls glDrawTransformFeedbackStream().
void GLAPI::drawTransformFeedbackStream(PrimitiveType mode,
                                        TransformFeedbackName id, GLuint stream) const
{
    static const char *fnName = "glDrawTransformFeedbackStream";

    beforeCommand(fnName, _api.glDrawTransformFeedbackStream);
    _api.glDrawTransformFeedbackStream(toScalar(mode), id.ID, stream);
    afterCommand(fnName);
}

// Calls glEndQueryIndexed().
void GLAPI::endQueryIndexed(QueryTarget target, GLuint index) const
{
    static const char *fnName = "glEndQueryIndexed";

    beforeCommand(fnName, _api.glEndQueryIndexed);
    _api.glEndQueryIndexed(toScalar(target), index);
    afterCommand(fnName);
}

// Calls glGenTransformFeedbacks().
void GLAPI::genTransformFeedbacks(GLsizei n, TransformFeedbackName *ids) const
{
    static const char *fnName = "glGenTransformFeedbacks";

    beforeCommand(fnName, _api.glGenTransformFeedbacks);
    _api.glGenTransformFeedbacks(n, reinterpret_cast<GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glGetActiveSubroutineName().
void GLAPI::getActiveSubroutineName(ProgramName program, ShaderType shadertype,
                                    GLuint index, GLsizei bufSize,
                                    GLsizei *length, GLchar *name) const
{
    static const char *fnName = "glGetActiveSubroutineName";

    beforeCommand(fnName, _api.glGetActiveSubroutineName);
    _api.glGetActiveSubroutineName(program.ID, toScalar(shadertype), index,
                                   bufSize, length, name);
    afterCommand(fnName);
}

// Calls glGetActiveSubroutineUniformName().
void GLAPI::getActiveSubroutineUniformName(ProgramName program,
                                           ShaderType shadertype, GLuint index,
                                           GLsizei bufSize, GLsizei *length,
                                           GLchar *name) const
{
    static const char *fnName = "glGetActiveSubroutineUniformName";

    beforeCommand(fnName, _api.glGetActiveSubroutineUniformName);
    _api.glGetActiveSubroutineUniformName(program.ID, toScalar(shadertype),
                                          index, bufSize, length, name);
    afterCommand(fnName);
}

// Calls glGetActiveSubroutineUniformiv().
void GLAPI::getActiveSubroutineUniformIV(ProgramName program,
                                         ShaderType shadertype, GLuint index,
                                         SubroutineParameterName pname,
                                         GLint *values) const
{
    static const char *fnName = "glGetActiveSubroutineUniformiv";

    beforeCommand(fnName, _api.glGetActiveSubroutineUniformiv);
    _api.glGetActiveSubroutineUniformiv(program.ID, toScalar(shadertype), index,
                                        toScalar(pname), values);
    afterCommand(fnName);
}

// Calls glGetProgramStageiv().
void GLAPI::getProgramStageIV(ProgramName program, ShaderType shadertype,
                              ProgramStagePName pname, GLint *values) const
{
    static const char *fnName = "glGetProgramStageiv";

    beforeCommand(fnName, _api.glGetProgramStageiv);
    _api.glGetProgramStageiv(program.ID, toScalar(shadertype), toScalar(pname),
                             values);
    afterCommand(fnName);
}

// Calls glGetQueryIndexediv().
void GLAPI::getQueryIndexedIV(QueryTarget target, GLuint index,
                              QueryParameterName pname, GLint *params) const
{
    static const char *fnName = "glGetQueryIndexediv";

    beforeCommand(fnName, _api.glGetQueryIndexediv);
    _api.glGetQueryIndexediv(toScalar(target), index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetSubroutineIndex().
GLuint GLAPI::getSubroutineIndex(ProgramName program, ShaderType shadertype,
                                 const GLchar *name) const
{
    static const char *fnName = "glGetSubroutineIndex";

    beforeCommand(fnName, _api.glGetSubroutineIndex);
    GLuint result = _api.glGetSubroutineIndex(program.ID, toScalar(shadertype),
                                              name);
    afterCommand(fnName);

    return result;
}

// Calls glGetSubroutineUniformLocation().
GLint GLAPI::getSubroutineUniformLocation(ProgramName program,
                                          ShaderType shadertype,
                                          const GLchar *name) const
{
    static const char *fnName = "glGetSubroutineUniformLocation";

    beforeCommand(fnName, _api.glGetSubroutineUniformLocation);
    GLint result = _api.glGetSubroutineUniformLocation(program.ID,
                                                       toScalar(shadertype),
                                                       name);
    afterCommand(fnName);

    return result;
}

// Calls glGetUniformSubroutineuiv().
void GLAPI::getUniformSubroutineUIV(ShaderType shadertype, GLint location,
                                    GLuint *params) const
{
    static const char *fnName = "glGetUniformSubroutineuiv";

    beforeCommand(fnName, _api.glGetUniformSubroutineuiv);
    _api.glGetUniformSubroutineuiv(toScalar(shadertype), location, params);
    afterCommand(fnName);
}

// Calls glGetUniformdv().
void GLAPI::getUniformDV(ProgramName program, GLint location, GLdouble *params) const
{
    static const char *fnName = "glGetUniformdv";

    beforeCommand(fnName, _api.glGetUniformdv);
    _api.glGetUniformdv(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glIsTransformFeedback().
Boolean GLAPI::isTransformFeedback(TransformFeedbackName id) const
{
    static const char *fnName = "glIsTransformFeedback";

    beforeCommand(fnName, _api.glIsTransformFeedback);
    GLboolean result = _api.glIsTransformFeedback(id.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMinSampleShading().
void GLAPI::minSampleShading(GLfloat value) const
{
    static const char *fnName = "glMinSampleShading";

    beforeCommand(fnName, _api.glMinSampleShading);
    _api.glMinSampleShading(value);
    afterCommand(fnName);
}

// Calls glPatchParameterfv().
void GLAPI::patchParameterFV(PatchParameterName pname, const GLfloat *values) const
{
    static const char *fnName = "glPatchParameterfv";

    beforeCommand(fnName, _api.glPatchParameterfv);
    _api.glPatchParameterfv(toScalar(pname), values);
    afterCommand(fnName);
}

// Calls glPatchParameteri().
void GLAPI::patchParameterI(PatchParameterName pname, GLint value) const
{
    static const char *fnName = "glPatchParameteri";

    beforeCommand(fnName, _api.glPatchParameteri);
    _api.glPatchParameteri(toScalar(pname), value);
    afterCommand(fnName);
}

// Calls glPauseTransformFeedback().
void GLAPI::pauseTransformFeedback() const
{
    static const char *fnName = "glPauseTransformFeedback";

    beforeCommand(fnName, _api.glPauseTransformFeedback);
    _api.glPauseTransformFeedback();
    afterCommand(fnName);
}

// Calls glResumeTransformFeedback().
void GLAPI::resumeTransformFeedback() const
{
    static const char *fnName = "glResumeTransformFeedback";

    beforeCommand(fnName, _api.glResumeTransformFeedback);
    _api.glResumeTransformFeedback();
    afterCommand(fnName);
}

// Calls glUniform1d().
void GLAPI::uniform1D(GLint location, GLdouble x) const
{
    static const char *fnName = "glUniform1d";

    beforeCommand(fnName, _api.glUniform1d);
    _api.glUniform1d(location, x);
    afterCommand(fnName);
}

// Calls glUniform1dv().
void GLAPI::uniform1DV(GLint location, GLsizei count, const GLdouble *value) const
{
    static const char *fnName = "glUniform1dv";

    beforeCommand(fnName, _api.glUniform1dv);
    _api.glUniform1dv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2d().
void GLAPI::uniform2D(GLint location, GLdouble x, GLdouble y) const
{
    static const char *fnName = "glUniform2d";

    beforeCommand(fnName, _api.glUniform2d);
    _api.glUniform2d(location, x, y);
    afterCommand(fnName);
}

// Calls glUniform2dv().
void GLAPI::uniform2DV(GLint location, GLsizei count, const GLdouble *value) const
{
    static const char *fnName = "glUniform2dv";

    beforeCommand(fnName, _api.glUniform2dv);
    _api.glUniform2dv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3d().
void GLAPI::uniform3D(GLint location, GLdouble x, GLdouble y, GLdouble z) const
{
    static const char *fnName = "glUniform3d";

    beforeCommand(fnName, _api.glUniform3d);
    _api.glUniform3d(location, x, y, z);
    afterCommand(fnName);
}

// Calls glUniform3dv().
void GLAPI::uniform3DV(GLint location, GLsizei count, const GLdouble *value) const
{
    static const char *fnName = "glUniform3dv";

    beforeCommand(fnName, _api.glUniform3dv);
    _api.glUniform3dv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4d().
void GLAPI::uniform4D(GLint location, GLdouble x, GLdouble y, GLdouble z,
                      GLdouble w) const
{
    static const char *fnName = "glUniform4d";

    beforeCommand(fnName, _api.glUniform4d);
    _api.glUniform4d(location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glUniform4dv().
void GLAPI::uniform4DV(GLint location, GLsizei count, const GLdouble *value) const
{
    static const char *fnName = "glUniform4dv";

    beforeCommand(fnName, _api.glUniform4dv);
    _api.glUniform4dv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniformMatrix2dv().
void GLAPI::uniformMatrix2DV(GLint location, GLsizei count, Boolean transpose,
                             const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix2dv";

    beforeCommand(fnName, _api.glUniformMatrix2dv);
    _api.glUniformMatrix2dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix2x3dv().
void GLAPI::uniformMatrix2x3DV(GLint location, GLsizei count, Boolean transpose,
                               const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix2x3dv";

    beforeCommand(fnName, _api.glUniformMatrix2x3dv);
    _api.glUniformMatrix2x3dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix2x4dv().
void GLAPI::uniformMatrix2x4DV(GLint location, GLsizei count, Boolean transpose,
                               const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix2x4dv";

    beforeCommand(fnName, _api.glUniformMatrix2x4dv);
    _api.glUniformMatrix2x4dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix3dv().
void GLAPI::uniformMatrix3DV(GLint location, GLsizei count, Boolean transpose,
                             const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix3dv";

    beforeCommand(fnName, _api.glUniformMatrix3dv);
    _api.glUniformMatrix3dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix3x2dv().
void GLAPI::uniformMatrix3x2DV(GLint location, GLsizei count, Boolean transpose,
                               const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix3x2dv";

    beforeCommand(fnName, _api.glUniformMatrix3x2dv);
    _api.glUniformMatrix3x2dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix3x4dv().
void GLAPI::uniformMatrix3x4DV(GLint location, GLsizei count, Boolean transpose,
                               const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix3x4dv";

    beforeCommand(fnName, _api.glUniformMatrix3x4dv);
    _api.glUniformMatrix3x4dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix4dv().
void GLAPI::uniformMatrix4DV(GLint location, GLsizei count, Boolean transpose,
                             const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix4dv";

    beforeCommand(fnName, _api.glUniformMatrix4dv);
    _api.glUniformMatrix4dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix4x2dv().
void GLAPI::uniformMatrix4x2DV(GLint location, GLsizei count, Boolean transpose,
                               const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix4x2dv";

    beforeCommand(fnName, _api.glUniformMatrix4x2dv);
    _api.glUniformMatrix4x2dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix4x3dv().
void GLAPI::uniformMatrix4x3DV(GLint location, GLsizei count, Boolean transpose,
                               const GLdouble *value) const
{
    static const char *fnName = "glUniformMatrix4x3dv";

    beforeCommand(fnName, _api.glUniformMatrix4x3dv);
    _api.glUniformMatrix4x3dv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformSubroutinesuiv().
void GLAPI::uniformSubroutinesUIV(ShaderType shadertype, GLsizei count,
                                  const GLuint *indices) const
{
    static const char *fnName = "glUniformSubroutinesuiv";

    beforeCommand(fnName, _api.glUniformSubroutinesuiv);
    _api.glUniformSubroutinesuiv(toScalar(shadertype), count, indices);
    afterCommand(fnName);
}

// Calls glActiveShaderProgram().
void GLAPI::activeShaderProgram(ProgramPipelineName pipeline,
                                ProgramName program) const
{
    static const char *fnName = "glActiveShaderProgram";

    beforeCommand(fnName, _api.glActiveShaderProgram);
    _api.glActiveShaderProgram(pipeline.ID, program.ID);
    afterCommand(fnName);
}

// Calls glBindProgramPipeline().
void GLAPI::bindProgramPipeline(ProgramPipelineName pipeline) const
{
    static const char *fnName = "glBindProgramPipeline";

    beforeCommand(fnName, _api.glBindProgramPipeline);
    _api.glBindProgramPipeline(pipeline.ID);
    afterCommand(fnName);
}

// Calls glClearDepthf().
void GLAPI::clearDepthF(GLfloat d) const
{
    static const char *fnName = "glClearDepthf";

    beforeCommand(fnName, _api.glClearDepthf);
    _api.glClearDepthf(d);
    afterCommand(fnName);
}

// Calls glCreateShaderProgramv().
ProgramName GLAPI::createShaderProgramV(ShaderType type, GLsizei count,
                                        const GLchar *const*strings) const
{
    static const char *fnName = "glCreateShaderProgramv";

    beforeCommand(fnName, _api.glCreateShaderProgramv);
    GLuint result = _api.glCreateShaderProgramv(toScalar(type), count, strings);
    afterCommand(fnName);

    return ProgramName(result);
}

// Calls glDeleteProgramPipelines().
void GLAPI::deleteProgramPipelines(GLsizei n,
                                   const ProgramPipelineName *pipelines) const
{
    static const char *fnName = "glDeleteProgramPipelines";

    beforeCommand(fnName, _api.glDeleteProgramPipelines);
    _api.glDeleteProgramPipelines(n, reinterpret_cast<const GLuint *>(pipelines));
    afterCommand(fnName);
}

// Calls glDepthRangeArrayv().
void GLAPI::depthRangeArrayV(GLuint first, GLsizei count, const GLdouble *v) const
{
    static const char *fnName = "glDepthRangeArrayv";

    beforeCommand(fnName, _api.glDepthRangeArrayv);
    _api.glDepthRangeArrayv(first, count, v);
    afterCommand(fnName);
}

// Calls glDepthRangeIndexed().
void GLAPI::depthRangeIndexed(GLuint index, GLdouble n, GLdouble f) const
{
    static const char *fnName = "glDepthRangeIndexed";

    beforeCommand(fnName, _api.glDepthRangeIndexed);
    _api.glDepthRangeIndexed(index, n, f);
    afterCommand(fnName);
}

// Calls glDepthRangef().
void GLAPI::depthRangeF(GLfloat n, GLfloat f) const
{
    static const char *fnName = "glDepthRangef";

    beforeCommand(fnName, _api.glDepthRangef);
    _api.glDepthRangef(n, f);
    afterCommand(fnName);
}

// Calls glGenProgramPipelines().
void GLAPI::genProgramPipelines(GLsizei n, ProgramPipelineName *pipelines) const
{
    static const char *fnName = "glGenProgramPipelines";

    beforeCommand(fnName, _api.glGenProgramPipelines);
    _api.glGenProgramPipelines(n, reinterpret_cast<GLuint *>(pipelines));
    afterCommand(fnName);
}

// Calls glGetDoublei_v().
void GLAPI::getDoubleIV(GetPName target, GLuint index, GLdouble *data) const
{
    static const char *fnName = "glGetDoublei_v";

    beforeCommand(fnName, _api.glGetDoublei_v);
    _api.glGetDoublei_v(toScalar(target), index, data);
    afterCommand(fnName);
}

// Calls glGetFloati_v().
void GLAPI::getFloatIV(GetPName target, GLuint index, GLfloat *data) const
{
    static const char *fnName = "glGetFloati_v";

    beforeCommand(fnName, _api.glGetFloati_v);
    _api.glGetFloati_v(toScalar(target), index, data);
    afterCommand(fnName);
}

// Calls glGetProgramBinary().
void GLAPI::getProgramBinary(ProgramName program, GLsizei bufSize,
                             GLsizei *length, GLenum *binaryFormat, void *binary) const
{
    static const char *fnName = "glGetProgramBinary";

    beforeCommand(fnName, _api.glGetProgramBinary);
    _api.glGetProgramBinary(program.ID, bufSize, length, binaryFormat, binary);
    afterCommand(fnName);
}

// Calls glGetProgramPipelineInfoLog().
void GLAPI::getProgramPipelineInfoLog(ProgramPipelineName pipeline,
                                      GLsizei bufSize, GLsizei *length,
                                      GLchar *infoLog) const
{
    static const char *fnName = "glGetProgramPipelineInfoLog";

    beforeCommand(fnName, _api.glGetProgramPipelineInfoLog);
    _api.glGetProgramPipelineInfoLog(pipeline.ID, bufSize, length, infoLog);
    afterCommand(fnName);
}

// Calls glGetProgramPipelineiv().
void GLAPI::getProgramPipelineIV(ProgramPipelineName pipeline,
                                 PipelineParameterName pname, GLint *params) const
{
    static const char *fnName = "glGetProgramPipelineiv";

    beforeCommand(fnName, _api.glGetProgramPipelineiv);
    _api.glGetProgramPipelineiv(pipeline.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetShaderPrecisionFormat().
void GLAPI::getShaderPrecisionFormat(ShaderType shadertype,
                                     PrecisionType precisiontype, GLint *range,
                                     GLint *precision) const
{
    static const char *fnName = "glGetShaderPrecisionFormat";

    beforeCommand(fnName, _api.glGetShaderPrecisionFormat);
    _api.glGetShaderPrecisionFormat(toScalar(shadertype),
                                    toScalar(precisiontype), range, precision);
    afterCommand(fnName);
}

// Calls glGetVertexAttribLdv().
void GLAPI::getVertexAttribLDV(GLuint index, VertexAttribEnum pname,
                               GLdouble *params) const
{
    static const char *fnName = "glGetVertexAttribLdv";

    beforeCommand(fnName, _api.glGetVertexAttribLdv);
    _api.glGetVertexAttribLdv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsProgramPipeline().
Boolean GLAPI::isProgramPipeline(ProgramPipelineName pipeline) const
{
    static const char *fnName = "glIsProgramPipeline";

    beforeCommand(fnName, _api.glIsProgramPipeline);
    GLboolean result = _api.glIsProgramPipeline(pipeline.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glProgramBinary().
void GLAPI::programBinary(ProgramName program, GLenum binaryFormat,
                          const void *binary, GLsizei length) const
{
    static const char *fnName = "glProgramBinary";

    beforeCommand(fnName, _api.glProgramBinary);
    _api.glProgramBinary(program.ID, binaryFormat, binary, length);
    afterCommand(fnName);
}

// Calls glProgramParameteri().
void GLAPI::programParameterI(ProgramName program, ProgramParameterPName pname,
                              GLint value) const
{
    static const char *fnName = "glProgramParameteri";

    beforeCommand(fnName, _api.glProgramParameteri);
    _api.glProgramParameteri(program.ID, toScalar(pname), value);
    afterCommand(fnName);
}

// Calls glProgramUniform1d().
void GLAPI::programUniform1D(ProgramName program, GLint location, GLdouble v0) const
{
    static const char *fnName = "glProgramUniform1d";

    beforeCommand(fnName, _api.glProgramUniform1d);
    _api.glProgramUniform1d(program.ID, location, v0);
    afterCommand(fnName);
}

// Calls glProgramUniform1dv().
void GLAPI::programUniform1DV(ProgramName program, GLint location, GLsizei count,
                              const GLdouble *value) const
{
    static const char *fnName = "glProgramUniform1dv";

    beforeCommand(fnName, _api.glProgramUniform1dv);
    _api.glProgramUniform1dv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform1f().
void GLAPI::programUniform1F(ProgramName program, GLint location, GLfloat v0) const
{
    static const char *fnName = "glProgramUniform1f";

    beforeCommand(fnName, _api.glProgramUniform1f);
    _api.glProgramUniform1f(program.ID, location, v0);
    afterCommand(fnName);
}

// Calls glProgramUniform1fv().
void GLAPI::programUniform1FV(ProgramName program, GLint location, GLsizei count,
                              const GLfloat *value) const
{
    static const char *fnName = "glProgramUniform1fv";

    beforeCommand(fnName, _api.glProgramUniform1fv);
    _api.glProgramUniform1fv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform1i().
void GLAPI::programUniform1I(ProgramName program, GLint location, GLint v0) const
{
    static const char *fnName = "glProgramUniform1i";

    beforeCommand(fnName, _api.glProgramUniform1i);
    _api.glProgramUniform1i(program.ID, location, v0);
    afterCommand(fnName);
}

// Calls glProgramUniform1iv().
void GLAPI::programUniform1IV(ProgramName program, GLint location, GLsizei count,
                              const GLint *value) const
{
    static const char *fnName = "glProgramUniform1iv";

    beforeCommand(fnName, _api.glProgramUniform1iv);
    _api.glProgramUniform1iv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform1ui().
void GLAPI::programUniform1UI(ProgramName program, GLint location, GLuint v0) const
{
    static const char *fnName = "glProgramUniform1ui";

    beforeCommand(fnName, _api.glProgramUniform1ui);
    _api.glProgramUniform1ui(program.ID, location, v0);
    afterCommand(fnName);
}

// Calls glProgramUniform1uiv().
void GLAPI::programUniform1UIV(ProgramName program, GLint location,
                               GLsizei count, const GLuint *value) const
{
    static const char *fnName = "glProgramUniform1uiv";

    beforeCommand(fnName, _api.glProgramUniform1uiv);
    _api.glProgramUniform1uiv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2d().
void GLAPI::programUniform2D(ProgramName program, GLint location, GLdouble v0,
                             GLdouble v1) const
{
    static const char *fnName = "glProgramUniform2d";

    beforeCommand(fnName, _api.glProgramUniform2d);
    _api.glProgramUniform2d(program.ID, location, v0, v1);
    afterCommand(fnName);
}

// Calls glProgramUniform2dv().
void GLAPI::programUniform2DV(ProgramName program, GLint location, GLsizei count,
                              const GLdouble *value) const
{
    static const char *fnName = "glProgramUniform2dv";

    beforeCommand(fnName, _api.glProgramUniform2dv);
    _api.glProgramUniform2dv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2f().
void GLAPI::programUniform2F(ProgramName program, GLint location, GLfloat v0,
                             GLfloat v1) const
{
    static const char *fnName = "glProgramUniform2f";

    beforeCommand(fnName, _api.glProgramUniform2f);
    _api.glProgramUniform2f(program.ID, location, v0, v1);
    afterCommand(fnName);
}

// Calls glProgramUniform2fv().
void GLAPI::programUniform2FV(ProgramName program, GLint location, GLsizei count,
                              const GLfloat *value) const
{
    static const char *fnName = "glProgramUniform2fv";

    beforeCommand(fnName, _api.glProgramUniform2fv);
    _api.glProgramUniform2fv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2i().
void GLAPI::programUniform2I(ProgramName program, GLint location, GLint v0,
                             GLint v1) const
{
    static const char *fnName = "glProgramUniform2i";

    beforeCommand(fnName, _api.glProgramUniform2i);
    _api.glProgramUniform2i(program.ID, location, v0, v1);
    afterCommand(fnName);
}

// Calls glProgramUniform2iv().
void GLAPI::programUniform2IV(ProgramName program, GLint location, GLsizei count,
                              const GLint *value) const
{
    static const char *fnName = "glProgramUniform2iv";

    beforeCommand(fnName, _api.glProgramUniform2iv);
    _api.glProgramUniform2iv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2ui().
void GLAPI::programUniform2UI(ProgramName program, GLint location, GLuint v0,
                              GLuint v1) const
{
    static const char *fnName = "glProgramUniform2ui";

    beforeCommand(fnName, _api.glProgramUniform2ui);
    _api.glProgramUniform2ui(program.ID, location, v0, v1);
    afterCommand(fnName);
}

// Calls glProgramUniform2uiv().
void GLAPI::programUniform2UIV(ProgramName program, GLint location,
                               GLsizei count, const GLuint *value) const
{
    static const char *fnName = "glProgramUniform2uiv";

    beforeCommand(fnName, _api.glProgramUniform2uiv);
    _api.glProgramUniform2uiv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3d().
void GLAPI::programUniform3D(ProgramName program, GLint location, GLdouble v0,
                             GLdouble v1, GLdouble v2) const
{
    static const char *fnName = "glProgramUniform3d";

    beforeCommand(fnName, _api.glProgramUniform3d);
    _api.glProgramUniform3d(program.ID, location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glProgramUniform3dv().
void GLAPI::programUniform3DV(ProgramName program, GLint location, GLsizei count,
                              const GLdouble *value) const
{
    static const char *fnName = "glProgramUniform3dv";

    beforeCommand(fnName, _api.glProgramUniform3dv);
    _api.glProgramUniform3dv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3f().
void GLAPI::programUniform3F(ProgramName program, GLint location, GLfloat v0,
                             GLfloat v1, GLfloat v2) const
{
    static const char *fnName = "glProgramUniform3f";

    beforeCommand(fnName, _api.glProgramUniform3f);
    _api.glProgramUniform3f(program.ID, location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glProgramUniform3fv().
void GLAPI::programUniform3FV(ProgramName program, GLint location, GLsizei count,
                              const GLfloat *value) const
{
    static const char *fnName = "glProgramUniform3fv";

    beforeCommand(fnName, _api.glProgramUniform3fv);
    _api.glProgramUniform3fv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3i().
void GLAPI::programUniform3I(ProgramName program, GLint location, GLint v0,
                             GLint v1, GLint v2) const
{
    static const char *fnName = "glProgramUniform3i";

    beforeCommand(fnName, _api.glProgramUniform3i);
    _api.glProgramUniform3i(program.ID, location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glProgramUniform3iv().
void GLAPI::programUniform3IV(ProgramName program, GLint location, GLsizei count,
                              const GLint *value) const
{
    static const char *fnName = "glProgramUniform3iv";

    beforeCommand(fnName, _api.glProgramUniform3iv);
    _api.glProgramUniform3iv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3ui().
void GLAPI::programUniform3UI(ProgramName program, GLint location, GLuint v0,
                              GLuint v1, GLuint v2) const
{
    static const char *fnName = "glProgramUniform3ui";

    beforeCommand(fnName, _api.glProgramUniform3ui);
    _api.glProgramUniform3ui(program.ID, location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glProgramUniform3uiv().
void GLAPI::programUniform3UIV(ProgramName program, GLint location,
                               GLsizei count, const GLuint *value) const
{
    static const char *fnName = "glProgramUniform3uiv";

    beforeCommand(fnName, _api.glProgramUniform3uiv);
    _api.glProgramUniform3uiv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4d().
void GLAPI::programUniform4D(ProgramName program, GLint location, GLdouble v0,
                             GLdouble v1, GLdouble v2, GLdouble v3) const
{
    static const char *fnName = "glProgramUniform4d";

    beforeCommand(fnName, _api.glProgramUniform4d);
    _api.glProgramUniform4d(program.ID, location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glProgramUniform4dv().
void GLAPI::programUniform4DV(ProgramName program, GLint location, GLsizei count,
                              const GLdouble *value) const
{
    static const char *fnName = "glProgramUniform4dv";

    beforeCommand(fnName, _api.glProgramUniform4dv);
    _api.glProgramUniform4dv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4f().
void GLAPI::programUniform4F(ProgramName program, GLint location, GLfloat v0,
                             GLfloat v1, GLfloat v2, GLfloat v3) const
{
    static const char *fnName = "glProgramUniform4f";

    beforeCommand(fnName, _api.glProgramUniform4f);
    _api.glProgramUniform4f(program.ID, location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glProgramUniform4fv().
void GLAPI::programUniform4FV(ProgramName program, GLint location, GLsizei count,
                              const GLfloat *value) const
{
    static const char *fnName = "glProgramUniform4fv";

    beforeCommand(fnName, _api.glProgramUniform4fv);
    _api.glProgramUniform4fv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4i().
void GLAPI::programUniform4I(ProgramName program, GLint location, GLint v0,
                             GLint v1, GLint v2, GLint v3) const
{
    static const char *fnName = "glProgramUniform4i";

    beforeCommand(fnName, _api.glProgramUniform4i);
    _api.glProgramUniform4i(program.ID, location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glProgramUniform4iv().
void GLAPI::programUniform4IV(ProgramName program, GLint location, GLsizei count,
                              const GLint *value) const
{
    static const char *fnName = "glProgramUniform4iv";

    beforeCommand(fnName, _api.glProgramUniform4iv);
    _api.glProgramUniform4iv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4ui().
void GLAPI::programUniform4UI(ProgramName program, GLint location, GLuint v0,
                              GLuint v1, GLuint v2, GLuint v3) const
{
    static const char *fnName = "glProgramUniform4ui";

    beforeCommand(fnName, _api.glProgramUniform4ui);
    _api.glProgramUniform4ui(program.ID, location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glProgramUniform4uiv().
void GLAPI::programUniform4UIV(ProgramName program, GLint location,
                               GLsizei count, const GLuint *value) const
{
    static const char *fnName = "glProgramUniform4uiv";

    beforeCommand(fnName, _api.glProgramUniform4uiv);
    _api.glProgramUniform4uiv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2dv().
void GLAPI::programUniformMatrix2DV(ProgramName program, GLint location,
                                    GLsizei count, Boolean transpose,
                                    const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix2dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix2dv);
    _api.glProgramUniformMatrix2dv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2fv().
void GLAPI::programUniformMatrix2FV(ProgramName program, GLint location,
                                    GLsizei count, Boolean transpose,
                                    const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix2fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix2fv);
    _api.glProgramUniformMatrix2fv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2x3dv().
void GLAPI::programUniformMatrix2x3DV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix2x3dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix2x3dv);
    _api.glProgramUniformMatrix2x3dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2x3fv().
void GLAPI::programUniformMatrix2x3FV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix2x3fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix2x3fv);
    _api.glProgramUniformMatrix2x3fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2x4dv().
void GLAPI::programUniformMatrix2x4DV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix2x4dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix2x4dv);
    _api.glProgramUniformMatrix2x4dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2x4fv().
void GLAPI::programUniformMatrix2x4FV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix2x4fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix2x4fv);
    _api.glProgramUniformMatrix2x4fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3dv().
void GLAPI::programUniformMatrix3DV(ProgramName program, GLint location,
                                    GLsizei count, Boolean transpose,
                                    const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix3dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix3dv);
    _api.glProgramUniformMatrix3dv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3fv().
void GLAPI::programUniformMatrix3FV(ProgramName program, GLint location,
                                    GLsizei count, Boolean transpose,
                                    const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix3fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix3fv);
    _api.glProgramUniformMatrix3fv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3x2dv().
void GLAPI::programUniformMatrix3x2DV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix3x2dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix3x2dv);
    _api.glProgramUniformMatrix3x2dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3x2fv().
void GLAPI::programUniformMatrix3x2FV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix3x2fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix3x2fv);
    _api.glProgramUniformMatrix3x2fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3x4dv().
void GLAPI::programUniformMatrix3x4DV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix3x4dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix3x4dv);
    _api.glProgramUniformMatrix3x4dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3x4fv().
void GLAPI::programUniformMatrix3x4FV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix3x4fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix3x4fv);
    _api.glProgramUniformMatrix3x4fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4dv().
void GLAPI::programUniformMatrix4DV(ProgramName program, GLint location,
                                    GLsizei count, Boolean transpose,
                                    const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix4dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix4dv);
    _api.glProgramUniformMatrix4dv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4fv().
void GLAPI::programUniformMatrix4FV(ProgramName program, GLint location,
                                    GLsizei count, Boolean transpose,
                                    const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix4fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix4fv);
    _api.glProgramUniformMatrix4fv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4x2dv().
void GLAPI::programUniformMatrix4x2DV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix4x2dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix4x2dv);
    _api.glProgramUniformMatrix4x2dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4x2fv().
void GLAPI::programUniformMatrix4x2FV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix4x2fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix4x2fv);
    _api.glProgramUniformMatrix4x2fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4x3dv().
void GLAPI::programUniformMatrix4x3DV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix4x3dv";

    beforeCommand(fnName, _api.glProgramUniformMatrix4x3dv);
    _api.glProgramUniformMatrix4x3dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4x3fv().
void GLAPI::programUniformMatrix4x3FV(ProgramName program, GLint location,
                                      GLsizei count, Boolean transpose,
                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix4x3fv";

    beforeCommand(fnName, _api.glProgramUniformMatrix4x3fv);
    _api.glProgramUniformMatrix4x3fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glReleaseShaderCompiler().
void GLAPI::releaseShaderCompiler() const
{
    static const char *fnName = "glReleaseShaderCompiler";

    beforeCommand(fnName, _api.glReleaseShaderCompiler);
    _api.glReleaseShaderCompiler();
    afterCommand(fnName);
}

// Calls glScissorArrayv().
void GLAPI::scissorArrayV(GLuint first, GLsizei count, const GLint *v) const
{
    static const char *fnName = "glScissorArrayv";

    beforeCommand(fnName, _api.glScissorArrayv);
    _api.glScissorArrayv(first, count, v);
    afterCommand(fnName);
}

// Calls glScissorIndexed().
void GLAPI::scissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width,
                           GLsizei height) const
{
    static const char *fnName = "glScissorIndexed";

    beforeCommand(fnName, _api.glScissorIndexed);
    _api.glScissorIndexed(index, left, bottom, width, height);
    afterCommand(fnName);
}

// Calls glScissorIndexedv().
void GLAPI::scissorIndexedv(GLuint index, const GLint *v) const
{
    static const char *fnName = "glScissorIndexedv";

    beforeCommand(fnName, _api.glScissorIndexedv);
    _api.glScissorIndexedv(index, v);
    afterCommand(fnName);
}

// Calls glShaderBinary().
void GLAPI::shaderBinary(GLsizei count, const ShaderName *shaders,
                         ShaderBinaryFormat binaryFormat, const void *binary,
                         GLsizei length) const
{
    static const char *fnName = "glShaderBinary";

    beforeCommand(fnName, _api.glShaderBinary);
    _api.glShaderBinary(count, reinterpret_cast<const GLuint *>(shaders),
                        toScalar(binaryFormat), binary, length);
    afterCommand(fnName);
}

// Calls glUseProgramStages().
void GLAPI::useProgramStages(ProgramPipelineName pipeline,
                             GLbitfield  /* UseProgramStageMask */ stages,
                             ProgramName program) const
{
    static const char *fnName = "glUseProgramStages";

    beforeCommand(fnName, _api.glUseProgramStages);
    _api.glUseProgramStages(pipeline.ID, stages, program.ID);
    afterCommand(fnName);
}

// Calls glValidateProgramPipeline().
void GLAPI::validateProgramPipeline(ProgramPipelineName pipeline) const
{
    static const char *fnName = "glValidateProgramPipeline";

    beforeCommand(fnName, _api.glValidateProgramPipeline);
    _api.glValidateProgramPipeline(pipeline.ID);
    afterCommand(fnName);
}

// Calls glVertexAttribL1d().
void GLAPI::vertexAttribL1D(GLuint index, GLdouble x) const
{
    static const char *fnName = "glVertexAttribL1d";

    beforeCommand(fnName, _api.glVertexAttribL1d);
    _api.glVertexAttribL1d(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribL1dv().
void GLAPI::vertexAttribL1DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribL1dv";

    beforeCommand(fnName, _api.glVertexAttribL1dv);
    _api.glVertexAttribL1dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL2d().
void GLAPI::vertexAttribL2D(GLuint index, GLdouble x, GLdouble y) const
{
    static const char *fnName = "glVertexAttribL2d";

    beforeCommand(fnName, _api.glVertexAttribL2d);
    _api.glVertexAttribL2d(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttribL2dv().
void GLAPI::vertexAttribL2DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribL2dv";

    beforeCommand(fnName, _api.glVertexAttribL2dv);
    _api.glVertexAttribL2dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL3d().
void GLAPI::vertexAttribL3D(GLuint index, GLdouble x, GLdouble y, GLdouble z) const
{
    static const char *fnName = "glVertexAttribL3d";

    beforeCommand(fnName, _api.glVertexAttribL3d);
    _api.glVertexAttribL3d(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttribL3dv().
void GLAPI::vertexAttribL3DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribL3dv";

    beforeCommand(fnName, _api.glVertexAttribL3dv);
    _api.glVertexAttribL3dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL4d().
void GLAPI::vertexAttribL4D(GLuint index, GLdouble x, GLdouble y, GLdouble z,
                            GLdouble w) const
{
    static const char *fnName = "glVertexAttribL4d";

    beforeCommand(fnName, _api.glVertexAttribL4d);
    _api.glVertexAttribL4d(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttribL4dv().
void GLAPI::vertexAttribL4DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribL4dv";

    beforeCommand(fnName, _api.glVertexAttribL4dv);
    _api.glVertexAttribL4dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribLPointer().
void GLAPI::vertexAttribLPointer(GLuint index, GLint size,
                                 VertexAttribLType type, GLsizei stride,
                                 const void *pointer) const
{
    static const char *fnName = "glVertexAttribLPointer";

    beforeCommand(fnName, _api.glVertexAttribLPointer);
    _api.glVertexAttribLPointer(index, size, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glViewportArrayv().
void GLAPI::viewportArrayV(GLuint first, GLsizei count, const GLfloat *v) const
{
    static const char *fnName = "glViewportArrayv";

    beforeCommand(fnName, _api.glViewportArrayv);
    _api.glViewportArrayv(first, count, v);
    afterCommand(fnName);
}

// Calls glViewportIndexedf().
void GLAPI::viewportIndexedF(GLuint index, GLfloat x, GLfloat y, GLfloat w,
                             GLfloat h) const
{
    static const char *fnName = "glViewportIndexedf";

    beforeCommand(fnName, _api.glViewportIndexedf);
    _api.glViewportIndexedf(index, x, y, w, h);
    afterCommand(fnName);
}

// Calls glViewportIndexedfv().
void GLAPI::viewportIndexedFV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glViewportIndexedfv";

    beforeCommand(fnName, _api.glViewportIndexedfv);
    _api.glViewportIndexedfv(index, v);
    afterCommand(fnName);
}

// Calls glBindImageTexture().
void GLAPI::bindImageTexture(GLuint unit, TextureName texture, GLint level,
                             Boolean layered, GLint layer,
                             BufferAccessARB access, InternalFormat format) const
{
    static const char *fnName = "glBindImageTexture";

    beforeCommand(fnName, _api.glBindImageTexture);
    _api.glBindImageTexture(unit, texture.ID, level, toScalar(layered), layer,
                            toScalar(access), toScalar(format));
    afterCommand(fnName);
}

// Calls glDrawArraysInstancedBaseInstance().
void GLAPI::drawArraysInstancedBaseInstance(PrimitiveType mode, GLint first,
                                            GLsizei count, GLsizei instancecount,
                                            GLuint baseinstance) const
{
    static const char *fnName = "glDrawArraysInstancedBaseInstance";

    beforeCommand(fnName, _api.glDrawArraysInstancedBaseInstance);
    _api.glDrawArraysInstancedBaseInstance(toScalar(mode), first, count,
                                           instancecount, baseinstance);
    afterCommand(fnName);
}

// Calls glDrawElementsInstancedBaseInstance().
void GLAPI::drawElementsInstancedBaseInstance(PrimitiveType mode, GLsizei count,
                                              PrimitiveType type,
                                              const void *indices,
                                              GLsizei instancecount,
                                              GLuint baseinstance) const
{
    static const char *fnName = "glDrawElementsInstancedBaseInstance";

    beforeCommand(fnName, _api.glDrawElementsInstancedBaseInstance);
    _api.glDrawElementsInstancedBaseInstance(toScalar(mode), count,
                                             toScalar(type), indices,
                                             instancecount, baseinstance);
    afterCommand(fnName);
}

// Calls glDrawElementsInstancedBaseVertexBaseInstance().
void GLAPI::drawElementsInstancedBaseVertexBaseInstance(PrimitiveType mode,
                                                        GLsizei count,
                                                        DrawElementsType type,
                                                        const void *indices,
                                                        GLsizei instancecount,
                                                        GLint basevertex,
                                                        GLuint baseinstance) const
{
    static const char *fnName = "glDrawElementsInstancedBaseVertexBaseInstance";

    beforeCommand(fnName, _api.glDrawElementsInstancedBaseVertexBaseInstance);
    _api.glDrawElementsInstancedBaseVertexBaseInstance(toScalar(mode), count,
                                                       toScalar(type), indices,
                                                       instancecount, basevertex,
                                                       baseinstance);
    afterCommand(fnName);
}

// Calls glDrawTransformFeedbackInstanced().
void GLAPI::drawTransformFeedbackInstanced(PrimitiveType mode,
                                           TransformFeedbackName id,
                                           GLsizei instancecount) const
{
    static const char *fnName = "glDrawTransformFeedbackInstanced";

    beforeCommand(fnName, _api.glDrawTransformFeedbackInstanced);
    _api.glDrawTransformFeedbackInstanced(toScalar(mode), id.ID, instancecount);
    afterCommand(fnName);
}

// Calls glDrawTransformFeedbackStreamInstanced().
void GLAPI::drawTransformFeedbackStreamInstanced(PrimitiveType mode,
                                                 TransformFeedbackName id,
                                                 GLuint stream,
                                                 GLsizei instancecount) const
{
    static const char *fnName = "glDrawTransformFeedbackStreamInstanced";

    beforeCommand(fnName, _api.glDrawTransformFeedbackStreamInstanced);
    _api.glDrawTransformFeedbackStreamInstanced(toScalar(mode), id.ID, stream,
                                                instancecount);
    afterCommand(fnName);
}

// Calls glGetActiveAtomicCounterBufferiv().
void GLAPI::getActiveAtomicCounterBufferIV(ProgramName program,
                                           GLuint bufferIndex,
                                           AtomicCounterBufferPName pname,
                                           GLint *params) const
{
    static const char *fnName = "glGetActiveAtomicCounterBufferiv";

    beforeCommand(fnName, _api.glGetActiveAtomicCounterBufferiv);
    _api.glGetActiveAtomicCounterBufferiv(program.ID, bufferIndex,
                                          toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetInternalformativ().
void GLAPI::getInternalformatIV(TextureTarget target,
                                InternalFormat internalformat,
                                InternalFormatPName pname, GLsizei count,
                                GLint *params) const
{
    static const char *fnName = "glGetInternalformativ";

    beforeCommand(fnName, _api.glGetInternalformativ);
    _api.glGetInternalformativ(toScalar(target), toScalar(internalformat),
                               toScalar(pname), count, params);
    afterCommand(fnName);
}

// Calls glMemoryBarrier().
void GLAPI::memoryBarrier(GLbitfield  /* MemoryBarrierMask */ barriers) const
{
    static const char *fnName = "glMemoryBarrier";

    beforeCommand(fnName, _api.glMemoryBarrier);
    _api.glMemoryBarrier(barriers);
    afterCommand(fnName);
}

// Calls glTexStorage1D().
void GLAPI::texStorage1D(TextureTarget target, GLsizei levels,
                         SizedInternalFormat internalformat, GLsizei width) const
{
    static const char *fnName = "glTexStorage1D";

    beforeCommand(fnName, _api.glTexStorage1D);
    _api.glTexStorage1D(toScalar(target), levels, toScalar(internalformat),
                        width);
    afterCommand(fnName);
}

// Calls glTexStorage2D().
void GLAPI::texStorage2D(TextureTarget target, GLsizei levels,
                         SizedInternalFormat internalformat, GLsizei width,
                         GLsizei height) const
{
    static const char *fnName = "glTexStorage2D";

    beforeCommand(fnName, _api.glTexStorage2D);
    _api.glTexStorage2D(toScalar(target), levels, toScalar(internalformat),
                        width, height);
    afterCommand(fnName);
}

// Calls glTexStorage3D().
void GLAPI::texStorage3D(TextureTarget target, GLsizei levels,
                         SizedInternalFormat internalformat, GLsizei width,
                         GLsizei height, GLsizei depth) const
{
    static const char *fnName = "glTexStorage3D";

    beforeCommand(fnName, _api.glTexStorage3D);
    _api.glTexStorage3D(toScalar(target), levels, toScalar(internalformat),
                        width, height, depth);
    afterCommand(fnName);
}

// Calls glBindVertexBuffer().
void GLAPI::bindVertexBuffer(GLuint bindingindex, BufferName buffer,
                             GLintptr offset, GLsizei stride) const
{
    static const char *fnName = "glBindVertexBuffer";

    beforeCommand(fnName, _api.glBindVertexBuffer);
    _api.glBindVertexBuffer(bindingindex, buffer.ID, offset, stride);
    afterCommand(fnName);
}

// Calls glClearBufferData().
void GLAPI::clearBufferData(BufferStorageTarget target,
                            SizedInternalFormat internalformat,
                            PixelFormat format, PixelType type, const void *data) const
{
    static const char *fnName = "glClearBufferData";

    beforeCommand(fnName, _api.glClearBufferData);
    _api.glClearBufferData(toScalar(target), toScalar(internalformat),
                           toScalar(format), toScalar(type), data);
    afterCommand(fnName);
}

// Calls glClearBufferSubData().
void GLAPI::clearBufferSubData(BufferTarget target,
                               SizedInternalFormat internalformat,
                               GLintptr offset, GLsizeiptr size,
                               PixelFormat format, PixelType type,
                               const void *data) const
{
    static const char *fnName = "glClearBufferSubData";

    beforeCommand(fnName, _api.glClearBufferSubData);
    _api.glClearBufferSubData(toScalar(target), toScalar(internalformat), offset,
                              size, toScalar(format), toScalar(type), data);
    afterCommand(fnName);
}

// Calls glCopyImageSubData().
void GLAPI::copyImageSubData(GLuint srcName, CopyImageSubDataTarget srcTarget,
                             GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ,
                             GLuint dstName, CopyImageSubDataTarget dstTarget,
                             GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ,
                             GLsizei srcWidth, GLsizei srcHeight,
                             GLsizei srcDepth) const
{
    static const char *fnName = "glCopyImageSubData";

    beforeCommand(fnName, _api.glCopyImageSubData);
    _api.glCopyImageSubData(srcName, toScalar(srcTarget), srcLevel, srcX, srcY,
                            srcZ, dstName, toScalar(dstTarget), dstLevel, dstX,
                            dstY, dstZ, srcWidth, srcHeight, srcDepth);
    afterCommand(fnName);
}

// Calls glDebugMessageCallback().
void GLAPI::debugMessageCallback(GLDEBUGPROC callback, const void *userParam) const
{
    static const char *fnName = "glDebugMessageCallback";

    beforeCommand(fnName, _api.glDebugMessageCallback);
    _api.glDebugMessageCallback(callback, userParam);
    afterCommand(fnName);
}

// Calls glDebugMessageControl().
void GLAPI::debugMessageControl(DebugSource source, DebugType type,
                                DebugSeverity severity, GLsizei count,
                                const GLuint *ids, Boolean enabled) const
{
    static const char *fnName = "glDebugMessageControl";

    beforeCommand(fnName, _api.glDebugMessageControl);
    _api.glDebugMessageControl(toScalar(source), toScalar(type),
                               toScalar(severity), count, ids, toScalar(enabled));
    afterCommand(fnName);
}

// Calls glDebugMessageInsert().
void GLAPI::debugMessageInsert(DebugSource source, DebugType type, GLuint id,
                               DebugSeverity severity, GLsizei length,
                               const GLchar *buf) const
{
    static const char *fnName = "glDebugMessageInsert";

    beforeCommand(fnName, _api.glDebugMessageInsert);
    _api.glDebugMessageInsert(toScalar(source), toScalar(type), id,
                              toScalar(severity), length, buf);
    afterCommand(fnName);
}

// Calls glDispatchCompute().
void GLAPI::dispatchCompute(GLuint num_groups_x, GLuint num_groups_y,
                            GLuint num_groups_z) const
{
    static const char *fnName = "glDispatchCompute";

    beforeCommand(fnName, _api.glDispatchCompute);
    _api.glDispatchCompute(num_groups_x, num_groups_y, num_groups_z);
    afterCommand(fnName);
}

// Calls glDispatchComputeIndirect().
void GLAPI::dispatchComputeIndirect(GLintptr indirect) const
{
    static const char *fnName = "glDispatchComputeIndirect";

    beforeCommand(fnName, _api.glDispatchComputeIndirect);
    _api.glDispatchComputeIndirect(indirect);
    afterCommand(fnName);
}

// Calls glFramebufferParameteri().
void GLAPI::framebufferParameterI(FramebufferTarget target,
                                  FramebufferParameterName pname, GLint param) const
{
    static const char *fnName = "glFramebufferParameteri";

    beforeCommand(fnName, _api.glFramebufferParameteri);
    _api.glFramebufferParameteri(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetDebugMessageLog().
GLuint GLAPI::getDebugMessageLog(GLuint count, GLsizei bufSize,
                                 DebugSource *sources, DebugType *types,
                                 GLuint *ids, DebugSeverity *severities,
                                 GLsizei *lengths, GLchar *messageLog) const
{
    static const char *fnName = "glGetDebugMessageLog";

    beforeCommand(fnName, _api.glGetDebugMessageLog);
    GLuint result = _api.glGetDebugMessageLog(count, bufSize,
                                              toScalarPtr(sources),
                                              toScalarPtr(types), ids,
                                              toScalarPtr(severities), lengths,
                                              messageLog);
    afterCommand(fnName);

    return result;
}

// Calls glGetFramebufferParameteriv().
void GLAPI::getFramebufferParameterIV(FramebufferTarget target,
                                      FramebufferAttachmentParameterName pname,
                                      GLint *params) const
{
    static const char *fnName = "glGetFramebufferParameteriv";

    beforeCommand(fnName, _api.glGetFramebufferParameteriv);
    _api.glGetFramebufferParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetInternalformati64v().
void GLAPI::getInternalformatI64V(TextureTarget target,
                                  InternalFormat internalformat,
                                  InternalFormatPName pname, GLsizei count,
                                  GLint64 *params) const
{
    static const char *fnName = "glGetInternalformati64v";

    beforeCommand(fnName, _api.glGetInternalformati64v);
    _api.glGetInternalformati64v(toScalar(target), toScalar(internalformat),
                                 toScalar(pname), count, params);
    afterCommand(fnName);
}

// Calls glGetObjectLabel().
void GLAPI::getObjectLabel(ObjectIdentifier identifier, GLuint name,
                           GLsizei bufSize, GLsizei *length, GLchar *label) const
{
    static const char *fnName = "glGetObjectLabel";

    beforeCommand(fnName, _api.glGetObjectLabel);
    _api.glGetObjectLabel(toScalar(identifier), name, bufSize, length, label);
    afterCommand(fnName);
}

// Calls glGetObjectPtrLabel().
void GLAPI::getObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length,
                              GLchar *label) const
{
    static const char *fnName = "glGetObjectPtrLabel";

    beforeCommand(fnName, _api.glGetObjectPtrLabel);
    _api.glGetObjectPtrLabel(ptr, bufSize, length, label);
    afterCommand(fnName);
}

// Calls glGetPointerv().
void GLAPI::getPointerV(GetPointervPName pname, void **params) const
{
    static const char *fnName = "glGetPointerv";

    beforeCommand(fnName, _api.glGetPointerv);
    _api.glGetPointerv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetProgramInterfaceiv().
void GLAPI::getProgramInterfaceIV(ProgramName program,
                                  ProgramInterface programInterface,
                                  ProgramInterfacePName pname, GLint *params) const
{
    static const char *fnName = "glGetProgramInterfaceiv";

    beforeCommand(fnName, _api.glGetProgramInterfaceiv);
    _api.glGetProgramInterfaceiv(program.ID, toScalar(programInterface),
                                 toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetProgramResourceIndex().
GLuint GLAPI::getProgramResourceIndex(ProgramName program,
                                      ProgramInterface programInterface,
                                      const GLchar *name) const
{
    static const char *fnName = "glGetProgramResourceIndex";

    beforeCommand(fnName, _api.glGetProgramResourceIndex);
    GLuint result = _api.glGetProgramResourceIndex(program.ID,
                                                   toScalar(programInterface),
                                                   name);
    afterCommand(fnName);

    return result;
}

// Calls glGetProgramResourceLocation().
GLint GLAPI::getProgramResourceLocation(ProgramName program,
                                        ProgramInterface programInterface,
                                        const GLchar *name) const
{
    static const char *fnName = "glGetProgramResourceLocation";

    beforeCommand(fnName, _api.glGetProgramResourceLocation);
    GLint result = _api.glGetProgramResourceLocation(program.ID,
                                                     toScalar(programInterface),
                                                     name);
    afterCommand(fnName);

    return result;
}

// Calls glGetProgramResourceLocationIndex().
GLint GLAPI::getProgramResourceLocationIndex(ProgramName program,
                                             ProgramInterface programInterface,
                                             const GLchar *name) const
{
    static const char *fnName = "glGetProgramResourceLocationIndex";

    beforeCommand(fnName, _api.glGetProgramResourceLocationIndex);
    GLint result = _api.glGetProgramResourceLocationIndex(program.ID,
                                                          toScalar(programInterface),
                                                          name);
    afterCommand(fnName);

    return result;
}

// Calls glGetProgramResourceName().
void GLAPI::getProgramResourceName(ProgramName program,
                                   ProgramInterface programInterface,
                                   GLuint index, GLsizei bufSize,
                                   GLsizei *length, GLchar *name) const
{
    static const char *fnName = "glGetProgramResourceName";

    beforeCommand(fnName, _api.glGetProgramResourceName);
    _api.glGetProgramResourceName(program.ID, toScalar(programInterface), index,
                                  bufSize, length, name);
    afterCommand(fnName);
}

// Calls glGetProgramResourceiv().
void GLAPI::getProgramResourceIV(ProgramName program,
                                 ProgramInterface programInterface, GLuint index,
                                 GLsizei propCount,
                                 const ProgramResourceProperty *props,
                                 GLsizei count, GLsizei *length, GLint *params) const
{
    static const char *fnName = "glGetProgramResourceiv";

    beforeCommand(fnName, _api.glGetProgramResourceiv);
    _api.glGetProgramResourceiv(program.ID, toScalar(programInterface), index,
                                propCount, toScalarPtr(props), count, length,
                                params);
    afterCommand(fnName);
}

// Calls glInvalidateBufferData().
void GLAPI::invalidateBufferData(BufferName buffer) const
{
    static const char *fnName = "glInvalidateBufferData";

    beforeCommand(fnName, _api.glInvalidateBufferData);
    _api.glInvalidateBufferData(buffer.ID);
    afterCommand(fnName);
}

// Calls glInvalidateBufferSubData().
void GLAPI::invalidateBufferSubData(BufferName buffer, GLintptr offset,
                                    GLsizeiptr length) const
{
    static const char *fnName = "glInvalidateBufferSubData";

    beforeCommand(fnName, _api.glInvalidateBufferSubData);
    _api.glInvalidateBufferSubData(buffer.ID, offset, length);
    afterCommand(fnName);
}

// Calls glInvalidateFramebuffer().
void GLAPI::invalidateFramebuffer(FramebufferTarget target,
                                  GLsizei numAttachments,
                                  const InvalidateFramebufferAttachment *attachments) const
{
    static const char *fnName = "glInvalidateFramebuffer";

    beforeCommand(fnName, _api.glInvalidateFramebuffer);
    _api.glInvalidateFramebuffer(toScalar(target), numAttachments,
                                 toScalarPtr(attachments));
    afterCommand(fnName);
}

// Calls glInvalidateSubFramebuffer().
void GLAPI::invalidateSubFramebuffer(FramebufferTarget target,
                                     GLsizei numAttachments,
                                     const InvalidateFramebufferAttachment *attachments,
                                     GLint x, GLint y, GLsizei width,
                                     GLsizei height) const
{
    static const char *fnName = "glInvalidateSubFramebuffer";

    beforeCommand(fnName, _api.glInvalidateSubFramebuffer);
    _api.glInvalidateSubFramebuffer(toScalar(target), numAttachments,
                                    toScalarPtr(attachments), x, y, width,
                                    height);
    afterCommand(fnName);
}

// Calls glInvalidateTexImage().
void GLAPI::invalidateTexImage(TextureName texture, GLint level) const
{
    static const char *fnName = "glInvalidateTexImage";

    beforeCommand(fnName, _api.glInvalidateTexImage);
    _api.glInvalidateTexImage(texture.ID, level);
    afterCommand(fnName);
}

// Calls glInvalidateTexSubImage().
void GLAPI::invalidateTexSubImage(TextureName texture, GLint level,
                                  GLint xoffset, GLint yoffset, GLint zoffset,
                                  GLsizei width, GLsizei height, GLsizei depth) const
{
    static const char *fnName = "glInvalidateTexSubImage";

    beforeCommand(fnName, _api.glInvalidateTexSubImage);
    _api.glInvalidateTexSubImage(texture.ID, level, xoffset, yoffset, zoffset,
                                 width, height, depth);
    afterCommand(fnName);
}

// Calls glMultiDrawArraysIndirect().
void GLAPI::multiDrawArraysIndirect(PrimitiveType mode, const void *indirect,
                                    GLsizei drawcount, GLsizei stride) const
{
    static const char *fnName = "glMultiDrawArraysIndirect";

    beforeCommand(fnName, _api.glMultiDrawArraysIndirect);
    _api.glMultiDrawArraysIndirect(toScalar(mode), indirect, drawcount, stride);
    afterCommand(fnName);
}

// Calls glMultiDrawElementsIndirect().
void GLAPI::multiDrawElementsIndirect(PrimitiveType mode, DrawElementsType type,
                                      const void *indirect, GLsizei drawcount,
                                      GLsizei stride) const
{
    static const char *fnName = "glMultiDrawElementsIndirect";

    beforeCommand(fnName, _api.glMultiDrawElementsIndirect);
    _api.glMultiDrawElementsIndirect(toScalar(mode), toScalar(type), indirect,
                                     drawcount, stride);
    afterCommand(fnName);
}

// Calls glObjectLabel().
void GLAPI::objectLabel(ObjectIdentifier identifier, GLuint name, GLsizei length,
                        const GLchar *label) const
{
    static const char *fnName = "glObjectLabel";

    beforeCommand(fnName, _api.glObjectLabel);
    _api.glObjectLabel(toScalar(identifier), name, length, label);
    afterCommand(fnName);
}

// Calls glObjectPtrLabel().
void GLAPI::objectPtrLabel(const void *ptr, GLsizei length, const GLchar *label) const
{
    static const char *fnName = "glObjectPtrLabel";

    beforeCommand(fnName, _api.glObjectPtrLabel);
    _api.glObjectPtrLabel(ptr, length, label);
    afterCommand(fnName);
}

// Calls glPopDebugGroup().
void GLAPI::popDebugGroup() const
{
    static const char *fnName = "glPopDebugGroup";

    beforeCommand(fnName, _api.glPopDebugGroup);
    _api.glPopDebugGroup();
    afterCommand(fnName);
}

// Calls glPushDebugGroup().
void GLAPI::pushDebugGroup(DebugSource source, GLuint id, GLsizei length,
                           const GLchar *message) const
{
    static const char *fnName = "glPushDebugGroup";

    beforeCommand(fnName, _api.glPushDebugGroup);
    _api.glPushDebugGroup(toScalar(source), id, length, message);
    afterCommand(fnName);
}

// Calls glShaderStorageBlockBinding().
void GLAPI::shaderStorageBlockBinding(ProgramName program,
                                      GLuint storageBlockIndex,
                                      GLuint storageBlockBinding) const
{
    static const char *fnName = "glShaderStorageBlockBinding";

    beforeCommand(fnName, _api.glShaderStorageBlockBinding);
    _api.glShaderStorageBlockBinding(program.ID, storageBlockIndex,
                                     storageBlockBinding);
    afterCommand(fnName);
}

// Calls glTexBufferRange().
void GLAPI::texBufferRange(TextureTarget target,
                           SizedInternalFormat internalformat, BufferName buffer,
                           GLintptr offset, GLsizeiptr size) const
{
    static const char *fnName = "glTexBufferRange";

    beforeCommand(fnName, _api.glTexBufferRange);
    _api.glTexBufferRange(toScalar(target), toScalar(internalformat), buffer.ID,
                          offset, size);
    afterCommand(fnName);
}

// Calls glTexStorage2DMultisample().
void GLAPI::texStorage2DMultisample(TextureTarget target, GLsizei samples,
                                    SizedInternalFormat internalformat,
                                    GLsizei width, GLsizei height,
                                    Boolean fixedsamplelocations) const
{
    static const char *fnName = "glTexStorage2DMultisample";

    beforeCommand(fnName, _api.glTexStorage2DMultisample);
    _api.glTexStorage2DMultisample(toScalar(target), samples,
                                   toScalar(internalformat), width, height,
                                   toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

// Calls glTexStorage3DMultisample().
void GLAPI::texStorage3DMultisample(TextureTarget target, GLsizei samples,
                                    SizedInternalFormat internalformat,
                                    GLsizei width, GLsizei height, GLsizei depth,
                                    Boolean fixedsamplelocations) const
{
    static const char *fnName = "glTexStorage3DMultisample";

    beforeCommand(fnName, _api.glTexStorage3DMultisample);
    _api.glTexStorage3DMultisample(toScalar(target), samples,
                                   toScalar(internalformat), width, height,
                                   depth, toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

// Calls glTextureView().
void GLAPI::textureView(TextureName texture, TextureTarget target,
                        TextureName origtexture,
                        SizedInternalFormat internalformat, GLuint minlevel,
                        GLuint numlevels, GLuint minlayer, GLuint numlayers) const
{
    static const char *fnName = "glTextureView";

    beforeCommand(fnName, _api.glTextureView);
    _api.glTextureView(texture.ID, toScalar(target), origtexture.ID,
                       toScalar(internalformat), minlevel, numlevels, minlayer,
                       numlayers);
    afterCommand(fnName);
}

// Calls glVertexAttribBinding().
void GLAPI::vertexAttribBinding(GLuint attribindex, GLuint bindingindex) const
{
    static const char *fnName = "glVertexAttribBinding";

    beforeCommand(fnName, _api.glVertexAttribBinding);
    _api.glVertexAttribBinding(attribindex, bindingindex);
    afterCommand(fnName);
}

// Calls glVertexAttribFormat().
void GLAPI::vertexAttribFormat(GLuint attribindex, GLint size,
                               VertexAttribType type, Boolean normalized,
                               GLuint relativeoffset) const
{
    static const char *fnName = "glVertexAttribFormat";

    beforeCommand(fnName, _api.glVertexAttribFormat);
    _api.glVertexAttribFormat(attribindex, size, toScalar(type),
                              toScalar(normalized), relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexAttribIFormat().
void GLAPI::vertexAttribIFormat(GLuint attribindex, GLint size,
                                VertexAttribIType type, GLuint relativeoffset) const
{
    static const char *fnName = "glVertexAttribIFormat";

    beforeCommand(fnName, _api.glVertexAttribIFormat);
    _api.glVertexAttribIFormat(attribindex, size, toScalar(type), relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexAttribLFormat().
void GLAPI::vertexAttribLFormat(GLuint attribindex, GLint size,
                                VertexAttribLType type, GLuint relativeoffset) const
{
    static const char *fnName = "glVertexAttribLFormat";

    beforeCommand(fnName, _api.glVertexAttribLFormat);
    _api.glVertexAttribLFormat(attribindex, size, toScalar(type), relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexBindingDivisor().
void GLAPI::vertexBindingDivisor(GLuint bindingindex, GLuint divisor) const
{
    static const char *fnName = "glVertexBindingDivisor";

    beforeCommand(fnName, _api.glVertexBindingDivisor);
    _api.glVertexBindingDivisor(bindingindex, divisor);
    afterCommand(fnName);
}

// Calls glBindBuffersBase().
void GLAPI::bindBuffersBase(BufferTarget target, GLuint first, GLsizei count,
                            const BufferName *buffers) const
{
    static const char *fnName = "glBindBuffersBase";

    beforeCommand(fnName, _api.glBindBuffersBase);
    _api.glBindBuffersBase(toScalar(target), first, count,
                           reinterpret_cast<const GLuint *>(buffers));
    afterCommand(fnName);
}

// Calls glBindBuffersRange().
void GLAPI::bindBuffersRange(BufferTarget target, GLuint first, GLsizei count,
                             const BufferName *buffers, const GLintptr *offsets,
                             const GLsizeiptr *sizes) const
{
    static const char *fnName = "glBindBuffersRange";

    beforeCommand(fnName, _api.glBindBuffersRange);
    _api.glBindBuffersRange(toScalar(target), first, count,
                            reinterpret_cast<const GLuint *>(buffers), offsets,
                            sizes);
    afterCommand(fnName);
}

// Calls glBindImageTextures().
void GLAPI::bindImageTextures(GLuint first, GLsizei count,
                              const TextureName *textures) const
{
    static const char *fnName = "glBindImageTextures";

    beforeCommand(fnName, _api.glBindImageTextures);
    _api.glBindImageTextures(first, count,
                             reinterpret_cast<const GLuint *>(textures));
    afterCommand(fnName);
}

// Calls glBindSamplers().
void GLAPI::bindSamplers(GLuint first, GLsizei count,
                         const SamplerName *samplers) const
{
    static const char *fnName = "glBindSamplers";

    beforeCommand(fnName, _api.glBindSamplers);
    _api.glBindSamplers(first, count, reinterpret_cast<const GLuint *>(samplers));
    afterCommand(fnName);
}

// Calls glBindTextures().
void GLAPI::bindTextures(GLuint first, GLsizei count,
                         const TextureName *textures) const
{
    static const char *fnName = "glBindTextures";

    beforeCommand(fnName, _api.glBindTextures);
    _api.glBindTextures(first, count, reinterpret_cast<const GLuint *>(textures));
    afterCommand(fnName);
}

// Calls glBindVertexBuffers().
void GLAPI::bindVertexBuffers(GLuint first, GLsizei count,
                              const BufferName *buffers, const GLintptr *offsets,
                              const GLsizei *strides) const
{
    static const char *fnName = "glBindVertexBuffers";

    beforeCommand(fnName, _api.glBindVertexBuffers);
    _api.glBindVertexBuffers(first, count,
                             reinterpret_cast<const GLuint *>(buffers), offsets,
                             strides);
    afterCommand(fnName);
}

// Calls glBufferStorage().
void GLAPI::bufferStorage(BufferStorageTarget target, GLsizeiptr size,
                          const void *data,
                          GLbitfield  /* BufferStorageMask */ flags) const
{
    static const char *fnName = "glBufferStorage";

    beforeCommand(fnName, _api.glBufferStorage);
    _api.glBufferStorage(toScalar(target), size, data, flags);
    afterCommand(fnName);
}

// Calls glClearTexImage().
void GLAPI::clearTexImage(TextureName texture, GLint level, PixelFormat format,
                          PixelType type, const void *data) const
{
    static const char *fnName = "glClearTexImage";

    beforeCommand(fnName, _api.glClearTexImage);
    _api.glClearTexImage(texture.ID, level, toScalar(format), toScalar(type),
                         data);
    afterCommand(fnName);
}

// Calls glClearTexSubImage().
void GLAPI::clearTexSubImage(TextureName texture, GLint level, GLint xoffset,
                             GLint yoffset, GLint zoffset, GLsizei width,
                             GLsizei height, GLsizei depth, PixelFormat format,
                             PixelType type, const void *data) const
{
    static const char *fnName = "glClearTexSubImage";

    beforeCommand(fnName, _api.glClearTexSubImage);
    _api.glClearTexSubImage(texture.ID, level, xoffset, yoffset, zoffset, width,
                            height, depth, toScalar(format), toScalar(type),
                            data);
    afterCommand(fnName);
}

// Calls glBindTextureUnit().
void GLAPI::bindTextureUnit(GLuint unit, TextureName texture) const
{
    static const char *fnName = "glBindTextureUnit";

    beforeCommand(fnName, _api.glBindTextureUnit);
    _api.glBindTextureUnit(unit, texture.ID);
    afterCommand(fnName);
}

// Calls glBlitNamedFramebuffer().
void GLAPI::blitNamedFramebuffer(FrameBufferName readFramebuffer,
                                 FrameBufferName drawFramebuffer, GLint srcX0,
                                 GLint srcY0, GLint srcX1, GLint srcY1,
                                 GLint dstX0, GLint dstY0, GLint dstX1,
                                 GLint dstY1,
                                 GLbitfield  /* ClearBufferMask */ mask,
                                 BlitFramebufferFilter filter) const
{
    static const char *fnName = "glBlitNamedFramebuffer";

    beforeCommand(fnName, _api.glBlitNamedFramebuffer);
    _api.glBlitNamedFramebuffer(readFramebuffer.ID, drawFramebuffer.ID, srcX0,
                                srcY0, srcX1, srcY1, dstX0, dstY0, dstX1, dstY1,
                                mask, toScalar(filter));
    afterCommand(fnName);
}

// Calls glCheckNamedFramebufferStatus().
FramebufferStatus GLAPI::checkNamedFramebufferStatus(FrameBufferName framebuffer,
                                                     FramebufferTarget target) const
{
    static const char *fnName = "glCheckNamedFramebufferStatus";

    beforeCommand(fnName, _api.glCheckNamedFramebufferStatus);
    GLenum result = _api.glCheckNamedFramebufferStatus(framebuffer.ID,
                                                       toScalar(target));
    afterCommand(fnName);

    return static_cast<FramebufferStatus>(result);
}

// Calls glClearNamedBufferData().
void GLAPI::clearNamedBufferData(BufferName buffer,
                                 SizedInternalFormat internalformat,
                                 PixelFormat format, PixelType type,
                                 const void *data) const
{
    static const char *fnName = "glClearNamedBufferData";

    beforeCommand(fnName, _api.glClearNamedBufferData);
    _api.glClearNamedBufferData(buffer.ID, toScalar(internalformat),
                                toScalar(format), toScalar(type), data);
    afterCommand(fnName);
}

// Calls glClearNamedBufferSubData().
void GLAPI::clearNamedBufferSubData(BufferName buffer,
                                    SizedInternalFormat internalformat,
                                    GLintptr offset, GLsizeiptr size,
                                    PixelFormat format, PixelType type,
                                    const void *data) const
{
    static const char *fnName = "glClearNamedBufferSubData";

    beforeCommand(fnName, _api.glClearNamedBufferSubData);
    _api.glClearNamedBufferSubData(buffer.ID, toScalar(internalformat), offset,
                                   size, toScalar(format), toScalar(type), data);
    afterCommand(fnName);
}

// Calls glClearNamedFramebufferfi().
void GLAPI::clearNamedFramebufferFI(FrameBufferName framebuffer,
                                    BufferEnum buffer, GLint drawbuffer,
                                    GLfloat depth, GLint stencil) const
{
    static const char *fnName = "glClearNamedFramebufferfi";

    beforeCommand(fnName, _api.glClearNamedFramebufferfi);
    _api.glClearNamedFramebufferfi(framebuffer.ID, toScalar(buffer), drawbuffer,
                                   depth, stencil);
    afterCommand(fnName);
}

// Calls glClearNamedFramebufferfv().
void GLAPI::clearNamedFramebufferFV(FrameBufferName framebuffer,
                                    BufferEnum buffer, GLint drawbuffer,
                                    const GLfloat *value) const
{
    static const char *fnName = "glClearNamedFramebufferfv";

    beforeCommand(fnName, _api.glClearNamedFramebufferfv);
    _api.glClearNamedFramebufferfv(framebuffer.ID, toScalar(buffer), drawbuffer,
                                   value);
    afterCommand(fnName);
}

// Calls glClearNamedFramebufferiv().
void GLAPI::clearNamedFramebufferIV(FrameBufferName framebuffer,
                                    BufferEnum buffer, GLint drawbuffer,
                                    const GLint *value) const
{
    static const char *fnName = "glClearNamedFramebufferiv";

    beforeCommand(fnName, _api.glClearNamedFramebufferiv);
    _api.glClearNamedFramebufferiv(framebuffer.ID, toScalar(buffer), drawbuffer,
                                   value);
    afterCommand(fnName);
}

// Calls glClearNamedFramebufferuiv().
void GLAPI::clearNamedFramebufferUIV(FrameBufferName framebuffer,
                                     BufferEnum buffer, GLint drawbuffer,
                                     const GLuint *value) const
{
    static const char *fnName = "glClearNamedFramebufferuiv";

    beforeCommand(fnName, _api.glClearNamedFramebufferuiv);
    _api.glClearNamedFramebufferuiv(framebuffer.ID, toScalar(buffer), drawbuffer,
                                    value);
    afterCommand(fnName);
}

// Calls glClipControl().
void GLAPI::clipControl(ClipControlOrigin origin, ClipControlDepth depth) const
{
    static const char *fnName = "glClipControl";

    beforeCommand(fnName, _api.glClipControl);
    _api.glClipControl(toScalar(origin), toScalar(depth));
    afterCommand(fnName);
}

// Calls glCompressedTextureSubImage1D().
void GLAPI::compressedTextureSubImage1D(TextureName texture, GLint level,
                                        GLint xoffset, GLsizei width,
                                        InternalFormat format, GLsizei imageSize,
                                        const void *data) const
{
    static const char *fnName = "glCompressedTextureSubImage1D";

    beforeCommand(fnName, _api.glCompressedTextureSubImage1D);
    _api.glCompressedTextureSubImage1D(texture.ID, level, xoffset, width,
                                       toScalar(format), imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTextureSubImage2D().
void GLAPI::compressedTextureSubImage2D(TextureName texture, GLint level,
                                        GLint xoffset, GLint yoffset,
                                        GLsizei width, GLsizei height,
                                        InternalFormat format, GLsizei imageSize,
                                        const void *data) const
{
    static const char *fnName = "glCompressedTextureSubImage2D";

    beforeCommand(fnName, _api.glCompressedTextureSubImage2D);
    _api.glCompressedTextureSubImage2D(texture.ID, level, xoffset, yoffset,
                                       width, height, toScalar(format),
                                       imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTextureSubImage3D().
void GLAPI::compressedTextureSubImage3D(TextureName texture, GLint level,
                                        GLint xoffset, GLint yoffset,
                                        GLint zoffset, GLsizei width,
                                        GLsizei height, GLsizei depth,
                                        InternalFormat format, GLsizei imageSize,
                                        const void *data) const
{
    static const char *fnName = "glCompressedTextureSubImage3D";

    beforeCommand(fnName, _api.glCompressedTextureSubImage3D);
    _api.glCompressedTextureSubImage3D(texture.ID, level, xoffset, yoffset,
                                       zoffset, width, height, depth,
                                       toScalar(format), imageSize, data);
    afterCommand(fnName);
}

// Calls glCopyNamedBufferSubData().
void GLAPI::copyNamedBufferSubData(BufferName readBuffer, BufferName writeBuffer,
                                   GLintptr readOffset, GLintptr writeOffset,
                                   GLsizeiptr size) const
{
    static const char *fnName = "glCopyNamedBufferSubData";

    beforeCommand(fnName, _api.glCopyNamedBufferSubData);
    _api.glCopyNamedBufferSubData(readBuffer.ID, writeBuffer.ID, readOffset,
                                  writeOffset, size);
    afterCommand(fnName);
}

// Calls glCopyTextureSubImage1D().
void GLAPI::copyTextureSubImage1D(TextureName texture, GLint level,
                                  GLint xoffset, GLint x, GLint y, GLsizei width) const
{
    static const char *fnName = "glCopyTextureSubImage1D";

    beforeCommand(fnName, _api.glCopyTextureSubImage1D);
    _api.glCopyTextureSubImage1D(texture.ID, level, xoffset, x, y, width);
    afterCommand(fnName);
}

// Calls glCopyTextureSubImage2D().
void GLAPI::copyTextureSubImage2D(TextureName texture, GLint level,
                                  GLint xoffset, GLint yoffset, GLint x, GLint y,
                                  GLsizei width, GLsizei height) const
{
    static const char *fnName = "glCopyTextureSubImage2D";

    beforeCommand(fnName, _api.glCopyTextureSubImage2D);
    _api.glCopyTextureSubImage2D(texture.ID, level, xoffset, yoffset, x, y,
                                 width, height);
    afterCommand(fnName);
}

// Calls glCopyTextureSubImage3D().
void GLAPI::copyTextureSubImage3D(TextureName texture, GLint level,
                                  GLint xoffset, GLint yoffset, GLint zoffset,
                                  GLint x, GLint y, GLsizei width,
                                  GLsizei height) const
{
    static const char *fnName = "glCopyTextureSubImage3D";

    beforeCommand(fnName, _api.glCopyTextureSubImage3D);
    _api.glCopyTextureSubImage3D(texture.ID, level, xoffset, yoffset, zoffset, x,
                                 y, width, height);
    afterCommand(fnName);
}

// Calls glCreateBuffers().
void GLAPI::createBuffers(GLsizei n, BufferName *buffers) const
{
    static const char *fnName = "glCreateBuffers";

    beforeCommand(fnName, _api.glCreateBuffers);
    _api.glCreateBuffers(n, reinterpret_cast<GLuint *>(buffers));
    afterCommand(fnName);
}

// Calls glCreateFramebuffers().
void GLAPI::createFramebuffers(GLsizei n, FrameBufferName *framebuffers) const
{
    static const char *fnName = "glCreateFramebuffers";

    beforeCommand(fnName, _api.glCreateFramebuffers);
    _api.glCreateFramebuffers(n, reinterpret_cast<GLuint *>(framebuffers));
    afterCommand(fnName);
}

// Calls glCreateProgramPipelines().
void GLAPI::createProgramPipelines(GLsizei n, ProgramPipelineName *pipelines) const
{
    static const char *fnName = "glCreateProgramPipelines";

    beforeCommand(fnName, _api.glCreateProgramPipelines);
    _api.glCreateProgramPipelines(n, reinterpret_cast<GLuint *>(pipelines));
    afterCommand(fnName);
}

// Calls glCreateQueries().
void GLAPI::createQueries(QueryTarget target, GLsizei n, QueryName *ids) const
{
    static const char *fnName = "glCreateQueries";

    beforeCommand(fnName, _api.glCreateQueries);
    _api.glCreateQueries(toScalar(target), n, reinterpret_cast<GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glCreateRenderbuffers().
void GLAPI::createRenderbuffers(GLsizei n, RenderBufferName *renderbuffers) const
{
    static const char *fnName = "glCreateRenderbuffers";

    beforeCommand(fnName, _api.glCreateRenderbuffers);
    _api.glCreateRenderbuffers(n, reinterpret_cast<GLuint *>(renderbuffers));
    afterCommand(fnName);
}

// Calls glCreateSamplers().
void GLAPI::createSamplers(GLsizei n, SamplerName *samplers) const
{
    static const char *fnName = "glCreateSamplers";

    beforeCommand(fnName, _api.glCreateSamplers);
    _api.glCreateSamplers(n, reinterpret_cast<GLuint *>(samplers));
    afterCommand(fnName);
}

// Calls glCreateTextures().
void GLAPI::createTextures(TextureTarget target, GLsizei n,
                           TextureName *textures) const
{
    static const char *fnName = "glCreateTextures";

    beforeCommand(fnName, _api.glCreateTextures);
    _api.glCreateTextures(toScalar(target), n,
                          reinterpret_cast<GLuint *>(textures));
    afterCommand(fnName);
}

// Calls glCreateTransformFeedbacks().
void GLAPI::createTransformFeedbacks(GLsizei n, TransformFeedbackName *ids) const
{
    static const char *fnName = "glCreateTransformFeedbacks";

    beforeCommand(fnName, _api.glCreateTransformFeedbacks);
    _api.glCreateTransformFeedbacks(n, reinterpret_cast<GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glCreateVertexArrays().
void GLAPI::createVertexArrays(GLsizei n, VertexArrayName *arrays) const
{
    static const char *fnName = "glCreateVertexArrays";

    beforeCommand(fnName, _api.glCreateVertexArrays);
    _api.glCreateVertexArrays(n, reinterpret_cast<GLuint *>(arrays));
    afterCommand(fnName);
}

// Calls glDisableVertexArrayAttrib().
void GLAPI::disableVertexArrayAttrib(VertexArrayName vaobj, GLuint index) const
{
    static const char *fnName = "glDisableVertexArrayAttrib";

    beforeCommand(fnName, _api.glDisableVertexArrayAttrib);
    _api.glDisableVertexArrayAttrib(vaobj.ID, index);
    afterCommand(fnName);
}

// Calls glEnableVertexArrayAttrib().
void GLAPI::enableVertexArrayAttrib(VertexArrayName vaobj, GLuint index) const
{
    static const char *fnName = "glEnableVertexArrayAttrib";

    beforeCommand(fnName, _api.glEnableVertexArrayAttrib);
    _api.glEnableVertexArrayAttrib(vaobj.ID, index);
    afterCommand(fnName);
}

// Calls glFlushMappedNamedBufferRange().
void GLAPI::flushMappedNamedBufferRange(BufferName buffer, GLintptr offset,
                                        GLsizeiptr length) const
{
    static const char *fnName = "glFlushMappedNamedBufferRange";

    beforeCommand(fnName, _api.glFlushMappedNamedBufferRange);
    _api.glFlushMappedNamedBufferRange(buffer.ID, offset, length);
    afterCommand(fnName);
}

// Calls glGenerateTextureMipmap().
void GLAPI::generateTextureMipmap(TextureName texture) const
{
    static const char *fnName = "glGenerateTextureMipmap";

    beforeCommand(fnName, _api.glGenerateTextureMipmap);
    _api.glGenerateTextureMipmap(texture.ID);
    afterCommand(fnName);
}

// Calls glGetCompressedTextureImage().
void GLAPI::getCompressedTextureImage(TextureName texture, GLint level,
                                      GLsizei bufSize, void *pixels) const
{
    static const char *fnName = "glGetCompressedTextureImage";

    beforeCommand(fnName, _api.glGetCompressedTextureImage);
    _api.glGetCompressedTextureImage(texture.ID, level, bufSize, pixels);
    afterCommand(fnName);
}

// Calls glGetCompressedTextureSubImage().
void GLAPI::getCompressedTextureSubImage(TextureName texture, GLint level,
                                         GLint xoffset, GLint yoffset,
                                         GLint zoffset, GLsizei width,
                                         GLsizei height, GLsizei depth,
                                         GLsizei bufSize, void *pixels) const
{
    static const char *fnName = "glGetCompressedTextureSubImage";

    beforeCommand(fnName, _api.glGetCompressedTextureSubImage);
    _api.glGetCompressedTextureSubImage(texture.ID, level, xoffset, yoffset,
                                        zoffset, width, height, depth, bufSize,
                                        pixels);
    afterCommand(fnName);
}

// Calls glGetGraphicsResetStatus().
GraphicsResetStatus GLAPI::getGraphicsResetStatus() const
{
    static const char *fnName = "glGetGraphicsResetStatus";

    beforeCommand(fnName, _api.glGetGraphicsResetStatus);
    GLenum result = _api.glGetGraphicsResetStatus();
    afterCommand(fnName);

    return static_cast<GraphicsResetStatus>(result);
}

// Calls glGetNamedBufferParameteri64v().
void GLAPI::getNamedBufferParameterI64V(BufferName buffer, BufferPNameARB pname,
                                        GLint64 *params) const
{
    static const char *fnName = "glGetNamedBufferParameteri64v";

    beforeCommand(fnName, _api.glGetNamedBufferParameteri64v);
    _api.glGetNamedBufferParameteri64v(buffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetNamedBufferParameteriv().
void GLAPI::getNamedBufferParameterIV(BufferName buffer, BufferPNameARB pname,
                                      GLint *params) const
{
    static const char *fnName = "glGetNamedBufferParameteriv";

    beforeCommand(fnName, _api.glGetNamedBufferParameteriv);
    _api.glGetNamedBufferParameteriv(buffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetNamedBufferPointerv().
void GLAPI::getNamedBufferPointerV(BufferName buffer, BufferPointerNameARB pname,
                                   void **params) const
{
    static const char *fnName = "glGetNamedBufferPointerv";

    beforeCommand(fnName, _api.glGetNamedBufferPointerv);
    _api.glGetNamedBufferPointerv(buffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetNamedBufferSubData().
void GLAPI::getNamedBufferSubData(BufferName buffer, GLintptr offset,
                                  GLsizeiptr size, void *data) const
{
    static const char *fnName = "glGetNamedBufferSubData";

    beforeCommand(fnName, _api.glGetNamedBufferSubData);
    _api.glGetNamedBufferSubData(buffer.ID, offset, size, data);
    afterCommand(fnName);
}

// Calls glGetNamedFramebufferAttachmentParameteriv().
void GLAPI::getNamedFramebufferAttachmentParameterIV(FrameBufferName framebuffer,
                                                     FramebufferAttachment attachment,
                                                     FramebufferAttachmentParameterName pname,
                                                     GLint *params) const
{
    static const char *fnName = "glGetNamedFramebufferAttachmentParameteriv";

    beforeCommand(fnName, _api.glGetNamedFramebufferAttachmentParameteriv);
    _api.glGetNamedFramebufferAttachmentParameteriv(framebuffer.ID,
                                                    toScalar(attachment),
                                                    toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetNamedFramebufferParameteriv().
void GLAPI::getNamedFramebufferParameterIV(FrameBufferName framebuffer,
                                           GetFramebufferParameter pname,
                                           GLint *param) const
{
    static const char *fnName = "glGetNamedFramebufferParameteriv";

    beforeCommand(fnName, _api.glGetNamedFramebufferParameteriv);
    _api.glGetNamedFramebufferParameteriv(framebuffer.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetNamedRenderbufferParameteriv().
void GLAPI::getNamedRenderbufferParameterIV(RenderBufferName renderbuffer,
                                            RenderBufferParameterName pname,
                                            GLint *params) const
{
    static const char *fnName = "glGetNamedRenderbufferParameteriv";

    beforeCommand(fnName, _api.glGetNamedRenderbufferParameteriv);
    _api.glGetNamedRenderbufferParameteriv(renderbuffer.ID, toScalar(pname),
                                           params);
    afterCommand(fnName);
}

// Calls glGetQueryBufferObjecti64v().
void GLAPI::getQueryBufferObjectI64V(QueryName id, BufferName buffer,
                                     QueryObjectParameterName pname,
                                     GLintptr offset) const
{
    static const char *fnName = "glGetQueryBufferObjecti64v";

    beforeCommand(fnName, _api.glGetQueryBufferObjecti64v);
    _api.glGetQueryBufferObjecti64v(id.ID, buffer.ID, toScalar(pname), offset);
    afterCommand(fnName);
}

// Calls glGetQueryBufferObjectiv().
void GLAPI::getQueryBufferObjectIV(QueryName id, BufferName buffer,
                                   QueryObjectParameterName pname,
                                   GLintptr offset) const
{
    static const char *fnName = "glGetQueryBufferObjectiv";

    beforeCommand(fnName, _api.glGetQueryBufferObjectiv);
    _api.glGetQueryBufferObjectiv(id.ID, buffer.ID, toScalar(pname), offset);
    afterCommand(fnName);
}

// Calls glGetQueryBufferObjectui64v().
void GLAPI::getQueryBufferObjectUI64(QueryName id, BufferName buffer,
                                     QueryObjectParameterName pname,
                                     GLintptr offset) const
{
    static const char *fnName = "glGetQueryBufferObjectui64v";

    beforeCommand(fnName, _api.glGetQueryBufferObjectui64v);
    _api.glGetQueryBufferObjectui64v(id.ID, buffer.ID, toScalar(pname), offset);
    afterCommand(fnName);
}

// Calls glGetQueryBufferObjectuiv().
void GLAPI::getQueryBufferObjectUIV(QueryName id, BufferName buffer,
                                    QueryObjectParameterName pname,
                                    GLintptr offset) const
{
    static const char *fnName = "glGetQueryBufferObjectuiv";

    beforeCommand(fnName, _api.glGetQueryBufferObjectuiv);
    _api.glGetQueryBufferObjectuiv(id.ID, buffer.ID, toScalar(pname), offset);
    afterCommand(fnName);
}

// Calls glGetTextureImage().
void GLAPI::getTextureImage(TextureName texture, GLint level, PixelFormat format,
                            PixelType type, GLsizei bufSize, void *pixels) const
{
    static const char *fnName = "glGetTextureImage";

    beforeCommand(fnName, _api.glGetTextureImage);
    _api.glGetTextureImage(texture.ID, level, toScalar(format), toScalar(type),
                           bufSize, pixels);
    afterCommand(fnName);
}

// Calls glGetTextureLevelParameterfv().
void GLAPI::getTextureLevelParameterFV(TextureName texture, GLint level,
                                       GetTextureParameter pname,
                                       GLfloat *params) const
{
    static const char *fnName = "glGetTextureLevelParameterfv";

    beforeCommand(fnName, _api.glGetTextureLevelParameterfv);
    _api.glGetTextureLevelParameterfv(texture.ID, level, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTextureLevelParameteriv().
void GLAPI::getTextureLevelParameterIV(TextureName texture, GLint level,
                                       GetTextureParameter pname, GLint *params) const
{
    static const char *fnName = "glGetTextureLevelParameteriv";

    beforeCommand(fnName, _api.glGetTextureLevelParameteriv);
    _api.glGetTextureLevelParameteriv(texture.ID, level, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTextureParameterIiv().
void GLAPI::getTextureParameterIIV(TextureName texture,
                                   GetTextureParameter pname, GLint *params) const
{
    static const char *fnName = "glGetTextureParameterIiv";

    beforeCommand(fnName, _api.glGetTextureParameterIiv);
    _api.glGetTextureParameterIiv(texture.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTextureParameterIuiv().
void GLAPI::getTextureParameterIUIV(TextureName texture,
                                    GetTextureParameter pname, GLuint *params) const
{
    static const char *fnName = "glGetTextureParameterIuiv";

    beforeCommand(fnName, _api.glGetTextureParameterIuiv);
    _api.glGetTextureParameterIuiv(texture.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTextureParameterfv().
void GLAPI::getTextureParameterFV(TextureName texture, GetTextureParameter pname,
                                  GLfloat *params) const
{
    static const char *fnName = "glGetTextureParameterfv";

    beforeCommand(fnName, _api.glGetTextureParameterfv);
    _api.glGetTextureParameterfv(texture.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTextureParameteriv().
void GLAPI::getTextureParameterIV(TextureName texture, GetTextureParameter pname,
                                  GLint *params) const
{
    static const char *fnName = "glGetTextureParameteriv";

    beforeCommand(fnName, _api.glGetTextureParameteriv);
    _api.glGetTextureParameteriv(texture.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTextureSubImage().
void GLAPI::getTextureSubImage(TextureName texture, GLint level, GLint xoffset,
                               GLint yoffset, GLint zoffset, GLsizei width,
                               GLsizei height, GLsizei depth, PixelFormat format,
                               PixelType type, GLsizei bufSize, void *pixels) const
{
    static const char *fnName = "glGetTextureSubImage";

    beforeCommand(fnName, _api.glGetTextureSubImage);
    _api.glGetTextureSubImage(texture.ID, level, xoffset, yoffset, zoffset,
                              width, height, depth, toScalar(format),
                              toScalar(type), bufSize, pixels);
    afterCommand(fnName);
}

// Calls glGetTransformFeedbacki64_v().
void GLAPI::getTransformFeedbackI64(TransformFeedbackName xfb,
                                    TransformFeedbackPName pname, GLuint index,
                                    GLint64 *param) const
{
    static const char *fnName = "glGetTransformFeedbacki64_v";

    beforeCommand(fnName, _api.glGetTransformFeedbacki64_v);
    _api.glGetTransformFeedbacki64_v(xfb.ID, toScalar(pname), index, param);
    afterCommand(fnName);
}

// Calls glGetTransformFeedbacki_v().
void GLAPI::getTransformFeedbackIV(TransformFeedbackName xfb,
                                   TransformFeedbackPName pname, GLuint index,
                                   GLint *param) const
{
    static const char *fnName = "glGetTransformFeedbacki_v";

    beforeCommand(fnName, _api.glGetTransformFeedbacki_v);
    _api.glGetTransformFeedbacki_v(xfb.ID, toScalar(pname), index, param);
    afterCommand(fnName);
}

// Calls glGetTransformFeedbackiv().
void GLAPI::getTransformFeedbackIV(TransformFeedbackName xfb,
                                   TransformFeedbackPName pname, GLint *param) const
{
    static const char *fnName = "glGetTransformFeedbackiv";

    beforeCommand(fnName, _api.glGetTransformFeedbackiv);
    _api.glGetTransformFeedbackiv(xfb.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetVertexArrayIndexed64iv().
void GLAPI::getVertexArrayIndexed64IV(VertexArrayName vaobj, GLuint index,
                                      VertexArrayPName pname, GLint64 *param) const
{
    static const char *fnName = "glGetVertexArrayIndexed64iv";

    beforeCommand(fnName, _api.glGetVertexArrayIndexed64iv);
    _api.glGetVertexArrayIndexed64iv(vaobj.ID, index, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetVertexArrayIndexediv().
void GLAPI::getVertexArrayIndexedIV(VertexArrayName vaobj, GLuint index,
                                    VertexArrayPName pname, GLint *param) const
{
    static const char *fnName = "glGetVertexArrayIndexediv";

    beforeCommand(fnName, _api.glGetVertexArrayIndexediv);
    _api.glGetVertexArrayIndexediv(vaobj.ID, index, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetVertexArrayiv().
void GLAPI::getVertexArrayIV(VertexArrayName vaobj, VertexArrayPName pname,
                             GLint *param) const
{
    static const char *fnName = "glGetVertexArrayiv";

    beforeCommand(fnName, _api.glGetVertexArrayiv);
    _api.glGetVertexArrayiv(vaobj.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetnCompressedTexImage().
void GLAPI::getnCompressedTexImage(TextureTarget target, GLint lod,
                                   GLsizei bufSize, void *pixels) const
{
    static const char *fnName = "glGetnCompressedTexImage";

    beforeCommand(fnName, _api.glGetnCompressedTexImage);
    _api.glGetnCompressedTexImage(toScalar(target), lod, bufSize, pixels);
    afterCommand(fnName);
}

// Calls glGetnTexImage().
void GLAPI::getnTexImage(TextureTarget target, GLint level, PixelFormat format,
                         PixelType type, GLsizei bufSize, void *pixels) const
{
    static const char *fnName = "glGetnTexImage";

    beforeCommand(fnName, _api.glGetnTexImage);
    _api.glGetnTexImage(toScalar(target), level, toScalar(format),
                        toScalar(type), bufSize, pixels);
    afterCommand(fnName);
}

// Calls glGetnUniformdv().
void GLAPI::getnUniformDV(ProgramName program, GLint location, GLsizei bufSize,
                          GLdouble *params) const
{
    static const char *fnName = "glGetnUniformdv";

    beforeCommand(fnName, _api.glGetnUniformdv);
    _api.glGetnUniformdv(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glGetnUniformfv().
void GLAPI::getnUniformFV(ProgramName program, GLint location, GLsizei bufSize,
                          GLfloat *params) const
{
    static const char *fnName = "glGetnUniformfv";

    beforeCommand(fnName, _api.glGetnUniformfv);
    _api.glGetnUniformfv(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glGetnUniformiv().
void GLAPI::getnUniformIV(ProgramName program, GLint location, GLsizei bufSize,
                          GLint *params) const
{
    static const char *fnName = "glGetnUniformiv";

    beforeCommand(fnName, _api.glGetnUniformiv);
    _api.glGetnUniformiv(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glGetnUniformuiv().
void GLAPI::getnUniformUIV(ProgramName program, GLint location, GLsizei bufSize,
                           GLuint *params) const
{
    static const char *fnName = "glGetnUniformuiv";

    beforeCommand(fnName, _api.glGetnUniformuiv);
    _api.glGetnUniformuiv(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glInvalidateNamedFramebufferData().
void GLAPI::invalidateNamedFramebufferData(FrameBufferName framebuffer,
                                           GLsizei numAttachments,
                                           const FramebufferAttachment *attachments) const
{
    static const char *fnName = "glInvalidateNamedFramebufferData";

    beforeCommand(fnName, _api.glInvalidateNamedFramebufferData);
    _api.glInvalidateNamedFramebufferData(framebuffer.ID, numAttachments,
                                          toScalarPtr(attachments));
    afterCommand(fnName);
}

// Calls glInvalidateNamedFramebufferSubData().
void GLAPI::invalidateNamedFramebufferSubData(FrameBufferName framebuffer,
                                              GLsizei numAttachments,
                                              const FramebufferAttachment *attachments,
                                              GLint x, GLint y, GLsizei width,
                                              GLsizei height) const
{
    static const char *fnName = "glInvalidateNamedFramebufferSubData";

    beforeCommand(fnName, _api.glInvalidateNamedFramebufferSubData);
    _api.glInvalidateNamedFramebufferSubData(framebuffer.ID, numAttachments,
                                             toScalarPtr(attachments), x, y,
                                             width, height);
    afterCommand(fnName);
}

// Calls glMapNamedBuffer().
void *GLAPI::mapNamedBuffer(BufferName buffer, BufferAccessARB access) const
{
    static const char *fnName = "glMapNamedBuffer";

    beforeCommand(fnName, _api.glMapNamedBuffer);
    void *result = _api.glMapNamedBuffer(buffer.ID, toScalar(access));
    afterCommand(fnName);

    return result;
}

// Calls glMapNamedBufferRange().
void *GLAPI::mapNamedBufferRange(BufferName buffer, GLintptr offset,
                                 GLsizeiptr length,
                                 GLbitfield  /* MapBufferAccessMask */ access) const
{
    static const char *fnName = "glMapNamedBufferRange";

    beforeCommand(fnName, _api.glMapNamedBufferRange);
    void *result = _api.glMapNamedBufferRange(buffer.ID, offset, length, access);
    afterCommand(fnName);

    return result;
}

// Calls glMemoryBarrierByRegion().
void GLAPI::memoryBarrierByRegion(GLbitfield  /* MemoryBarrierMask */ barriers) const
{
    static const char *fnName = "glMemoryBarrierByRegion";

    beforeCommand(fnName, _api.glMemoryBarrierByRegion);
    _api.glMemoryBarrierByRegion(barriers);
    afterCommand(fnName);
}

// Calls glNamedBufferData().
void GLAPI::namedBufferData(BufferName buffer, GLsizeiptr size, const void *data,
                            VertexBufferObjectUsage usage) const
{
    static const char *fnName = "glNamedBufferData";

    beforeCommand(fnName, _api.glNamedBufferData);
    _api.glNamedBufferData(buffer.ID, size, data, toScalar(usage));
    afterCommand(fnName);
}

// Calls glNamedBufferStorage().
void GLAPI::namedBufferStorage(BufferName buffer, GLsizeiptr size,
                               const void *data,
                               GLbitfield  /* BufferStorageMask */ flags) const
{
    static const char *fnName = "glNamedBufferStorage";

    beforeCommand(fnName, _api.glNamedBufferStorage);
    _api.glNamedBufferStorage(buffer.ID, size, data, flags);
    afterCommand(fnName);
}

// Calls glNamedBufferSubData().
void GLAPI::namedBufferSubData(BufferName buffer, GLintptr offset,
                               GLsizeiptr size, const void *data) const
{
    static const char *fnName = "glNamedBufferSubData";

    beforeCommand(fnName, _api.glNamedBufferSubData);
    _api.glNamedBufferSubData(buffer.ID, offset, size, data);
    afterCommand(fnName);
}

// Calls glNamedFramebufferDrawBuffer().
void GLAPI::namedFramebufferDrawBuffer(FrameBufferName framebuffer,
                                       ColorBuffer buf) const
{
    static const char *fnName = "glNamedFramebufferDrawBuffer";

    beforeCommand(fnName, _api.glNamedFramebufferDrawBuffer);
    _api.glNamedFramebufferDrawBuffer(framebuffer.ID, toScalar(buf));
    afterCommand(fnName);
}

// Calls glNamedFramebufferDrawBuffers().
void GLAPI::namedFramebufferDrawBuffers(FrameBufferName framebuffer, GLsizei n,
                                        const ColorBuffer *bufs) const
{
    static const char *fnName = "glNamedFramebufferDrawBuffers";

    beforeCommand(fnName, _api.glNamedFramebufferDrawBuffers);
    _api.glNamedFramebufferDrawBuffers(framebuffer.ID, n, toScalarPtr(bufs));
    afterCommand(fnName);
}

// Calls glNamedFramebufferParameteri().
void GLAPI::namedFramebufferParameterI(FrameBufferName framebuffer,
                                       FramebufferParameterName pname,
                                       GLint param) const
{
    static const char *fnName = "glNamedFramebufferParameteri";

    beforeCommand(fnName, _api.glNamedFramebufferParameteri);
    _api.glNamedFramebufferParameteri(framebuffer.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glNamedFramebufferReadBuffer().
void GLAPI::namedFramebufferReadBuffer(FrameBufferName framebuffer,
                                       ColorBuffer src) const
{
    static const char *fnName = "glNamedFramebufferReadBuffer";

    beforeCommand(fnName, _api.glNamedFramebufferReadBuffer);
    _api.glNamedFramebufferReadBuffer(framebuffer.ID, toScalar(src));
    afterCommand(fnName);
}

// Calls glNamedFramebufferRenderbuffer().
void GLAPI::namedFramebufferRenderbuffer(FrameBufferName framebuffer,
                                         FramebufferAttachment attachment,
                                         RenderBufferTarget renderbuffertarget,
                                         RenderBufferName renderbuffer) const
{
    static const char *fnName = "glNamedFramebufferRenderbuffer";

    beforeCommand(fnName, _api.glNamedFramebufferRenderbuffer);
    _api.glNamedFramebufferRenderbuffer(framebuffer.ID, toScalar(attachment),
                                        toScalar(renderbuffertarget),
                                        renderbuffer.ID);
    afterCommand(fnName);
}

// Calls glNamedFramebufferTexture().
void GLAPI::namedFramebufferTexture(FrameBufferName framebuffer,
                                    FramebufferAttachment attachment,
                                    TextureName texture, GLint level) const
{
    static const char *fnName = "glNamedFramebufferTexture";

    beforeCommand(fnName, _api.glNamedFramebufferTexture);
    _api.glNamedFramebufferTexture(framebuffer.ID, toScalar(attachment),
                                   texture.ID, level);
    afterCommand(fnName);
}

// Calls glNamedFramebufferTextureLayer().
void GLAPI::namedFramebufferTextureLayer(FrameBufferName framebuffer,
                                         FramebufferAttachment attachment,
                                         TextureName texture, GLint level,
                                         GLint layer) const
{
    static const char *fnName = "glNamedFramebufferTextureLayer";

    beforeCommand(fnName, _api.glNamedFramebufferTextureLayer);
    _api.glNamedFramebufferTextureLayer(framebuffer.ID, toScalar(attachment),
                                        texture.ID, level, layer);
    afterCommand(fnName);
}

// Calls glNamedRenderbufferStorage().
void GLAPI::namedRenderbufferStorage(RenderBufferName renderbuffer,
                                     InternalFormat internalformat,
                                     GLsizei width, GLsizei height) const
{
    static const char *fnName = "glNamedRenderbufferStorage";

    beforeCommand(fnName, _api.glNamedRenderbufferStorage);
    _api.glNamedRenderbufferStorage(renderbuffer.ID, toScalar(internalformat),
                                    width, height);
    afterCommand(fnName);
}

// Calls glNamedRenderbufferStorageMultisample().
void GLAPI::namedRenderbufferStorageMultisample(RenderBufferName renderbuffer,
                                                GLsizei samples,
                                                InternalFormat internalformat,
                                                GLsizei width, GLsizei height) const
{
    static const char *fnName = "glNamedRenderbufferStorageMultisample";

    beforeCommand(fnName, _api.glNamedRenderbufferStorageMultisample);
    _api.glNamedRenderbufferStorageMultisample(renderbuffer.ID, samples,
                                               toScalar(internalformat), width,
                                               height);
    afterCommand(fnName);
}

// Calls glReadnPixels().
void GLAPI::readnPixels(GLint x, GLint y, GLsizei width, GLsizei height,
                        PixelFormat format, PixelType type, GLsizei bufSize,
                        void *data) const
{
    static const char *fnName = "glReadnPixels";

    beforeCommand(fnName, _api.glReadnPixels);
    _api.glReadnPixels(x, y, width, height, toScalar(format), toScalar(type),
                       bufSize, data);
    afterCommand(fnName);
}

// Calls glTextureBarrier().
void GLAPI::textureBarrier() const
{
    static const char *fnName = "glTextureBarrier";

    beforeCommand(fnName, _api.glTextureBarrier);
    _api.glTextureBarrier();
    afterCommand(fnName);
}

// Calls glTextureBuffer().
void GLAPI::textureBuffer(TextureName texture,
                          SizedInternalFormat internalformat, BufferName buffer) const
{
    static const char *fnName = "glTextureBuffer";

    beforeCommand(fnName, _api.glTextureBuffer);
    _api.glTextureBuffer(texture.ID, toScalar(internalformat), buffer.ID);
    afterCommand(fnName);
}

// Calls glTextureBufferRange().
void GLAPI::textureBufferRange(TextureName texture,
                               SizedInternalFormat internalformat,
                               BufferName buffer, GLintptr offset,
                               GLsizeiptr size) const
{
    static const char *fnName = "glTextureBufferRange";

    beforeCommand(fnName, _api.glTextureBufferRange);
    _api.glTextureBufferRange(texture.ID, toScalar(internalformat), buffer.ID,
                              offset, size);
    afterCommand(fnName);
}

// Calls glTextureParameterIiv().
void GLAPI::textureParameterIIV(TextureName texture, TextureParameterName pname,
                                const GLint *params) const
{
    static const char *fnName = "glTextureParameterIiv";

    beforeCommand(fnName, _api.glTextureParameterIiv);
    _api.glTextureParameterIiv(texture.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTextureParameterIuiv().
void GLAPI::textureParameterIUIV(TextureName texture, TextureParameterName pname,
                                 const GLuint *params) const
{
    static const char *fnName = "glTextureParameterIuiv";

    beforeCommand(fnName, _api.glTextureParameterIuiv);
    _api.glTextureParameterIuiv(texture.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTextureParameterf().
void GLAPI::textureParameterF(TextureName texture, TextureParameterName pname,
                              GLfloat param) const
{
    static const char *fnName = "glTextureParameterf";

    beforeCommand(fnName, _api.glTextureParameterf);
    _api.glTextureParameterf(texture.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTextureParameterfv().
void GLAPI::textureParameterFV(TextureName texture, TextureParameterName pname,
                               const GLfloat *param) const
{
    static const char *fnName = "glTextureParameterfv";

    beforeCommand(fnName, _api.glTextureParameterfv);
    _api.glTextureParameterfv(texture.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTextureParameteri().
void GLAPI::textureParameterI(TextureName texture, TextureParameterName pname,
                              GLint param) const
{
    static const char *fnName = "glTextureParameteri";

    beforeCommand(fnName, _api.glTextureParameteri);
    _api.glTextureParameteri(texture.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTextureParameteriv().
void GLAPI::textureParameterIV(TextureName texture, TextureParameterName pname,
                               const GLint *param) const
{
    static const char *fnName = "glTextureParameteriv";

    beforeCommand(fnName, _api.glTextureParameteriv);
    _api.glTextureParameteriv(texture.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTextureStorage1D().
void GLAPI::textureStorage1D(TextureName texture, GLsizei levels,
                             SizedInternalFormat internalformat, GLsizei width) const
{
    static const char *fnName = "glTextureStorage1D";

    beforeCommand(fnName, _api.glTextureStorage1D);
    _api.glTextureStorage1D(texture.ID, levels, toScalar(internalformat), width);
    afterCommand(fnName);
}

// Calls glTextureStorage2D().
void GLAPI::textureStorage2D(TextureName texture, GLsizei levels,
                             SizedInternalFormat internalformat, GLsizei width,
                             GLsizei height) const
{
    static const char *fnName = "glTextureStorage2D";

    beforeCommand(fnName, _api.glTextureStorage2D);
    _api.glTextureStorage2D(texture.ID, levels, toScalar(internalformat), width,
                            height);
    afterCommand(fnName);
}

// Calls glTextureStorage2DMultisample().
void GLAPI::textureStorage2DMultisample(TextureName texture, GLsizei samples,
                                        SizedInternalFormat internalformat,
                                        GLsizei width, GLsizei height,
                                        Boolean fixedsamplelocations) const
{
    static const char *fnName = "glTextureStorage2DMultisample";

    beforeCommand(fnName, _api.glTextureStorage2DMultisample);
    _api.glTextureStorage2DMultisample(texture.ID, samples,
                                       toScalar(internalformat), width, height,
                                       toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

// Calls glTextureStorage3D().
void GLAPI::textureStorage3D(TextureName texture, GLsizei levels,
                             SizedInternalFormat internalformat, GLsizei width,
                             GLsizei height, GLsizei depth) const
{
    static const char *fnName = "glTextureStorage3D";

    beforeCommand(fnName, _api.glTextureStorage3D);
    _api.glTextureStorage3D(texture.ID, levels, toScalar(internalformat), width,
                            height, depth);
    afterCommand(fnName);
}

// Calls glTextureStorage3DMultisample().
void GLAPI::textureStorage3DMultisample(TextureName texture, GLsizei samples,
                                        SizedInternalFormat internalformat,
                                        GLsizei width, GLsizei height,
                                        GLsizei depth,
                                        Boolean fixedsamplelocations) const
{
    static const char *fnName = "glTextureStorage3DMultisample";

    beforeCommand(fnName, _api.glTextureStorage3DMultisample);
    _api.glTextureStorage3DMultisample(texture.ID, samples,
                                       toScalar(internalformat), width, height,
                                       depth, toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

// Calls glTextureSubImage1D().
void GLAPI::textureSubImage1D(TextureName texture, GLint level, GLint xoffset,
                              GLsizei width, PixelFormat format, PixelType type,
                              const void *pixels) const
{
    static const char *fnName = "glTextureSubImage1D";

    beforeCommand(fnName, _api.glTextureSubImage1D);
    _api.glTextureSubImage1D(texture.ID, level, xoffset, width, toScalar(format),
                             toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTextureSubImage2D().
void GLAPI::textureSubImage2D(TextureName texture, GLint level, GLint xoffset,
                              GLint yoffset, GLsizei width, GLsizei height,
                              PixelFormat format, PixelType type,
                              const void *pixels) const
{
    static const char *fnName = "glTextureSubImage2D";

    beforeCommand(fnName, _api.glTextureSubImage2D);
    _api.glTextureSubImage2D(texture.ID, level, xoffset, yoffset, width, height,
                             toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTextureSubImage3D().
void GLAPI::textureSubImage3D(TextureName texture, GLint level, GLint xoffset,
                              GLint yoffset, GLint zoffset, GLsizei width,
                              GLsizei height, GLsizei depth, PixelFormat format,
                              PixelType type, const void *pixels) const
{
    static const char *fnName = "glTextureSubImage3D";

    beforeCommand(fnName, _api.glTextureSubImage3D);
    _api.glTextureSubImage3D(texture.ID, level, xoffset, yoffset, zoffset, width,
                             height, depth, toScalar(format), toScalar(type),
                             pixels);
    afterCommand(fnName);
}

// Calls glTransformFeedbackBufferBase().
void GLAPI::transformFeedbackBufferBase(TransformFeedbackName xfb, GLuint index,
                                        BufferName buffer) const
{
    static const char *fnName = "glTransformFeedbackBufferBase";

    beforeCommand(fnName, _api.glTransformFeedbackBufferBase);
    _api.glTransformFeedbackBufferBase(xfb.ID, index, buffer.ID);
    afterCommand(fnName);
}

// Calls glTransformFeedbackBufferRange().
void GLAPI::transformFeedbackBufferRange(TransformFeedbackName xfb, GLuint index,
                                         BufferName buffer, GLintptr offset,
                                         GLsizeiptr size) const
{
    static const char *fnName = "glTransformFeedbackBufferRange";

    beforeCommand(fnName, _api.glTransformFeedbackBufferRange);
    _api.glTransformFeedbackBufferRange(xfb.ID, index, buffer.ID, offset, size);
    afterCommand(fnName);
}

// Calls glUnmapNamedBuffer().
Boolean GLAPI::unmapNamedBuffer(BufferName buffer) const
{
    static const char *fnName = "glUnmapNamedBuffer";

    beforeCommand(fnName, _api.glUnmapNamedBuffer);
    GLboolean result = _api.glUnmapNamedBuffer(buffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glVertexArrayAttribBinding().
void GLAPI::vertexArrayAttribBinding(VertexArrayName vaobj, GLuint attribindex,
                                     GLuint bindingindex) const
{
    static const char *fnName = "glVertexArrayAttribBinding";

    beforeCommand(fnName, _api.glVertexArrayAttribBinding);
    _api.glVertexArrayAttribBinding(vaobj.ID, attribindex, bindingindex);
    afterCommand(fnName);
}

// Calls glVertexArrayAttribFormat().
void GLAPI::vertexArrayAttribFormat(VertexArrayName vaobj, GLuint attribindex,
                                    GLint size, VertexAttribType type,
                                    Boolean normalized, GLuint relativeoffset) const
{
    static const char *fnName = "glVertexArrayAttribFormat";

    beforeCommand(fnName, _api.glVertexArrayAttribFormat);
    _api.glVertexArrayAttribFormat(vaobj.ID, attribindex, size, toScalar(type),
                                   toScalar(normalized), relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexArrayAttribIFormat().
void GLAPI::vertexArrayAttribIFormat(VertexArrayName vaobj, GLuint attribindex,
                                     GLint size, VertexAttribIType type,
                                     GLuint relativeoffset) const
{
    static const char *fnName = "glVertexArrayAttribIFormat";

    beforeCommand(fnName, _api.glVertexArrayAttribIFormat);
    _api.glVertexArrayAttribIFormat(vaobj.ID, attribindex, size, toScalar(type),
                                    relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexArrayAttribLFormat().
void GLAPI::vertexArrayAttribLFormat(VertexArrayName vaobj, GLuint attribindex,
                                     GLint size, VertexAttribLType type,
                                     GLuint relativeoffset) const
{
    static const char *fnName = "glVertexArrayAttribLFormat";

    beforeCommand(fnName, _api.glVertexArrayAttribLFormat);
    _api.glVertexArrayAttribLFormat(vaobj.ID, attribindex, size, toScalar(type),
                                    relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexArrayBindingDivisor().
void GLAPI::vertexArrayBindingDivisor(VertexArrayName vaobj, GLuint bindingindex,
                                      GLuint divisor) const
{
    static const char *fnName = "glVertexArrayBindingDivisor";

    beforeCommand(fnName, _api.glVertexArrayBindingDivisor);
    _api.glVertexArrayBindingDivisor(vaobj.ID, bindingindex, divisor);
    afterCommand(fnName);
}

// Calls glVertexArrayElementBuffer().
void GLAPI::vertexArrayElementBuffer(VertexArrayName vaobj, BufferName buffer) const
{
    static const char *fnName = "glVertexArrayElementBuffer";

    beforeCommand(fnName, _api.glVertexArrayElementBuffer);
    _api.glVertexArrayElementBuffer(vaobj.ID, buffer.ID);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexBuffer().
void GLAPI::vertexArrayVertexBuffer(VertexArrayName vaobj, GLuint bindingindex,
                                    BufferName buffer, GLintptr offset,
                                    GLsizei stride) const
{
    static const char *fnName = "glVertexArrayVertexBuffer";

    beforeCommand(fnName, _api.glVertexArrayVertexBuffer);
    _api.glVertexArrayVertexBuffer(vaobj.ID, bindingindex, buffer.ID, offset,
                                   stride);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexBuffers().
void GLAPI::vertexArrayVertexBuffers(VertexArrayName vaobj, GLuint first,
                                     GLsizei count, const BufferName *buffers,
                                     const GLintptr *offsets,
                                     const GLsizei *strides) const
{
    static const char *fnName = "glVertexArrayVertexBuffers";

    beforeCommand(fnName, _api.glVertexArrayVertexBuffers);
    _api.glVertexArrayVertexBuffers(vaobj.ID, first, count,
                                    reinterpret_cast<const GLuint *>(buffers),
                                    offsets, strides);
    afterCommand(fnName);
}

// Calls glMultiDrawArraysIndirectCount().
void GLAPI::multiDrawArraysIndirectCount(PrimitiveType mode,
                                         const void *indirect,
                                         GLintptr drawcount,
                                         GLsizei maxdrawcount, GLsizei stride) const
{
    static const char *fnName = "glMultiDrawArraysIndirectCount";

    beforeCommand(fnName, _api.glMultiDrawArraysIndirectCount);
    _api.glMultiDrawArraysIndirectCount(toScalar(mode), indirect, drawcount,
                                        maxdrawcount, stride);
    afterCommand(fnName);
}

// Calls glMultiDrawElementsIndirectCount().
void GLAPI::multiDrawElementsIndirectCount(PrimitiveType mode,
                                           DrawElementsType type,
                                           const void *indirect,
                                           GLintptr drawcount,
                                           GLsizei maxdrawcount, GLsizei stride) const
{
    static const char *fnName = "glMultiDrawElementsIndirectCount";

    beforeCommand(fnName, _api.glMultiDrawElementsIndirectCount);
    _api.glMultiDrawElementsIndirectCount(toScalar(mode), toScalar(type),
                                          indirect, drawcount, maxdrawcount,
                                          stride);
    afterCommand(fnName);
}

// Calls glPolygonOffsetClamp().
void GLAPI::polygonOffsetClamp(GLfloat factor, GLfloat units, GLfloat clamp) const
{
    static const char *fnName = "glPolygonOffsetClamp";

    beforeCommand(fnName, _api.glPolygonOffsetClamp);
    _api.glPolygonOffsetClamp(factor, units, clamp);
    afterCommand(fnName);
}

// Calls glSpecializeShader().
void GLAPI::specializeShader(ShaderName shader, const GLchar *pEntryPoint,
                             GLuint numSpecializationConstants,
                             const GLuint *pConstantIndex,
                             const GLuint *pConstantValue) const
{
    static const char *fnName = "glSpecializeShader";

    beforeCommand(fnName, _api.glSpecializeShader);
    _api.glSpecializeShader(shader.ID, pEntryPoint, numSpecializationConstants,
                            pConstantIndex, pConstantValue);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// _3DFXTbufferAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_3DFX_tbuffer extension.
_3DFXTbufferAPI::_3DFXTbufferAPI() :
    BaseExtension("GL_3DFX_tbuffer")
{
}

// Grant read-only access to the underlying function pointers.
const _3DFXTbuffer &_3DFXTbufferAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_3DFX_tbuffer entry points.
void _3DFXTbufferAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTbufferMask3DFX().
void _3DFXTbufferAPI::tbufferMask(GLuint mask) const
{
    static const char *fnName = "glTbufferMask3DFX";

    beforeCommand(fnName, _api.glTbufferMask);
    _api.glTbufferMask(mask);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDDebugOutputAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_debug_output extension.
AMDDebugOutputAPI::AMDDebugOutputAPI() :
    BaseExtension("GL_AMD_debug_output")
{
}

// Grant read-only access to the underlying function pointers.
const AMDDebugOutput &AMDDebugOutputAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_debug_output entry points.
void AMDDebugOutputAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDebugMessageCallbackAMD().
void AMDDebugOutputAPI::debugMessageCallback(GLDEBUGPROCAMD callback,
                                             void *userParam) const
{
    static const char *fnName = "glDebugMessageCallbackAMD";

    beforeCommand(fnName, _api.glDebugMessageCallback);
    _api.glDebugMessageCallback(callback, userParam);
    afterCommand(fnName);
}

// Calls glDebugMessageEnableAMD().
void AMDDebugOutputAPI::debugMessageEnable(GLenum category,
                                           DebugSeverity severity, GLsizei count,
                                           const GLuint *ids, Boolean enabled) const
{
    static const char *fnName = "glDebugMessageEnableAMD";

    beforeCommand(fnName, _api.glDebugMessageEnable);
    _api.glDebugMessageEnable(category, toScalar(severity), count, ids,
                              toScalar(enabled));
    afterCommand(fnName);
}

// Calls glDebugMessageInsertAMD().
void AMDDebugOutputAPI::debugMessageInsert(GLenum category,
                                           DebugSeverity severity, GLuint id,
                                           GLsizei length, const GLchar *buf) const
{
    static const char *fnName = "glDebugMessageInsertAMD";

    beforeCommand(fnName, _api.glDebugMessageInsert);
    _api.glDebugMessageInsert(category, toScalar(severity), id, length, buf);
    afterCommand(fnName);
}

// Calls glGetDebugMessageLogAMD().
GLuint AMDDebugOutputAPI::getDebugMessageLog(GLuint count, GLsizei bufSize,
                                             GLenum *categories,
                                             DebugSeverity *severities,
                                             GLuint *ids, GLsizei *lengths,
                                             GLchar *message) const
{
    static const char *fnName = "glGetDebugMessageLogAMD";

    beforeCommand(fnName, _api.glGetDebugMessageLog);
    GLuint result = _api.glGetDebugMessageLog(count, bufSize, categories,
                                              toScalarPtr(severities), ids,
                                              lengths, message);
    afterCommand(fnName);

    return result;
}

////////////////////////////////////////////////////////////////////////////////
// AMDDrawBuffersBlendAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_draw_buffers_blend extension.
AMDDrawBuffersBlendAPI::AMDDrawBuffersBlendAPI() :
    BaseExtension("GL_AMD_draw_buffers_blend")
{
}

// Grant read-only access to the underlying function pointers.
const AMDDrawBuffersBlend &AMDDrawBuffersBlendAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_draw_buffers_blend entry points.
void AMDDrawBuffersBlendAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendEquationIndexedAMD().
void AMDDrawBuffersBlendAPI::blendEquationIndexed(GLuint buf,
                                                  BlendEquationModeEXT mode) const
{
    static const char *fnName = "glBlendEquationIndexedAMD";

    beforeCommand(fnName, _api.glBlendEquationIndexed);
    _api.glBlendEquationIndexed(buf, toScalar(mode));
    afterCommand(fnName);
}

// Calls glBlendEquationSeparateIndexedAMD().
void AMDDrawBuffersBlendAPI::blendEquationSeparateIndexed(GLuint buf,
                                                          BlendEquationModeEXT modeRGB,
                                                          BlendEquationModeEXT modeAlpha) const
{
    static const char *fnName = "glBlendEquationSeparateIndexedAMD";

    beforeCommand(fnName, _api.glBlendEquationSeparateIndexed);
    _api.glBlendEquationSeparateIndexed(buf, toScalar(modeRGB),
                                        toScalar(modeAlpha));
    afterCommand(fnName);
}

// Calls glBlendFuncIndexedAMD().
void AMDDrawBuffersBlendAPI::blendFuncIndexed(GLuint buf, GLenum src, GLenum dst) const
{
    static const char *fnName = "glBlendFuncIndexedAMD";

    beforeCommand(fnName, _api.glBlendFuncIndexed);
    _api.glBlendFuncIndexed(buf, src, dst);
    afterCommand(fnName);
}

// Calls glBlendFuncSeparateIndexedAMD().
void AMDDrawBuffersBlendAPI::blendFuncSeparateIndexed(GLuint buf,
                                                      BlendingFactor srcRGB,
                                                      BlendingFactor dstRGB,
                                                      BlendingFactor srcAlpha,
                                                      BlendingFactor dstAlpha) const
{
    static const char *fnName = "glBlendFuncSeparateIndexedAMD";

    beforeCommand(fnName, _api.glBlendFuncSeparateIndexed);
    _api.glBlendFuncSeparateIndexed(buf, toScalar(srcRGB), toScalar(dstRGB),
                                    toScalar(srcAlpha), toScalar(dstAlpha));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDFramebufferMultisampleAdvancedAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_framebuffer_multisample_advanced extension.
AMDFramebufferMultisampleAdvancedAPI::AMDFramebufferMultisampleAdvancedAPI() :
    BaseExtension("GL_AMD_framebuffer_multisample_advanced")
{
}

// Grant read-only access to the underlying function pointers.
const AMDFramebufferMultisampleAdvanced &AMDFramebufferMultisampleAdvancedAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_framebuffer_multisample_advanced entry points.
void AMDFramebufferMultisampleAdvancedAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glNamedRenderbufferStorageMultisampleAdvancedAMD().
void AMDFramebufferMultisampleAdvancedAPI::namedRenderbufferStorageMultisampleAdvanced(RenderBufferName renderbuffer,
                                                                                       GLsizei samples,
                                                                                       GLsizei storageSamples,
                                                                                       InternalFormat internalformat,
                                                                                       GLsizei width,
                                                                                       GLsizei height) const
{
    static const char *fnName = "glNamedRenderbufferStorageMultisampleAdvancedAMD";

    beforeCommand(fnName, _api.glNamedRenderbufferStorageMultisampleAdvanced);
    _api.glNamedRenderbufferStorageMultisampleAdvanced(renderbuffer.ID, samples,
                                                       storageSamples,
                                                       toScalar(internalformat),
                                                       width, height);
    afterCommand(fnName);
}

// Calls glRenderbufferStorageMultisampleAdvancedAMD().
void AMDFramebufferMultisampleAdvancedAPI::renderbufferStorageMultisampleAdvanced(RenderBufferTarget target,
                                                                                  GLsizei samples,
                                                                                  GLsizei storageSamples,
                                                                                  InternalFormat internalformat,
                                                                                  GLsizei width,
                                                                                  GLsizei height) const
{
    static const char *fnName = "glRenderbufferStorageMultisampleAdvancedAMD";

    beforeCommand(fnName, _api.glRenderbufferStorageMultisampleAdvanced);
    _api.glRenderbufferStorageMultisampleAdvanced(toScalar(target), samples,
                                                  storageSamples,
                                                  toScalar(internalformat),
                                                  width, height);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDFramebufferSamplePositionsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_framebuffer_sample_positions extension.
AMDFramebufferSamplePositionsAPI::AMDFramebufferSamplePositionsAPI() :
    BaseExtension("GL_AMD_framebuffer_sample_positions")
{
}

// Grant read-only access to the underlying function pointers.
const AMDFramebufferSamplePositions &AMDFramebufferSamplePositionsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_framebuffer_sample_positions entry points.
void AMDFramebufferSamplePositionsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFramebufferSamplePositionsfvAMD().
void AMDFramebufferSamplePositionsAPI::framebufferSamplePositionsFV(FramebufferTarget target,
                                                                    GLuint numsamples,
                                                                    GLuint pixelindex,
                                                                    const GLfloat *values) const
{
    static const char *fnName = "glFramebufferSamplePositionsfvAMD";

    beforeCommand(fnName, _api.glFramebufferSamplePositionsfv);
    _api.glFramebufferSamplePositionsfv(toScalar(target), numsamples, pixelindex,
                                        values);
    afterCommand(fnName);
}

// Calls glGetFramebufferParameterfvAMD().
void AMDFramebufferSamplePositionsAPI::getFramebufferParameterFV(FramebufferTarget target,
                                                                 FramebufferAttachmentParameterName pname,
                                                                 GLuint numsamples,
                                                                 GLuint pixelindex,
                                                                 GLsizei size,
                                                                 GLfloat *values) const
{
    static const char *fnName = "glGetFramebufferParameterfvAMD";

    beforeCommand(fnName, _api.glGetFramebufferParameterfv);
    _api.glGetFramebufferParameterfv(toScalar(target), toScalar(pname),
                                     numsamples, pixelindex, size, values);
    afterCommand(fnName);
}

// Calls glGetNamedFramebufferParameterfvAMD().
void AMDFramebufferSamplePositionsAPI::getNamedFramebufferParameterFV(FrameBufferName framebuffer,
                                                                      GLenum pname,
                                                                      GLuint numsamples,
                                                                      GLuint pixelindex,
                                                                      GLsizei size,
                                                                      GLfloat *values) const
{
    static const char *fnName = "glGetNamedFramebufferParameterfvAMD";

    beforeCommand(fnName, _api.glGetNamedFramebufferParameterfv);
    _api.glGetNamedFramebufferParameterfv(framebuffer.ID, pname, numsamples,
                                          pixelindex, size, values);
    afterCommand(fnName);
}

// Calls glNamedFramebufferSamplePositionsfvAMD().
void AMDFramebufferSamplePositionsAPI::namedFramebufferSamplePositionsFV(FrameBufferName framebuffer,
                                                                         GLuint numsamples,
                                                                         GLuint pixelindex,
                                                                         const GLfloat *values) const
{
    static const char *fnName = "glNamedFramebufferSamplePositionsfvAMD";

    beforeCommand(fnName, _api.glNamedFramebufferSamplePositionsfv);
    _api.glNamedFramebufferSamplePositionsfv(framebuffer.ID, numsamples,
                                             pixelindex, values);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDGPUShaderInt64API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_gpu_shader_int64 extension.
AMDGPUShaderInt64API::AMDGPUShaderInt64API() :
    BaseExtension("GL_AMD_gpu_shader_int64")
{
}

// Grant read-only access to the underlying function pointers.
const AMDGPUShaderInt64 &AMDGPUShaderInt64API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_gpu_shader_int64 entry points.
void AMDGPUShaderInt64API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetUniformi64vNV().
void AMDGPUShaderInt64API::getUniformI64V(ProgramName program, GLint location,
                                          GLint64EXT *params) const
{
    static const char *fnName = "glGetUniformi64vNV";

    beforeCommand(fnName, _api.glGetUniformi64v);
    _api.glGetUniformi64v(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glGetUniformui64vNV().
void AMDGPUShaderInt64API::getUniformUI64(ProgramName program, GLint location,
                                          GLuint64EXT *params) const
{
    static const char *fnName = "glGetUniformui64vNV";

    beforeCommand(fnName, _api.glGetUniformui64v);
    _api.glGetUniformui64v(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glProgramUniform1i64NV().
void AMDGPUShaderInt64API::programUniform1I64(ProgramName program,
                                              GLint location, GLint64EXT x) const
{
    static const char *fnName = "glProgramUniform1i64NV";

    beforeCommand(fnName, _api.glProgramUniform1i64);
    _api.glProgramUniform1i64(program.ID, location, x);
    afterCommand(fnName);
}

// Calls glProgramUniform1i64vNV().
void AMDGPUShaderInt64API::programUniform1I64V(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLint64EXT *value) const
{
    static const char *fnName = "glProgramUniform1i64vNV";

    beforeCommand(fnName, _api.glProgramUniform1i64v);
    _api.glProgramUniform1i64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform1ui64NV().
void AMDGPUShaderInt64API::programUniform1UI64(ProgramName program,
                                               GLint location, GLuint64EXT x) const
{
    static const char *fnName = "glProgramUniform1ui64NV";

    beforeCommand(fnName, _api.glProgramUniform1ui64);
    _api.glProgramUniform1ui64(program.ID, location, x);
    afterCommand(fnName);
}

// Calls glProgramUniform1ui64vNV().
void AMDGPUShaderInt64API::programUniform1UI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64EXT *value) const
{
    static const char *fnName = "glProgramUniform1ui64vNV";

    beforeCommand(fnName, _api.glProgramUniform1ui64v);
    _api.glProgramUniform1ui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2i64NV().
void AMDGPUShaderInt64API::programUniform2I64(ProgramName program,
                                              GLint location, GLint64EXT x,
                                              GLint64EXT y) const
{
    static const char *fnName = "glProgramUniform2i64NV";

    beforeCommand(fnName, _api.glProgramUniform2i64);
    _api.glProgramUniform2i64(program.ID, location, x, y);
    afterCommand(fnName);
}

// Calls glProgramUniform2i64vNV().
void AMDGPUShaderInt64API::programUniform2I64V(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLint64EXT *value) const
{
    static const char *fnName = "glProgramUniform2i64vNV";

    beforeCommand(fnName, _api.glProgramUniform2i64v);
    _api.glProgramUniform2i64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2ui64NV().
void AMDGPUShaderInt64API::programUniform2UI64(ProgramName program,
                                               GLint location, GLuint64EXT x,
                                               GLuint64EXT y) const
{
    static const char *fnName = "glProgramUniform2ui64NV";

    beforeCommand(fnName, _api.glProgramUniform2ui64);
    _api.glProgramUniform2ui64(program.ID, location, x, y);
    afterCommand(fnName);
}

// Calls glProgramUniform2ui64vNV().
void AMDGPUShaderInt64API::programUniform2UI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64EXT *value) const
{
    static const char *fnName = "glProgramUniform2ui64vNV";

    beforeCommand(fnName, _api.glProgramUniform2ui64v);
    _api.glProgramUniform2ui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3i64NV().
void AMDGPUShaderInt64API::programUniform3I64(ProgramName program,
                                              GLint location, GLint64EXT x,
                                              GLint64EXT y, GLint64EXT z) const
{
    static const char *fnName = "glProgramUniform3i64NV";

    beforeCommand(fnName, _api.glProgramUniform3i64);
    _api.glProgramUniform3i64(program.ID, location, x, y, z);
    afterCommand(fnName);
}

// Calls glProgramUniform3i64vNV().
void AMDGPUShaderInt64API::programUniform3I64V(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLint64EXT *value) const
{
    static const char *fnName = "glProgramUniform3i64vNV";

    beforeCommand(fnName, _api.glProgramUniform3i64v);
    _api.glProgramUniform3i64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3ui64NV().
void AMDGPUShaderInt64API::programUniform3UI64(ProgramName program,
                                               GLint location, GLuint64EXT x,
                                               GLuint64EXT y, GLuint64EXT z) const
{
    static const char *fnName = "glProgramUniform3ui64NV";

    beforeCommand(fnName, _api.glProgramUniform3ui64);
    _api.glProgramUniform3ui64(program.ID, location, x, y, z);
    afterCommand(fnName);
}

// Calls glProgramUniform3ui64vNV().
void AMDGPUShaderInt64API::programUniform3UI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64EXT *value) const
{
    static const char *fnName = "glProgramUniform3ui64vNV";

    beforeCommand(fnName, _api.glProgramUniform3ui64v);
    _api.glProgramUniform3ui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4i64NV().
void AMDGPUShaderInt64API::programUniform4I64(ProgramName program,
                                              GLint location, GLint64EXT x,
                                              GLint64EXT y, GLint64EXT z,
                                              GLint64EXT w) const
{
    static const char *fnName = "glProgramUniform4i64NV";

    beforeCommand(fnName, _api.glProgramUniform4i64);
    _api.glProgramUniform4i64(program.ID, location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramUniform4i64vNV().
void AMDGPUShaderInt64API::programUniform4I64V(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLint64EXT *value) const
{
    static const char *fnName = "glProgramUniform4i64vNV";

    beforeCommand(fnName, _api.glProgramUniform4i64v);
    _api.glProgramUniform4i64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4ui64NV().
void AMDGPUShaderInt64API::programUniform4UI64(ProgramName program,
                                               GLint location, GLuint64EXT x,
                                               GLuint64EXT y, GLuint64EXT z,
                                               GLuint64EXT w) const
{
    static const char *fnName = "glProgramUniform4ui64NV";

    beforeCommand(fnName, _api.glProgramUniform4ui64);
    _api.glProgramUniform4ui64(program.ID, location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramUniform4ui64vNV().
void AMDGPUShaderInt64API::programUniform4UI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64EXT *value) const
{
    static const char *fnName = "glProgramUniform4ui64vNV";

    beforeCommand(fnName, _api.glProgramUniform4ui64v);
    _api.glProgramUniform4ui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glUniform1i64NV().
void AMDGPUShaderInt64API::uniform1I64(GLint location, GLint64EXT x) const
{
    static const char *fnName = "glUniform1i64NV";

    beforeCommand(fnName, _api.glUniform1i64);
    _api.glUniform1i64(location, x);
    afterCommand(fnName);
}

// Calls glUniform1i64vNV().
void AMDGPUShaderInt64API::uniform1I64V(GLint location, GLsizei count,
                                        const GLint64EXT *value) const
{
    static const char *fnName = "glUniform1i64vNV";

    beforeCommand(fnName, _api.glUniform1i64v);
    _api.glUniform1i64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform1ui64NV().
void AMDGPUShaderInt64API::uniform1UI64(GLint location, GLuint64EXT x) const
{
    static const char *fnName = "glUniform1ui64NV";

    beforeCommand(fnName, _api.glUniform1ui64);
    _api.glUniform1ui64(location, x);
    afterCommand(fnName);
}

// Calls glUniform1ui64vNV().
void AMDGPUShaderInt64API::uniform1UI64(GLint location, GLsizei count,
                                        const GLuint64EXT *value) const
{
    static const char *fnName = "glUniform1ui64vNV";

    beforeCommand(fnName, _api.glUniform1ui64v);
    _api.glUniform1ui64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2i64NV().
void AMDGPUShaderInt64API::uniform2I64(GLint location, GLint64EXT x,
                                       GLint64EXT y) const
{
    static const char *fnName = "glUniform2i64NV";

    beforeCommand(fnName, _api.glUniform2i64);
    _api.glUniform2i64(location, x, y);
    afterCommand(fnName);
}

// Calls glUniform2i64vNV().
void AMDGPUShaderInt64API::uniform2I64V(GLint location, GLsizei count,
                                        const GLint64EXT *value) const
{
    static const char *fnName = "glUniform2i64vNV";

    beforeCommand(fnName, _api.glUniform2i64v);
    _api.glUniform2i64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2ui64NV().
void AMDGPUShaderInt64API::uniform2UI64(GLint location, GLuint64EXT x,
                                        GLuint64EXT y) const
{
    static const char *fnName = "glUniform2ui64NV";

    beforeCommand(fnName, _api.glUniform2ui64);
    _api.glUniform2ui64(location, x, y);
    afterCommand(fnName);
}

// Calls glUniform2ui64vNV().
void AMDGPUShaderInt64API::uniform2UI64(GLint location, GLsizei count,
                                        const GLuint64EXT *value) const
{
    static const char *fnName = "glUniform2ui64vNV";

    beforeCommand(fnName, _api.glUniform2ui64v);
    _api.glUniform2ui64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3i64NV().
void AMDGPUShaderInt64API::uniform3I64(GLint location, GLint64EXT x,
                                       GLint64EXT y, GLint64EXT z) const
{
    static const char *fnName = "glUniform3i64NV";

    beforeCommand(fnName, _api.glUniform3i64);
    _api.glUniform3i64(location, x, y, z);
    afterCommand(fnName);
}

// Calls glUniform3i64vNV().
void AMDGPUShaderInt64API::uniform3I64V(GLint location, GLsizei count,
                                        const GLint64EXT *value) const
{
    static const char *fnName = "glUniform3i64vNV";

    beforeCommand(fnName, _api.glUniform3i64v);
    _api.glUniform3i64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3ui64NV().
void AMDGPUShaderInt64API::uniform3UI64(GLint location, GLuint64EXT x,
                                        GLuint64EXT y, GLuint64EXT z) const
{
    static const char *fnName = "glUniform3ui64NV";

    beforeCommand(fnName, _api.glUniform3ui64);
    _api.glUniform3ui64(location, x, y, z);
    afterCommand(fnName);
}

// Calls glUniform3ui64vNV().
void AMDGPUShaderInt64API::uniform3UI64(GLint location, GLsizei count,
                                        const GLuint64EXT *value) const
{
    static const char *fnName = "glUniform3ui64vNV";

    beforeCommand(fnName, _api.glUniform3ui64v);
    _api.glUniform3ui64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4i64NV().
void AMDGPUShaderInt64API::uniform4I64(GLint location, GLint64EXT x,
                                       GLint64EXT y, GLint64EXT z, GLint64EXT w) const
{
    static const char *fnName = "glUniform4i64NV";

    beforeCommand(fnName, _api.glUniform4i64);
    _api.glUniform4i64(location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glUniform4i64vNV().
void AMDGPUShaderInt64API::uniform4I64V(GLint location, GLsizei count,
                                        const GLint64EXT *value) const
{
    static const char *fnName = "glUniform4i64vNV";

    beforeCommand(fnName, _api.glUniform4i64v);
    _api.glUniform4i64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4ui64NV().
void AMDGPUShaderInt64API::uniform4UI64(GLint location, GLuint64EXT x,
                                        GLuint64EXT y, GLuint64EXT z,
                                        GLuint64EXT w) const
{
    static const char *fnName = "glUniform4ui64NV";

    beforeCommand(fnName, _api.glUniform4ui64);
    _api.glUniform4ui64(location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glUniform4ui64vNV().
void AMDGPUShaderInt64API::uniform4UI64(GLint location, GLsizei count,
                                        const GLuint64EXT *value) const
{
    static const char *fnName = "glUniform4ui64vNV";

    beforeCommand(fnName, _api.glUniform4ui64v);
    _api.glUniform4ui64v(location, count, value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDInterleavedElementsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_interleaved_elements extension.
AMDInterleavedElementsAPI::AMDInterleavedElementsAPI() :
    BaseExtension("GL_AMD_interleaved_elements")
{
}

// Grant read-only access to the underlying function pointers.
const AMDInterleavedElements &AMDInterleavedElementsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_interleaved_elements entry points.
void AMDInterleavedElementsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glVertexAttribParameteriAMD().
void AMDInterleavedElementsAPI::vertexAttribParameterI(GLuint index,
                                                       GLenum pname, GLint param) const
{
    static const char *fnName = "glVertexAttribParameteriAMD";

    beforeCommand(fnName, _api.glVertexAttribParameteri);
    _api.glVertexAttribParameteri(index, pname, param);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDMultiDrawIndirectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_multi_draw_indirect extension.
AMDMultiDrawIndirectAPI::AMDMultiDrawIndirectAPI() :
    BaseExtension("GL_AMD_multi_draw_indirect")
{
}

// Grant read-only access to the underlying function pointers.
const AMDMultiDrawIndirect &AMDMultiDrawIndirectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_multi_draw_indirect entry points.
void AMDMultiDrawIndirectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMultiDrawArraysIndirectAMD().
void AMDMultiDrawIndirectAPI::multiDrawArraysIndirect(PrimitiveType mode,
                                                      const void *indirect,
                                                      GLsizei primcount,
                                                      GLsizei stride) const
{
    static const char *fnName = "glMultiDrawArraysIndirectAMD";

    beforeCommand(fnName, _api.glMultiDrawArraysIndirect);
    _api.glMultiDrawArraysIndirect(toScalar(mode), indirect, primcount, stride);
    afterCommand(fnName);
}

// Calls glMultiDrawElementsIndirectAMD().
void AMDMultiDrawIndirectAPI::multiDrawElementsIndirect(PrimitiveType mode,
                                                        DrawElementsType type,
                                                        const void *indirect,
                                                        GLsizei primcount,
                                                        GLsizei stride) const
{
    static const char *fnName = "glMultiDrawElementsIndirectAMD";

    beforeCommand(fnName, _api.glMultiDrawElementsIndirect);
    _api.glMultiDrawElementsIndirect(toScalar(mode), toScalar(type), indirect,
                                     primcount, stride);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDNameGenDeleteAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_name_gen_delete extension.
AMDNameGenDeleteAPI::AMDNameGenDeleteAPI() :
    BaseExtension("GL_AMD_name_gen_delete")
{
}

// Grant read-only access to the underlying function pointers.
const AMDNameGenDelete &AMDNameGenDeleteAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_name_gen_delete entry points.
void AMDNameGenDeleteAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDeleteNamesAMD().
void AMDNameGenDeleteAPI::deleteNames(GLenum identifier, GLuint num,
                                      const GLuint *names) const
{
    static const char *fnName = "glDeleteNamesAMD";

    beforeCommand(fnName, _api.glDeleteNames);
    _api.glDeleteNames(identifier, num, names);
    afterCommand(fnName);
}

// Calls glGenNamesAMD().
void AMDNameGenDeleteAPI::genNames(GLenum identifier, GLuint num, GLuint *names) const
{
    static const char *fnName = "glGenNamesAMD";

    beforeCommand(fnName, _api.glGenNames);
    _api.glGenNames(identifier, num, names);
    afterCommand(fnName);
}

// Calls glIsNameAMD().
Boolean AMDNameGenDeleteAPI::isName(GLenum identifier, GLuint name) const
{
    static const char *fnName = "glIsNameAMD";

    beforeCommand(fnName, _api.glIsName);
    GLboolean result = _api.glIsName(identifier, name);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

////////////////////////////////////////////////////////////////////////////////
// AMDOcclusionQueryEventAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_occlusion_query_event extension.
AMDOcclusionQueryEventAPI::AMDOcclusionQueryEventAPI() :
    BaseExtension("GL_AMD_occlusion_query_event")
{
}

// Grant read-only access to the underlying function pointers.
const AMDOcclusionQueryEvent &AMDOcclusionQueryEventAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_occlusion_query_event entry points.
void AMDOcclusionQueryEventAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glQueryObjectParameteruiAMD().
void AMDOcclusionQueryEventAPI::queryObjectParameterUI(QueryTarget target,
                                                       QueryName id,
                                                       GLenum pname,
                                                       GLuint  /* OcclusionQueryEventMaskAMD */ param) const
{
    static const char *fnName = "glQueryObjectParameteruiAMD";

    beforeCommand(fnName, _api.glQueryObjectParameterui);
    _api.glQueryObjectParameterui(toScalar(target), id.ID, pname, param);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDPerformanceMonitorAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_performance_monitor extension.
AMDPerformanceMonitorAPI::AMDPerformanceMonitorAPI() :
    BaseExtension("GL_AMD_performance_monitor")
{
}

// Grant read-only access to the underlying function pointers.
const AMDPerformanceMonitor &AMDPerformanceMonitorAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_performance_monitor entry points.
void AMDPerformanceMonitorAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginPerfMonitorAMD().
void AMDPerformanceMonitorAPI::beginPerfMonitor(GLuint monitor) const
{
    static const char *fnName = "glBeginPerfMonitorAMD";

    beforeCommand(fnName, _api.glBeginPerfMonitor);
    _api.glBeginPerfMonitor(monitor);
    afterCommand(fnName);
}

// Calls glDeletePerfMonitorsAMD().
void AMDPerformanceMonitorAPI::deletePerfMonitors(GLsizei n, GLuint *monitors) const
{
    static const char *fnName = "glDeletePerfMonitorsAMD";

    beforeCommand(fnName, _api.glDeletePerfMonitors);
    _api.glDeletePerfMonitors(n, monitors);
    afterCommand(fnName);
}

// Calls glEndPerfMonitorAMD().
void AMDPerformanceMonitorAPI::endPerfMonitor(GLuint monitor) const
{
    static const char *fnName = "glEndPerfMonitorAMD";

    beforeCommand(fnName, _api.glEndPerfMonitor);
    _api.glEndPerfMonitor(monitor);
    afterCommand(fnName);
}

// Calls glGenPerfMonitorsAMD().
void AMDPerformanceMonitorAPI::genPerfMonitors(GLsizei n, GLuint *monitors) const
{
    static const char *fnName = "glGenPerfMonitorsAMD";

    beforeCommand(fnName, _api.glGenPerfMonitors);
    _api.glGenPerfMonitors(n, monitors);
    afterCommand(fnName);
}

// Calls glGetPerfMonitorCounterDataAMD().
void AMDPerformanceMonitorAPI::getPerfMonitorCounterData(GLuint monitor,
                                                         GLenum pname,
                                                         GLsizei dataSize,
                                                         GLuint *data,
                                                         GLint *bytesWritten) const
{
    static const char *fnName = "glGetPerfMonitorCounterDataAMD";

    beforeCommand(fnName, _api.glGetPerfMonitorCounterData);
    _api.glGetPerfMonitorCounterData(monitor, pname, dataSize, data,
                                     bytesWritten);
    afterCommand(fnName);
}

// Calls glGetPerfMonitorCounterInfoAMD().
void AMDPerformanceMonitorAPI::getPerfMonitorCounterInfo(GLuint group,
                                                         GLuint counter,
                                                         GLenum pname,
                                                         void *data) const
{
    static const char *fnName = "glGetPerfMonitorCounterInfoAMD";

    beforeCommand(fnName, _api.glGetPerfMonitorCounterInfo);
    _api.glGetPerfMonitorCounterInfo(group, counter, pname, data);
    afterCommand(fnName);
}

// Calls glGetPerfMonitorCounterStringAMD().
void AMDPerformanceMonitorAPI::getPerfMonitorCounterString(GLuint group,
                                                           GLuint counter,
                                                           GLsizei bufSize,
                                                           GLsizei *length,
                                                           GLchar *counterString) const
{
    static const char *fnName = "glGetPerfMonitorCounterStringAMD";

    beforeCommand(fnName, _api.glGetPerfMonitorCounterString);
    _api.glGetPerfMonitorCounterString(group, counter, bufSize, length,
                                       counterString);
    afterCommand(fnName);
}

// Calls glGetPerfMonitorCountersAMD().
void AMDPerformanceMonitorAPI::getPerfMonitorCounters(GLuint group,
                                                      GLint *numCounters,
                                                      GLint *maxActiveCounters,
                                                      GLsizei counterSize,
                                                      GLuint *counters) const
{
    static const char *fnName = "glGetPerfMonitorCountersAMD";

    beforeCommand(fnName, _api.glGetPerfMonitorCounters);
    _api.glGetPerfMonitorCounters(group, numCounters, maxActiveCounters,
                                  counterSize, counters);
    afterCommand(fnName);
}

// Calls glGetPerfMonitorGroupStringAMD().
void AMDPerformanceMonitorAPI::getPerfMonitorGroupString(GLuint group,
                                                         GLsizei bufSize,
                                                         GLsizei *length,
                                                         GLchar *groupString) const
{
    static const char *fnName = "glGetPerfMonitorGroupStringAMD";

    beforeCommand(fnName, _api.glGetPerfMonitorGroupString);
    _api.glGetPerfMonitorGroupString(group, bufSize, length, groupString);
    afterCommand(fnName);
}

// Calls glGetPerfMonitorGroupsAMD().
void AMDPerformanceMonitorAPI::getPerfMonitorGroups(GLint *numGroups,
                                                    GLsizei groupsSize,
                                                    GLuint *groups) const
{
    static const char *fnName = "glGetPerfMonitorGroupsAMD";

    beforeCommand(fnName, _api.glGetPerfMonitorGroups);
    _api.glGetPerfMonitorGroups(numGroups, groupsSize, groups);
    afterCommand(fnName);
}

// Calls glSelectPerfMonitorCountersAMD().
void AMDPerformanceMonitorAPI::selectPerfMonitorCounters(GLuint monitor,
                                                         Boolean enable,
                                                         GLuint group,
                                                         GLint numCounters,
                                                         GLuint *counterList) const
{
    static const char *fnName = "glSelectPerfMonitorCountersAMD";

    beforeCommand(fnName, _api.glSelectPerfMonitorCounters);
    _api.glSelectPerfMonitorCounters(monitor, toScalar(enable), group,
                                     numCounters, counterList);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDSamplePositionsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_sample_positions extension.
AMDSamplePositionsAPI::AMDSamplePositionsAPI() :
    BaseExtension("GL_AMD_sample_positions")
{
}

// Grant read-only access to the underlying function pointers.
const AMDSamplePositions &AMDSamplePositionsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_sample_positions entry points.
void AMDSamplePositionsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glSetMultisamplefvAMD().
void AMDSamplePositionsAPI::setMultisampleFV(GLenum pname, GLuint index,
                                             const GLfloat *val) const
{
    static const char *fnName = "glSetMultisamplefvAMD";

    beforeCommand(fnName, _api.glSetMultisamplefv);
    _api.glSetMultisamplefv(pname, index, val);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDSparseTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_sparse_texture extension.
AMDSparseTextureAPI::AMDSparseTextureAPI() :
    BaseExtension("GL_AMD_sparse_texture")
{
}

// Grant read-only access to the underlying function pointers.
const AMDSparseTexture &AMDSparseTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_sparse_texture entry points.
void AMDSparseTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexStorageSparseAMD().
void AMDSparseTextureAPI::texStorageSparse(TextureTarget target,
                                           SizedInternalFormat internalFormat,
                                           GLsizei width, GLsizei height,
                                           GLsizei depth, GLsizei layers,
                                           GLbitfield  /* TextureStorageMaskAMD */ flags) const
{
    static const char *fnName = "glTexStorageSparseAMD";

    beforeCommand(fnName, _api.glTexStorageSparse);
    _api.glTexStorageSparse(toScalar(target), toScalar(internalFormat), width,
                            height, depth, layers, flags);
    afterCommand(fnName);
}

// Calls glTextureStorageSparseAMD().
void AMDSparseTextureAPI::textureStorageSparse(TextureName texture,
                                               GLenum target,
                                               SizedInternalFormat internalFormat,
                                               GLsizei width, GLsizei height,
                                               GLsizei depth, GLsizei layers,
                                               GLbitfield  /* TextureStorageMaskAMD */ flags) const
{
    static const char *fnName = "glTextureStorageSparseAMD";

    beforeCommand(fnName, _api.glTextureStorageSparse);
    _api.glTextureStorageSparse(texture.ID, target, toScalar(internalFormat),
                                width, height, depth, layers, flags);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDStencilOperationExtendedAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_stencil_operation_extended extension.
AMDStencilOperationExtendedAPI::AMDStencilOperationExtendedAPI() :
    BaseExtension("GL_AMD_stencil_operation_extended")
{
}

// Grant read-only access to the underlying function pointers.
const AMDStencilOperationExtended &AMDStencilOperationExtendedAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_stencil_operation_extended entry points.
void AMDStencilOperationExtendedAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glStencilOpValueAMD().
void AMDStencilOperationExtendedAPI::stencilOpValue(StencilFaceDirection face,
                                                    GLuint value) const
{
    static const char *fnName = "glStencilOpValueAMD";

    beforeCommand(fnName, _api.glStencilOpValue);
    _api.glStencilOpValue(toScalar(face), value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// AMDVertexShaderTessellatorAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_AMD_vertex_shader_tessellator extension.
AMDVertexShaderTessellatorAPI::AMDVertexShaderTessellatorAPI() :
    BaseExtension("GL_AMD_vertex_shader_tessellator")
{
}

// Grant read-only access to the underlying function pointers.
const AMDVertexShaderTessellator &AMDVertexShaderTessellatorAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_AMD_vertex_shader_tessellator entry points.
void AMDVertexShaderTessellatorAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTessellationFactorAMD().
void AMDVertexShaderTessellatorAPI::tessellationFactor(GLfloat factor) const
{
    static const char *fnName = "glTessellationFactorAMD";

    beforeCommand(fnName, _api.glTessellationFactor);
    _api.glTessellationFactor(factor);
    afterCommand(fnName);
}

// Calls glTessellationModeAMD().
void AMDVertexShaderTessellatorAPI::tessellationMode(GLenum mode) const
{
    static const char *fnName = "glTessellationModeAMD";

    beforeCommand(fnName, _api.glTessellationMode);
    _api.glTessellationMode(mode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// APPLEElementArrayAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_APPLE_element_array extension.
APPLEElementArrayAPI::APPLEElementArrayAPI() :
    BaseExtension("GL_APPLE_element_array")
{
}

// Grant read-only access to the underlying function pointers.
const APPLEElementArray &APPLEElementArrayAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_APPLE_element_array entry points.
void APPLEElementArrayAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawElementArrayAPPLE().
void APPLEElementArrayAPI::drawElementArray(PrimitiveType mode, GLint first,
                                            GLsizei count) const
{
    static const char *fnName = "glDrawElementArrayAPPLE";

    beforeCommand(fnName, _api.glDrawElementArray);
    _api.glDrawElementArray(toScalar(mode), first, count);
    afterCommand(fnName);
}

// Calls glDrawRangeElementArrayAPPLE().
void APPLEElementArrayAPI::drawRangeElementArray(PrimitiveType mode,
                                                 GLuint start, GLuint end,
                                                 GLint first, GLsizei count) const
{
    static const char *fnName = "glDrawRangeElementArrayAPPLE";

    beforeCommand(fnName, _api.glDrawRangeElementArray);
    _api.glDrawRangeElementArray(toScalar(mode), start, end, first, count);
    afterCommand(fnName);
}

// Calls glElementPointerAPPLE().
void APPLEElementArrayAPI::elementPointer(ElementPointerTypeATI type,
                                          const void *pointer) const
{
    static const char *fnName = "glElementPointerAPPLE";

    beforeCommand(fnName, _api.glElementPointer);
    _api.glElementPointer(toScalar(type), pointer);
    afterCommand(fnName);
}

// Calls glMultiDrawElementArrayAPPLE().
void APPLEElementArrayAPI::multiDrawElementArray(PrimitiveType mode,
                                                 const GLint *first,
                                                 const GLsizei *count,
                                                 GLsizei primcount) const
{
    static const char *fnName = "glMultiDrawElementArrayAPPLE";

    beforeCommand(fnName, _api.glMultiDrawElementArray);
    _api.glMultiDrawElementArray(toScalar(mode), first, count, primcount);
    afterCommand(fnName);
}

// Calls glMultiDrawRangeElementArrayAPPLE().
void APPLEElementArrayAPI::multiDrawRangeElementArray(PrimitiveType mode,
                                                      GLuint start, GLuint end,
                                                      const GLint *first,
                                                      const GLsizei *count,
                                                      GLsizei primcount) const
{
    static const char *fnName = "glMultiDrawRangeElementArrayAPPLE";

    beforeCommand(fnName, _api.glMultiDrawRangeElementArray);
    _api.glMultiDrawRangeElementArray(toScalar(mode), start, end, first, count,
                                      primcount);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// APPLEFenceAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_APPLE_fence extension.
APPLEFenceAPI::APPLEFenceAPI() :
    BaseExtension("GL_APPLE_fence")
{
}

// Grant read-only access to the underlying function pointers.
const APPLEFence &APPLEFenceAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_APPLE_fence entry points.
void APPLEFenceAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDeleteFencesAPPLE().
void APPLEFenceAPI::deleteFences(GLsizei n, const GLuint *fences) const
{
    static const char *fnName = "glDeleteFencesAPPLE";

    beforeCommand(fnName, _api.glDeleteFences);
    _api.glDeleteFences(n, fences);
    afterCommand(fnName);
}

// Calls glFinishFenceAPPLE().
void APPLEFenceAPI::finishFence(GLuint fence) const
{
    static const char *fnName = "glFinishFenceAPPLE";

    beforeCommand(fnName, _api.glFinishFence);
    _api.glFinishFence(fence);
    afterCommand(fnName);
}

// Calls glFinishObjectAPPLE().
void APPLEFenceAPI::finishObject(ObjectTypeAPPLE object, GLint name) const
{
    static const char *fnName = "glFinishObjectAPPLE";

    beforeCommand(fnName, _api.glFinishObject);
    _api.glFinishObject(toScalar(object), name);
    afterCommand(fnName);
}

// Calls glGenFencesAPPLE().
void APPLEFenceAPI::genFences(GLsizei n, GLuint *fences) const
{
    static const char *fnName = "glGenFencesAPPLE";

    beforeCommand(fnName, _api.glGenFences);
    _api.glGenFences(n, fences);
    afterCommand(fnName);
}

// Calls glIsFenceAPPLE().
Boolean APPLEFenceAPI::isFence(GLuint fence) const
{
    static const char *fnName = "glIsFenceAPPLE";

    beforeCommand(fnName, _api.glIsFence);
    GLboolean result = _api.glIsFence(fence);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glSetFenceAPPLE().
void APPLEFenceAPI::setFence(GLuint fence) const
{
    static const char *fnName = "glSetFenceAPPLE";

    beforeCommand(fnName, _api.glSetFence);
    _api.glSetFence(fence);
    afterCommand(fnName);
}

// Calls glTestFenceAPPLE().
Boolean APPLEFenceAPI::testFence(GLuint fence) const
{
    static const char *fnName = "glTestFenceAPPLE";

    beforeCommand(fnName, _api.glTestFence);
    GLboolean result = _api.glTestFence(fence);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glTestObjectAPPLE().
Boolean APPLEFenceAPI::testObject(ObjectTypeAPPLE object, GLuint name) const
{
    static const char *fnName = "glTestObjectAPPLE";

    beforeCommand(fnName, _api.glTestObject);
    GLboolean result = _api.glTestObject(toScalar(object), name);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

////////////////////////////////////////////////////////////////////////////////
// APPLEFlushBufferRangeAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_APPLE_flush_buffer_range extension.
APPLEFlushBufferRangeAPI::APPLEFlushBufferRangeAPI() :
    BaseExtension("GL_APPLE_flush_buffer_range")
{
}

// Grant read-only access to the underlying function pointers.
const APPLEFlushBufferRange &APPLEFlushBufferRangeAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_APPLE_flush_buffer_range entry points.
void APPLEFlushBufferRangeAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBufferParameteriAPPLE().
void APPLEFlushBufferRangeAPI::bufferParameterI(GLenum target, GLenum pname,
                                                GLint param) const
{
    static const char *fnName = "glBufferParameteriAPPLE";

    beforeCommand(fnName, _api.glBufferParameteri);
    _api.glBufferParameteri(target, pname, param);
    afterCommand(fnName);
}

// Calls glFlushMappedBufferRangeAPPLE().
void APPLEFlushBufferRangeAPI::flushMappedBufferRange(BufferTarget target,
                                                      GLintptr offset,
                                                      GLsizeiptr size) const
{
    static const char *fnName = "glFlushMappedBufferRangeAPPLE";

    beforeCommand(fnName, _api.glFlushMappedBufferRange);
    _api.glFlushMappedBufferRange(toScalar(target), offset, size);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// APPLEObjectPurgeableAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_APPLE_object_purgeable extension.
APPLEObjectPurgeableAPI::APPLEObjectPurgeableAPI() :
    BaseExtension("GL_APPLE_object_purgeable")
{
}

// Grant read-only access to the underlying function pointers.
const APPLEObjectPurgeable &APPLEObjectPurgeableAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_APPLE_object_purgeable entry points.
void APPLEObjectPurgeableAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetObjectParameterivAPPLE().
void APPLEObjectPurgeableAPI::getObjectParameterIV(GLenum objectType,
                                                   GLuint name, GLenum pname,
                                                   GLint *params) const
{
    static const char *fnName = "glGetObjectParameterivAPPLE";

    beforeCommand(fnName, _api.glGetObjectParameteriv);
    _api.glGetObjectParameteriv(objectType, name, pname, params);
    afterCommand(fnName);
}

// Calls glObjectPurgeableAPPLE().
GLenum APPLEObjectPurgeableAPI::objectPurgeable(GLenum objectType, GLuint name,
                                                GLenum option) const
{
    static const char *fnName = "glObjectPurgeableAPPLE";

    beforeCommand(fnName, _api.glObjectPurgeable);
    GLenum result = _api.glObjectPurgeable(objectType, name, option);
    afterCommand(fnName);

    return result;
}

// Calls glObjectUnpurgeableAPPLE().
GLenum APPLEObjectPurgeableAPI::objectUnpurgeable(GLenum objectType, GLuint name,
                                                  GLenum option) const
{
    static const char *fnName = "glObjectUnpurgeableAPPLE";

    beforeCommand(fnName, _api.glObjectUnpurgeable);
    GLenum result = _api.glObjectUnpurgeable(objectType, name, option);
    afterCommand(fnName);

    return result;
}

////////////////////////////////////////////////////////////////////////////////
// APPLETextureRangeAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_APPLE_texture_range extension.
APPLETextureRangeAPI::APPLETextureRangeAPI() :
    BaseExtension("GL_APPLE_texture_range")
{
}

// Grant read-only access to the underlying function pointers.
const APPLETextureRange &APPLETextureRangeAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_APPLE_texture_range entry points.
void APPLETextureRangeAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetTexParameterPointervAPPLE().
void APPLETextureRangeAPI::getTexParameterPointerV(GLenum target, GLenum pname,
                                                   void **params) const
{
    static const char *fnName = "glGetTexParameterPointervAPPLE";

    beforeCommand(fnName, _api.glGetTexParameterPointerv);
    _api.glGetTexParameterPointerv(target, pname, params);
    afterCommand(fnName);
}

// Calls glTextureRangeAPPLE().
void APPLETextureRangeAPI::textureRange(GLenum target, GLsizei length,
                                        const void *pointer) const
{
    static const char *fnName = "glTextureRangeAPPLE";

    beforeCommand(fnName, _api.glTextureRange);
    _api.glTextureRange(target, length, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// APPLEVertexArrayObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_APPLE_vertex_array_object extension.
APPLEVertexArrayObjectAPI::APPLEVertexArrayObjectAPI() :
    BaseExtension("GL_APPLE_vertex_array_object")
{
}

// Grant read-only access to the underlying function pointers.
const APPLEVertexArrayObject &APPLEVertexArrayObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_APPLE_vertex_array_object entry points.
void APPLEVertexArrayObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindVertexArrayAPPLE().
void APPLEVertexArrayObjectAPI::bindVertexArray(VertexArrayName array) const
{
    static const char *fnName = "glBindVertexArrayAPPLE";

    beforeCommand(fnName, _api.glBindVertexArray);
    _api.glBindVertexArray(array.ID);
    afterCommand(fnName);
}

// Calls glDeleteVertexArraysAPPLE().
void APPLEVertexArrayObjectAPI::deleteVertexArrays(GLsizei n,
                                                   const VertexArrayName *arrays) const
{
    static const char *fnName = "glDeleteVertexArraysAPPLE";

    beforeCommand(fnName, _api.glDeleteVertexArrays);
    _api.glDeleteVertexArrays(n, reinterpret_cast<const GLuint *>(arrays));
    afterCommand(fnName);
}

// Calls glGenVertexArraysAPPLE().
void APPLEVertexArrayObjectAPI::genVertexArrays(GLsizei n,
                                                VertexArrayName *arrays) const
{
    static const char *fnName = "glGenVertexArraysAPPLE";

    beforeCommand(fnName, _api.glGenVertexArrays);
    _api.glGenVertexArrays(n, reinterpret_cast<GLuint *>(arrays));
    afterCommand(fnName);
}

// Calls glIsVertexArrayAPPLE().
Boolean APPLEVertexArrayObjectAPI::isVertexArray(VertexArrayName array) const
{
    static const char *fnName = "glIsVertexArrayAPPLE";

    beforeCommand(fnName, _api.glIsVertexArray);
    GLboolean result = _api.glIsVertexArray(array.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

////////////////////////////////////////////////////////////////////////////////
// APPLEVertexArrayRangeAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_APPLE_vertex_array_range extension.
APPLEVertexArrayRangeAPI::APPLEVertexArrayRangeAPI() :
    BaseExtension("GL_APPLE_vertex_array_range")
{
}

// Grant read-only access to the underlying function pointers.
const APPLEVertexArrayRange &APPLEVertexArrayRangeAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_APPLE_vertex_array_range entry points.
void APPLEVertexArrayRangeAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFlushVertexArrayRangeAPPLE().
void APPLEVertexArrayRangeAPI::flushVertexArrayRange(GLsizei length,
                                                     void *pointer) const
{
    static const char *fnName = "glFlushVertexArrayRangeAPPLE";

    beforeCommand(fnName, _api.glFlushVertexArrayRange);
    _api.glFlushVertexArrayRange(length, pointer);
    afterCommand(fnName);
}

// Calls glVertexArrayParameteriAPPLE().
void APPLEVertexArrayRangeAPI::vertexArrayParameterI(VertexArrayPNameAPPLE pname,
                                                     GLint param) const
{
    static const char *fnName = "glVertexArrayParameteriAPPLE";

    beforeCommand(fnName, _api.glVertexArrayParameteri);
    _api.glVertexArrayParameteri(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glVertexArrayRangeAPPLE().
void APPLEVertexArrayRangeAPI::vertexArrayRange(GLsizei length, void *pointer) const
{
    static const char *fnName = "glVertexArrayRangeAPPLE";

    beforeCommand(fnName, _api.glVertexArrayRange);
    _api.glVertexArrayRange(length, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// APPLEVertexProgramEvaluatorsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_APPLE_vertex_program_evaluators extension.
APPLEVertexProgramEvaluatorsAPI::APPLEVertexProgramEvaluatorsAPI() :
    BaseExtension("GL_APPLE_vertex_program_evaluators")
{
}

// Grant read-only access to the underlying function pointers.
const APPLEVertexProgramEvaluators &APPLEVertexProgramEvaluatorsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_APPLE_vertex_program_evaluators entry points.
void APPLEVertexProgramEvaluatorsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDisableVertexAttribAPPLE().
void APPLEVertexProgramEvaluatorsAPI::disableVertexAttrib(GLuint index,
                                                          GLenum pname) const
{
    static const char *fnName = "glDisableVertexAttribAPPLE";

    beforeCommand(fnName, _api.glDisableVertexAttrib);
    _api.glDisableVertexAttrib(index, pname);
    afterCommand(fnName);
}

// Calls glEnableVertexAttribAPPLE().
void APPLEVertexProgramEvaluatorsAPI::enableVertexAttrib(GLuint index,
                                                         GLenum pname) const
{
    static const char *fnName = "glEnableVertexAttribAPPLE";

    beforeCommand(fnName, _api.glEnableVertexAttrib);
    _api.glEnableVertexAttrib(index, pname);
    afterCommand(fnName);
}

// Calls glIsVertexAttribEnabledAPPLE().
Boolean APPLEVertexProgramEvaluatorsAPI::isVertexAttribEnabled(GLuint index,
                                                               GLenum pname) const
{
    static const char *fnName = "glIsVertexAttribEnabledAPPLE";

    beforeCommand(fnName, _api.glIsVertexAttribEnabled);
    GLboolean result = _api.glIsVertexAttribEnabled(index, pname);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMapVertexAttrib1dAPPLE().
void APPLEVertexProgramEvaluatorsAPI::mapVertexAttrib1D(GLuint index,
                                                        GLuint size, GLdouble u1,
                                                        GLdouble u2,
                                                        GLint stride,
                                                        GLint order,
                                                        const GLdouble *points) const
{
    static const char *fnName = "glMapVertexAttrib1dAPPLE";

    beforeCommand(fnName, _api.glMapVertexAttrib1d);
    _api.glMapVertexAttrib1d(index, size, u1, u2, stride, order, points);
    afterCommand(fnName);
}

// Calls glMapVertexAttrib1fAPPLE().
void APPLEVertexProgramEvaluatorsAPI::mapVertexAttrib1F(GLuint index,
                                                        GLuint size, GLfloat u1,
                                                        GLfloat u2, GLint stride,
                                                        GLint order,
                                                        const GLfloat *points) const
{
    static const char *fnName = "glMapVertexAttrib1fAPPLE";

    beforeCommand(fnName, _api.glMapVertexAttrib1f);
    _api.glMapVertexAttrib1f(index, size, u1, u2, stride, order, points);
    afterCommand(fnName);
}

// Calls glMapVertexAttrib2dAPPLE().
void APPLEVertexProgramEvaluatorsAPI::mapVertexAttrib2D(GLuint index,
                                                        GLuint size, GLdouble u1,
                                                        GLdouble u2,
                                                        GLint ustride,
                                                        GLint uorder,
                                                        GLdouble v1, GLdouble v2,
                                                        GLint vstride,
                                                        GLint vorder,
                                                        const GLdouble *points) const
{
    static const char *fnName = "glMapVertexAttrib2dAPPLE";

    beforeCommand(fnName, _api.glMapVertexAttrib2d);
    _api.glMapVertexAttrib2d(index, size, u1, u2, ustride, uorder, v1, v2,
                             vstride, vorder, points);
    afterCommand(fnName);
}

// Calls glMapVertexAttrib2fAPPLE().
void APPLEVertexProgramEvaluatorsAPI::mapVertexAttrib2F(GLuint index,
                                                        GLuint size, GLfloat u1,
                                                        GLfloat u2,
                                                        GLint ustride,
                                                        GLint uorder, GLfloat v1,
                                                        GLfloat v2,
                                                        GLint vstride,
                                                        GLint vorder,
                                                        const GLfloat *points) const
{
    static const char *fnName = "glMapVertexAttrib2fAPPLE";

    beforeCommand(fnName, _api.glMapVertexAttrib2f);
    _api.glMapVertexAttrib2f(index, size, u1, u2, ustride, uorder, v1, v2,
                             vstride, vorder, points);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBES32CompatibilityAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_ES3_2_compatibility extension.
ARBES32CompatibilityAPI::ARBES32CompatibilityAPI() :
    BaseExtension("GL_ARB_ES3_2_compatibility")
{
}

// Grant read-only access to the underlying function pointers.
const ARBES32Compatibility &ARBES32CompatibilityAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_ES3_2_compatibility entry points.
void ARBES32CompatibilityAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPrimitiveBoundingBoxARB().
void ARBES32CompatibilityAPI::primitiveBoundingBox(GLfloat minX, GLfloat minY,
                                                   GLfloat minZ, GLfloat minW,
                                                   GLfloat maxX, GLfloat maxY,
                                                   GLfloat maxZ, GLfloat maxW) const
{
    static const char *fnName = "glPrimitiveBoundingBoxARB";

    beforeCommand(fnName, _api.glPrimitiveBoundingBox);
    _api.glPrimitiveBoundingBox(minX, minY, minZ, minW, maxX, maxY, maxZ, maxW);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBBindlessTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_bindless_texture extension.
ARBBindlessTextureAPI::ARBBindlessTextureAPI() :
    BaseExtension("GL_ARB_bindless_texture")
{
}

// Grant read-only access to the underlying function pointers.
const ARBBindlessTexture &ARBBindlessTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_bindless_texture entry points.
void ARBBindlessTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetImageHandleARB().
GLuint64 ARBBindlessTextureAPI::getImageHandle(TextureName texture, GLint level,
                                               Boolean layered, GLint layer,
                                               PixelFormat format) const
{
    static const char *fnName = "glGetImageHandleARB";

    beforeCommand(fnName, _api.glGetImageHandle);
    GLuint64 result = _api.glGetImageHandle(texture.ID, level, toScalar(layered),
                                            layer, toScalar(format));
    afterCommand(fnName);

    return result;
}

// Calls glGetTextureHandleARB().
GLuint64 ARBBindlessTextureAPI::getTextureHandle(TextureName texture) const
{
    static const char *fnName = "glGetTextureHandleARB";

    beforeCommand(fnName, _api.glGetTextureHandle);
    GLuint64 result = _api.glGetTextureHandle(texture.ID);
    afterCommand(fnName);

    return result;
}

// Calls glGetTextureSamplerHandleARB().
GLuint64 ARBBindlessTextureAPI::getTextureSamplerHandle(TextureName texture,
                                                        SamplerName sampler) const
{
    static const char *fnName = "glGetTextureSamplerHandleARB";

    beforeCommand(fnName, _api.glGetTextureSamplerHandle);
    GLuint64 result = _api.glGetTextureSamplerHandle(texture.ID, sampler.ID);
    afterCommand(fnName);

    return result;
}

// Calls glGetVertexAttribLui64vARB().
void ARBBindlessTextureAPI::getVertexAttribLUI64(GLuint index,
                                                 VertexAttribEnum pname,
                                                 GLuint64EXT *params) const
{
    static const char *fnName = "glGetVertexAttribLui64vARB";

    beforeCommand(fnName, _api.glGetVertexAttribLui64v);
    _api.glGetVertexAttribLui64v(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsImageHandleResidentARB().
Boolean ARBBindlessTextureAPI::isImageHandleResident(GLuint64 handle) const
{
    static const char *fnName = "glIsImageHandleResidentARB";

    beforeCommand(fnName, _api.glIsImageHandleResident);
    GLboolean result = _api.glIsImageHandleResident(handle);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsTextureHandleResidentARB().
Boolean ARBBindlessTextureAPI::isTextureHandleResident(GLuint64 handle) const
{
    static const char *fnName = "glIsTextureHandleResidentARB";

    beforeCommand(fnName, _api.glIsTextureHandleResident);
    GLboolean result = _api.glIsTextureHandleResident(handle);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMakeImageHandleNonResidentARB().
void ARBBindlessTextureAPI::makeImageHandleNonResident(GLuint64 handle) const
{
    static const char *fnName = "glMakeImageHandleNonResidentARB";

    beforeCommand(fnName, _api.glMakeImageHandleNonResident);
    _api.glMakeImageHandleNonResident(handle);
    afterCommand(fnName);
}

// Calls glMakeImageHandleResidentARB().
void ARBBindlessTextureAPI::makeImageHandleResident(GLuint64 handle,
                                                    GLenum access) const
{
    static const char *fnName = "glMakeImageHandleResidentARB";

    beforeCommand(fnName, _api.glMakeImageHandleResident);
    _api.glMakeImageHandleResident(handle, access);
    afterCommand(fnName);
}

// Calls glMakeTextureHandleNonResidentARB().
void ARBBindlessTextureAPI::makeTextureHandleNonResident(GLuint64 handle) const
{
    static const char *fnName = "glMakeTextureHandleNonResidentARB";

    beforeCommand(fnName, _api.glMakeTextureHandleNonResident);
    _api.glMakeTextureHandleNonResident(handle);
    afterCommand(fnName);
}

// Calls glMakeTextureHandleResidentARB().
void ARBBindlessTextureAPI::makeTextureHandleResident(GLuint64 handle) const
{
    static const char *fnName = "glMakeTextureHandleResidentARB";

    beforeCommand(fnName, _api.glMakeTextureHandleResident);
    _api.glMakeTextureHandleResident(handle);
    afterCommand(fnName);
}

// Calls glProgramUniformHandleui64ARB().
void ARBBindlessTextureAPI::programUniformHandleUI64(ProgramName program,
                                                     GLint location,
                                                     GLuint64 value) const
{
    static const char *fnName = "glProgramUniformHandleui64ARB";

    beforeCommand(fnName, _api.glProgramUniformHandleui64);
    _api.glProgramUniformHandleui64(program.ID, location, value);
    afterCommand(fnName);
}

// Calls glProgramUniformHandleui64vARB().
void ARBBindlessTextureAPI::programUniformHandleUI64(ProgramName program,
                                                     GLint location,
                                                     GLsizei count,
                                                     const GLuint64 *values) const
{
    static const char *fnName = "glProgramUniformHandleui64vARB";

    beforeCommand(fnName, _api.glProgramUniformHandleui64v);
    _api.glProgramUniformHandleui64v(program.ID, location, count, values);
    afterCommand(fnName);
}

// Calls glUniformHandleui64ARB().
void ARBBindlessTextureAPI::uniformHandleUI64(GLint location, GLuint64 value) const
{
    static const char *fnName = "glUniformHandleui64ARB";

    beforeCommand(fnName, _api.glUniformHandleui64);
    _api.glUniformHandleui64(location, value);
    afterCommand(fnName);
}

// Calls glUniformHandleui64vARB().
void ARBBindlessTextureAPI::uniformHandleUI64(GLint location, GLsizei count,
                                              const GLuint64 *value) const
{
    static const char *fnName = "glUniformHandleui64vARB";

    beforeCommand(fnName, _api.glUniformHandleui64v);
    _api.glUniformHandleui64v(location, count, value);
    afterCommand(fnName);
}

// Calls glVertexAttribL1ui64ARB().
void ARBBindlessTextureAPI::vertexAttribL1UI64(GLuint index, GLuint64EXT x) const
{
    static const char *fnName = "glVertexAttribL1ui64ARB";

    beforeCommand(fnName, _api.glVertexAttribL1ui64);
    _api.glVertexAttribL1ui64(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribL1ui64vARB().
void ARBBindlessTextureAPI::vertexAttribL1UI64(GLuint index,
                                               const GLuint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL1ui64vARB";

    beforeCommand(fnName, _api.glVertexAttribL1ui64v);
    _api.glVertexAttribL1ui64v(index, v);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBClEventAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_cl_event extension.
ARBClEventAPI::ARBClEventAPI() :
    BaseExtension("GL_ARB_cl_event")
{
}

// Grant read-only access to the underlying function pointers.
const ARBClEvent &ARBClEventAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_cl_event entry points.
void ARBClEventAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCreateSyncFromCLeventARB().
SyncName ARBClEventAPI::createSyncFromCLevent(struct _cl_context *context,
                                              struct _cl_event *event,
                                              GLbitfield flags) const
{
    static const char *fnName = "glCreateSyncFromCLeventARB";

    beforeCommand(fnName, _api.glCreateSyncFromCLevent);
    GLsync result = _api.glCreateSyncFromCLevent(context, event, flags);
    afterCommand(fnName);

    return SyncName(result);
}

////////////////////////////////////////////////////////////////////////////////
// ARBColorBufferFloatAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_color_buffer_float extension.
ARBColorBufferFloatAPI::ARBColorBufferFloatAPI() :
    BaseExtension("GL_ARB_color_buffer_float")
{
}

// Grant read-only access to the underlying function pointers.
const ARBColorBufferFloat &ARBColorBufferFloatAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_color_buffer_float entry points.
void ARBColorBufferFloatAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glClampColorARB().
void ARBColorBufferFloatAPI::clampColor(ClampColorTargetARB target,
                                        ClampColorModeARB clamp) const
{
    static const char *fnName = "glClampColorARB";

    beforeCommand(fnName, _api.glClampColor);
    _api.glClampColor(toScalar(target), toScalar(clamp));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBComputeVariableGroupSizeAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_compute_variable_group_size extension.
ARBComputeVariableGroupSizeAPI::ARBComputeVariableGroupSizeAPI() :
    BaseExtension("GL_ARB_compute_variable_group_size")
{
}

// Grant read-only access to the underlying function pointers.
const ARBComputeVariableGroupSize &ARBComputeVariableGroupSizeAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_compute_variable_group_size entry points.
void ARBComputeVariableGroupSizeAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDispatchComputeGroupSizeARB().
void ARBComputeVariableGroupSizeAPI::dispatchComputeGroupSize(GLuint num_groups_x,
                                                              GLuint num_groups_y,
                                                              GLuint num_groups_z,
                                                              GLuint group_size_x,
                                                              GLuint group_size_y,
                                                              GLuint group_size_z) const
{
    static const char *fnName = "glDispatchComputeGroupSizeARB";

    beforeCommand(fnName, _api.glDispatchComputeGroupSize);
    _api.glDispatchComputeGroupSize(num_groups_x, num_groups_y, num_groups_z,
                                    group_size_x, group_size_y, group_size_z);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBDebugOutputAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_debug_output extension.
ARBDebugOutputAPI::ARBDebugOutputAPI() :
    BaseExtension("GL_ARB_debug_output")
{
}

// Grant read-only access to the underlying function pointers.
const ARBDebugOutput &ARBDebugOutputAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_debug_output entry points.
void ARBDebugOutputAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDebugMessageCallbackARB().
void ARBDebugOutputAPI::debugMessageCallback(GLDEBUGPROCARB callback,
                                             const void *userParam) const
{
    static const char *fnName = "glDebugMessageCallbackARB";

    beforeCommand(fnName, _api.glDebugMessageCallback);
    _api.glDebugMessageCallback(callback, userParam);
    afterCommand(fnName);
}

// Calls glDebugMessageControlARB().
void ARBDebugOutputAPI::debugMessageControl(DebugSource source, DebugType type,
                                            DebugSeverity severity,
                                            GLsizei count, const GLuint *ids,
                                            Boolean enabled) const
{
    static const char *fnName = "glDebugMessageControlARB";

    beforeCommand(fnName, _api.glDebugMessageControl);
    _api.glDebugMessageControl(toScalar(source), toScalar(type),
                               toScalar(severity), count, ids, toScalar(enabled));
    afterCommand(fnName);
}

// Calls glDebugMessageInsertARB().
void ARBDebugOutputAPI::debugMessageInsert(DebugSource source, DebugType type,
                                           GLuint id, DebugSeverity severity,
                                           GLsizei length, const GLchar *buf) const
{
    static const char *fnName = "glDebugMessageInsertARB";

    beforeCommand(fnName, _api.glDebugMessageInsert);
    _api.glDebugMessageInsert(toScalar(source), toScalar(type), id,
                              toScalar(severity), length, buf);
    afterCommand(fnName);
}

// Calls glGetDebugMessageLogARB().
GLuint ARBDebugOutputAPI::getDebugMessageLog(GLuint count, GLsizei bufSize,
                                             DebugSource *sources,
                                             DebugType *types, GLuint *ids,
                                             DebugSeverity *severities,
                                             GLsizei *lengths,
                                             GLchar *messageLog) const
{
    static const char *fnName = "glGetDebugMessageLogARB";

    beforeCommand(fnName, _api.glGetDebugMessageLog);
    GLuint result = _api.glGetDebugMessageLog(count, bufSize,
                                              toScalarPtr(sources),
                                              toScalarPtr(types), ids,
                                              toScalarPtr(severities), lengths,
                                              messageLog);
    afterCommand(fnName);

    return result;
}

////////////////////////////////////////////////////////////////////////////////
// ARBDrawBuffersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_draw_buffers extension.
ARBDrawBuffersAPI::ARBDrawBuffersAPI() :
    BaseExtension("GL_ARB_draw_buffers")
{
}

// Grant read-only access to the underlying function pointers.
const ARBDrawBuffers &ARBDrawBuffersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_draw_buffers entry points.
void ARBDrawBuffersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawBuffersARB().
void ARBDrawBuffersAPI::drawBuffers(GLsizei n, const DrawBufferMode *bufs) const
{
    static const char *fnName = "glDrawBuffersARB";

    beforeCommand(fnName, _api.glDrawBuffers);
    _api.glDrawBuffers(n, toScalarPtr(bufs));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBDrawBuffersBlendAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_draw_buffers_blend extension.
ARBDrawBuffersBlendAPI::ARBDrawBuffersBlendAPI() :
    BaseExtension("GL_ARB_draw_buffers_blend")
{
}

// Grant read-only access to the underlying function pointers.
const ARBDrawBuffersBlend &ARBDrawBuffersBlendAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_draw_buffers_blend entry points.
void ARBDrawBuffersBlendAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendEquationSeparateiARB().
void ARBDrawBuffersBlendAPI::blendEquationSeparateI(GLuint buf,
                                                    BlendEquationModeEXT modeRGB,
                                                    BlendEquationModeEXT modeAlpha) const
{
    static const char *fnName = "glBlendEquationSeparateiARB";

    beforeCommand(fnName, _api.glBlendEquationSeparatei);
    _api.glBlendEquationSeparatei(buf, toScalar(modeRGB), toScalar(modeAlpha));
    afterCommand(fnName);
}

// Calls glBlendEquationiARB().
void ARBDrawBuffersBlendAPI::blendEquationI(GLuint buf,
                                            BlendEquationModeEXT mode) const
{
    static const char *fnName = "glBlendEquationiARB";

    beforeCommand(fnName, _api.glBlendEquationi);
    _api.glBlendEquationi(buf, toScalar(mode));
    afterCommand(fnName);
}

// Calls glBlendFuncSeparateiARB().
void ARBDrawBuffersBlendAPI::blendFuncSeparateI(GLuint buf,
                                                BlendingFactor srcRGB,
                                                BlendingFactor dstRGB,
                                                BlendingFactor srcAlpha,
                                                BlendingFactor dstAlpha) const
{
    static const char *fnName = "glBlendFuncSeparateiARB";

    beforeCommand(fnName, _api.glBlendFuncSeparatei);
    _api.glBlendFuncSeparatei(buf, toScalar(srcRGB), toScalar(dstRGB),
                              toScalar(srcAlpha), toScalar(dstAlpha));
    afterCommand(fnName);
}

// Calls glBlendFunciARB().
void ARBDrawBuffersBlendAPI::blendFuncI(GLuint buf, BlendingFactor src,
                                        BlendingFactor dst) const
{
    static const char *fnName = "glBlendFunciARB";

    beforeCommand(fnName, _api.glBlendFunci);
    _api.glBlendFunci(buf, toScalar(src), toScalar(dst));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBDrawInstancedAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_draw_instanced extension.
ARBDrawInstancedAPI::ARBDrawInstancedAPI() :
    BaseExtension("GL_ARB_draw_instanced")
{
}

// Grant read-only access to the underlying function pointers.
const ARBDrawInstanced &ARBDrawInstancedAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_draw_instanced entry points.
void ARBDrawInstancedAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawArraysInstancedARB().
void ARBDrawInstancedAPI::drawArraysInstanced(PrimitiveType mode, GLint first,
                                              GLsizei count, GLsizei primcount) const
{
    static const char *fnName = "glDrawArraysInstancedARB";

    beforeCommand(fnName, _api.glDrawArraysInstanced);
    _api.glDrawArraysInstanced(toScalar(mode), first, count, primcount);
    afterCommand(fnName);
}

// Calls glDrawElementsInstancedARB().
void ARBDrawInstancedAPI::drawElementsInstanced(PrimitiveType mode,
                                                GLsizei count,
                                                DrawElementsType type,
                                                const void *indices,
                                                GLsizei primcount) const
{
    static const char *fnName = "glDrawElementsInstancedARB";

    beforeCommand(fnName, _api.glDrawElementsInstanced);
    _api.glDrawElementsInstanced(toScalar(mode), count, toScalar(type), indices,
                                 primcount);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBFragmentProgramAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_fragment_program extension.
ARBFragmentProgramAPI::ARBFragmentProgramAPI() :
    BaseExtension("GL_ARB_fragment_program")
{
}

// Grant read-only access to the underlying function pointers.
const ARBFragmentProgram &ARBFragmentProgramAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_fragment_program entry points.
void ARBFragmentProgramAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindProgramARB().
void ARBFragmentProgramAPI::bindProgram(ProgramTarget target,
                                        ProgramName program) const
{
    static const char *fnName = "glBindProgramARB";

    beforeCommand(fnName, _api.glBindProgram);
    _api.glBindProgram(toScalar(target), program.ID);
    afterCommand(fnName);
}

// Calls glDeleteProgramsARB().
void ARBFragmentProgramAPI::deletePrograms(GLsizei n,
                                           const ProgramName *programs) const
{
    static const char *fnName = "glDeleteProgramsARB";

    beforeCommand(fnName, _api.glDeletePrograms);
    _api.glDeletePrograms(n, reinterpret_cast<const GLuint *>(programs));
    afterCommand(fnName);
}

// Calls glGenProgramsARB().
void ARBFragmentProgramAPI::genPrograms(GLsizei n, ProgramName *programs) const
{
    static const char *fnName = "glGenProgramsARB";

    beforeCommand(fnName, _api.glGenPrograms);
    _api.glGenPrograms(n, reinterpret_cast<GLuint *>(programs));
    afterCommand(fnName);
}

// Calls glGetProgramEnvParameterdvARB().
void ARBFragmentProgramAPI::getProgramEnvParameterDV(ProgramTarget target,
                                                     GLuint index,
                                                     GLdouble *params) const
{
    static const char *fnName = "glGetProgramEnvParameterdvARB";

    beforeCommand(fnName, _api.glGetProgramEnvParameterdv);
    _api.glGetProgramEnvParameterdv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glGetProgramEnvParameterfvARB().
void ARBFragmentProgramAPI::getProgramEnvParameterFV(ProgramTarget target,
                                                     GLuint index,
                                                     GLfloat *params) const
{
    static const char *fnName = "glGetProgramEnvParameterfvARB";

    beforeCommand(fnName, _api.glGetProgramEnvParameterfv);
    _api.glGetProgramEnvParameterfv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glGetProgramLocalParameterdvARB().
void ARBFragmentProgramAPI::getProgramLocalParameterDV(ProgramTarget target,
                                                       GLuint index,
                                                       GLdouble *params) const
{
    static const char *fnName = "glGetProgramLocalParameterdvARB";

    beforeCommand(fnName, _api.glGetProgramLocalParameterdv);
    _api.glGetProgramLocalParameterdv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glGetProgramLocalParameterfvARB().
void ARBFragmentProgramAPI::getProgramLocalParameterFV(ProgramTarget target,
                                                       GLuint index,
                                                       GLfloat *params) const
{
    static const char *fnName = "glGetProgramLocalParameterfvARB";

    beforeCommand(fnName, _api.glGetProgramLocalParameterfv);
    _api.glGetProgramLocalParameterfv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glGetProgramStringARB().
void ARBFragmentProgramAPI::getProgramString(ProgramTarget target,
                                             ProgramStringProperty pname,
                                             void *string) const
{
    static const char *fnName = "glGetProgramStringARB";

    beforeCommand(fnName, _api.glGetProgramString);
    _api.glGetProgramString(toScalar(target), toScalar(pname), string);
    afterCommand(fnName);
}

// Calls glGetProgramivARB().
void ARBFragmentProgramAPI::getProgramIV(ProgramTarget target,
                                         ProgramProperty pname, GLint *params) const
{
    static const char *fnName = "glGetProgramivARB";

    beforeCommand(fnName, _api.glGetProgramiv);
    _api.glGetProgramiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsProgramARB().
Boolean ARBFragmentProgramAPI::isProgram(ProgramName program) const
{
    static const char *fnName = "glIsProgramARB";

    beforeCommand(fnName, _api.glIsProgram);
    GLboolean result = _api.glIsProgram(program.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glProgramEnvParameter4dARB().
void ARBFragmentProgramAPI::programEnvParameter4D(ProgramTarget target,
                                                  GLuint index, GLdouble x,
                                                  GLdouble y, GLdouble z,
                                                  GLdouble w) const
{
    static const char *fnName = "glProgramEnvParameter4dARB";

    beforeCommand(fnName, _api.glProgramEnvParameter4d);
    _api.glProgramEnvParameter4d(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramEnvParameter4dvARB().
void ARBFragmentProgramAPI::programEnvParameter4DV(ProgramTarget target,
                                                   GLuint index,
                                                   const GLdouble *params) const
{
    static const char *fnName = "glProgramEnvParameter4dvARB";

    beforeCommand(fnName, _api.glProgramEnvParameter4dv);
    _api.glProgramEnvParameter4dv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramEnvParameter4fARB().
void ARBFragmentProgramAPI::programEnvParameter4F(ProgramTarget target,
                                                  GLuint index, GLfloat x,
                                                  GLfloat y, GLfloat z,
                                                  GLfloat w) const
{
    static const char *fnName = "glProgramEnvParameter4fARB";

    beforeCommand(fnName, _api.glProgramEnvParameter4f);
    _api.glProgramEnvParameter4f(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramEnvParameter4fvARB().
void ARBFragmentProgramAPI::programEnvParameter4FV(ProgramTarget target,
                                                   GLuint index,
                                                   const GLfloat *params) const
{
    static const char *fnName = "glProgramEnvParameter4fvARB";

    beforeCommand(fnName, _api.glProgramEnvParameter4fv);
    _api.glProgramEnvParameter4fv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramLocalParameter4dARB().
void ARBFragmentProgramAPI::programLocalParameter4D(ProgramTarget target,
                                                    GLuint index, GLdouble x,
                                                    GLdouble y, GLdouble z,
                                                    GLdouble w) const
{
    static const char *fnName = "glProgramLocalParameter4dARB";

    beforeCommand(fnName, _api.glProgramLocalParameter4d);
    _api.glProgramLocalParameter4d(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramLocalParameter4dvARB().
void ARBFragmentProgramAPI::programLocalParameter4DV(ProgramTarget target,
                                                     GLuint index,
                                                     const GLdouble *params) const
{
    static const char *fnName = "glProgramLocalParameter4dvARB";

    beforeCommand(fnName, _api.glProgramLocalParameter4dv);
    _api.glProgramLocalParameter4dv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramLocalParameter4fARB().
void ARBFragmentProgramAPI::programLocalParameter4F(ProgramTarget target,
                                                    GLuint index, GLfloat x,
                                                    GLfloat y, GLfloat z,
                                                    GLfloat w) const
{
    static const char *fnName = "glProgramLocalParameter4fARB";

    beforeCommand(fnName, _api.glProgramLocalParameter4f);
    _api.glProgramLocalParameter4f(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramLocalParameter4fvARB().
void ARBFragmentProgramAPI::programLocalParameter4FV(ProgramTarget target,
                                                     GLuint index,
                                                     const GLfloat *params) const
{
    static const char *fnName = "glProgramLocalParameter4fvARB";

    beforeCommand(fnName, _api.glProgramLocalParameter4fv);
    _api.glProgramLocalParameter4fv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramStringARB().
void ARBFragmentProgramAPI::programString(ProgramTarget target,
                                          ProgramFormat format, GLsizei len,
                                          const void *string) const
{
    static const char *fnName = "glProgramStringARB";

    beforeCommand(fnName, _api.glProgramString);
    _api.glProgramString(toScalar(target), toScalar(format), len, string);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBGeometrySHADER4API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_geometry_shader4 extension.
ARBGeometrySHADER4API::ARBGeometrySHADER4API() :
    BaseExtension("GL_ARB_geometry_shader4")
{
}

// Grant read-only access to the underlying function pointers.
const ARBGeometrySHADER4 &ARBGeometrySHADER4API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_geometry_shader4 entry points.
void ARBGeometrySHADER4API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFramebufferTextureARB().
void ARBGeometrySHADER4API::framebufferTexture(FramebufferTarget target,
                                               FramebufferAttachment attachment,
                                               TextureName texture, GLint level) const
{
    static const char *fnName = "glFramebufferTextureARB";

    beforeCommand(fnName, _api.glFramebufferTexture);
    _api.glFramebufferTexture(toScalar(target), toScalar(attachment), texture.ID,
                              level);
    afterCommand(fnName);
}

// Calls glFramebufferTextureFaceARB().
void ARBGeometrySHADER4API::framebufferTextureFace(FramebufferTarget target,
                                                   FramebufferAttachment attachment,
                                                   TextureName texture,
                                                   GLint level,
                                                   TextureTarget face) const
{
    static const char *fnName = "glFramebufferTextureFaceARB";

    beforeCommand(fnName, _api.glFramebufferTextureFace);
    _api.glFramebufferTextureFace(toScalar(target), toScalar(attachment),
                                  texture.ID, level, toScalar(face));
    afterCommand(fnName);
}

// Calls glFramebufferTextureLayerARB().
void ARBGeometrySHADER4API::framebufferTextureLayer(FramebufferTarget target,
                                                    FramebufferAttachment attachment,
                                                    TextureName texture,
                                                    GLint level, GLint layer) const
{
    static const char *fnName = "glFramebufferTextureLayerARB";

    beforeCommand(fnName, _api.glFramebufferTextureLayer);
    _api.glFramebufferTextureLayer(toScalar(target), toScalar(attachment),
                                   texture.ID, level, layer);
    afterCommand(fnName);
}

// Calls glProgramParameteriARB().
void ARBGeometrySHADER4API::programParameterI(ProgramName program,
                                              ProgramParameterPName pname,
                                              GLint value) const
{
    static const char *fnName = "glProgramParameteriARB";

    beforeCommand(fnName, _api.glProgramParameteri);
    _api.glProgramParameteri(program.ID, toScalar(pname), value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBGlSpirvAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_gl_spirv extension.
ARBGlSpirvAPI::ARBGlSpirvAPI() :
    BaseExtension("GL_ARB_gl_spirv")
{
}

// Grant read-only access to the underlying function pointers.
const ARBGlSpirv &ARBGlSpirvAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_gl_spirv entry points.
void ARBGlSpirvAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glSpecializeShaderARB().
void ARBGlSpirvAPI::specializeShader(ShaderName shader,
                                     const GLchar *pEntryPoint,
                                     GLuint numSpecializationConstants,
                                     const GLuint *pConstantIndex,
                                     const GLuint *pConstantValue) const
{
    static const char *fnName = "glSpecializeShaderARB";

    beforeCommand(fnName, _api.glSpecializeShader);
    _api.glSpecializeShader(shader.ID, pEntryPoint, numSpecializationConstants,
                            pConstantIndex, pConstantValue);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBGPUShaderInt64API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_gpu_shader_int64 extension.
ARBGPUShaderInt64API::ARBGPUShaderInt64API() :
    BaseExtension("GL_ARB_gpu_shader_int64")
{
}

// Grant read-only access to the underlying function pointers.
const ARBGPUShaderInt64 &ARBGPUShaderInt64API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_gpu_shader_int64 entry points.
void ARBGPUShaderInt64API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetUniformi64vARB().
void ARBGPUShaderInt64API::getUniformI64V(ProgramName program, GLint location,
                                          GLint64 *params) const
{
    static const char *fnName = "glGetUniformi64vARB";

    beforeCommand(fnName, _api.glGetUniformi64v);
    _api.glGetUniformi64v(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glGetUniformui64vARB().
void ARBGPUShaderInt64API::getUniformUI64(ProgramName program, GLint location,
                                          GLuint64 *params) const
{
    static const char *fnName = "glGetUniformui64vARB";

    beforeCommand(fnName, _api.glGetUniformui64v);
    _api.glGetUniformui64v(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glGetnUniformi64vARB().
void ARBGPUShaderInt64API::getnUniformI64V(ProgramName program, GLint location,
                                           GLsizei bufSize, GLint64 *params) const
{
    static const char *fnName = "glGetnUniformi64vARB";

    beforeCommand(fnName, _api.glGetnUniformi64v);
    _api.glGetnUniformi64v(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glGetnUniformui64vARB().
void ARBGPUShaderInt64API::getnUniformUI64(ProgramName program, GLint location,
                                           GLsizei bufSize, GLuint64 *params) const
{
    static const char *fnName = "glGetnUniformui64vARB";

    beforeCommand(fnName, _api.glGetnUniformui64v);
    _api.glGetnUniformui64v(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glProgramUniform1i64ARB().
void ARBGPUShaderInt64API::programUniform1I64(ProgramName program,
                                              GLint location, GLint64 x) const
{
    static const char *fnName = "glProgramUniform1i64ARB";

    beforeCommand(fnName, _api.glProgramUniform1i64);
    _api.glProgramUniform1i64(program.ID, location, x);
    afterCommand(fnName);
}

// Calls glProgramUniform1i64vARB().
void ARBGPUShaderInt64API::programUniform1I64V(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLint64 *value) const
{
    static const char *fnName = "glProgramUniform1i64vARB";

    beforeCommand(fnName, _api.glProgramUniform1i64v);
    _api.glProgramUniform1i64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform1ui64ARB().
void ARBGPUShaderInt64API::programUniform1UI64(ProgramName program,
                                               GLint location, GLuint64 x) const
{
    static const char *fnName = "glProgramUniform1ui64ARB";

    beforeCommand(fnName, _api.glProgramUniform1ui64);
    _api.glProgramUniform1ui64(program.ID, location, x);
    afterCommand(fnName);
}

// Calls glProgramUniform1ui64vARB().
void ARBGPUShaderInt64API::programUniform1UI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64 *value) const
{
    static const char *fnName = "glProgramUniform1ui64vARB";

    beforeCommand(fnName, _api.glProgramUniform1ui64v);
    _api.glProgramUniform1ui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2i64ARB().
void ARBGPUShaderInt64API::programUniform2I64(ProgramName program,
                                              GLint location, GLint64 x,
                                              GLint64 y) const
{
    static const char *fnName = "glProgramUniform2i64ARB";

    beforeCommand(fnName, _api.glProgramUniform2i64);
    _api.glProgramUniform2i64(program.ID, location, x, y);
    afterCommand(fnName);
}

// Calls glProgramUniform2i64vARB().
void ARBGPUShaderInt64API::programUniform2I64V(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLint64 *value) const
{
    static const char *fnName = "glProgramUniform2i64vARB";

    beforeCommand(fnName, _api.glProgramUniform2i64v);
    _api.glProgramUniform2i64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2ui64ARB().
void ARBGPUShaderInt64API::programUniform2UI64(ProgramName program,
                                               GLint location, GLuint64 x,
                                               GLuint64 y) const
{
    static const char *fnName = "glProgramUniform2ui64ARB";

    beforeCommand(fnName, _api.glProgramUniform2ui64);
    _api.glProgramUniform2ui64(program.ID, location, x, y);
    afterCommand(fnName);
}

// Calls glProgramUniform2ui64vARB().
void ARBGPUShaderInt64API::programUniform2UI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64 *value) const
{
    static const char *fnName = "glProgramUniform2ui64vARB";

    beforeCommand(fnName, _api.glProgramUniform2ui64v);
    _api.glProgramUniform2ui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3i64ARB().
void ARBGPUShaderInt64API::programUniform3I64(ProgramName program,
                                              GLint location, GLint64 x,
                                              GLint64 y, GLint64 z) const
{
    static const char *fnName = "glProgramUniform3i64ARB";

    beforeCommand(fnName, _api.glProgramUniform3i64);
    _api.glProgramUniform3i64(program.ID, location, x, y, z);
    afterCommand(fnName);
}

// Calls glProgramUniform3i64vARB().
void ARBGPUShaderInt64API::programUniform3I64V(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLint64 *value) const
{
    static const char *fnName = "glProgramUniform3i64vARB";

    beforeCommand(fnName, _api.glProgramUniform3i64v);
    _api.glProgramUniform3i64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3ui64ARB().
void ARBGPUShaderInt64API::programUniform3UI64(ProgramName program,
                                               GLint location, GLuint64 x,
                                               GLuint64 y, GLuint64 z) const
{
    static const char *fnName = "glProgramUniform3ui64ARB";

    beforeCommand(fnName, _api.glProgramUniform3ui64);
    _api.glProgramUniform3ui64(program.ID, location, x, y, z);
    afterCommand(fnName);
}

// Calls glProgramUniform3ui64vARB().
void ARBGPUShaderInt64API::programUniform3UI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64 *value) const
{
    static const char *fnName = "glProgramUniform3ui64vARB";

    beforeCommand(fnName, _api.glProgramUniform3ui64v);
    _api.glProgramUniform3ui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4i64ARB().
void ARBGPUShaderInt64API::programUniform4I64(ProgramName program,
                                              GLint location, GLint64 x,
                                              GLint64 y, GLint64 z, GLint64 w) const
{
    static const char *fnName = "glProgramUniform4i64ARB";

    beforeCommand(fnName, _api.glProgramUniform4i64);
    _api.glProgramUniform4i64(program.ID, location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramUniform4i64vARB().
void ARBGPUShaderInt64API::programUniform4I64V(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLint64 *value) const
{
    static const char *fnName = "glProgramUniform4i64vARB";

    beforeCommand(fnName, _api.glProgramUniform4i64v);
    _api.glProgramUniform4i64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4ui64ARB().
void ARBGPUShaderInt64API::programUniform4UI64(ProgramName program,
                                               GLint location, GLuint64 x,
                                               GLuint64 y, GLuint64 z,
                                               GLuint64 w) const
{
    static const char *fnName = "glProgramUniform4ui64ARB";

    beforeCommand(fnName, _api.glProgramUniform4ui64);
    _api.glProgramUniform4ui64(program.ID, location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramUniform4ui64vARB().
void ARBGPUShaderInt64API::programUniform4UI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64 *value) const
{
    static const char *fnName = "glProgramUniform4ui64vARB";

    beforeCommand(fnName, _api.glProgramUniform4ui64v);
    _api.glProgramUniform4ui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glUniform1i64ARB().
void ARBGPUShaderInt64API::uniform1I64(GLint location, GLint64 x) const
{
    static const char *fnName = "glUniform1i64ARB";

    beforeCommand(fnName, _api.glUniform1i64);
    _api.glUniform1i64(location, x);
    afterCommand(fnName);
}

// Calls glUniform1i64vARB().
void ARBGPUShaderInt64API::uniform1I64V(GLint location, GLsizei count,
                                        const GLint64 *value) const
{
    static const char *fnName = "glUniform1i64vARB";

    beforeCommand(fnName, _api.glUniform1i64v);
    _api.glUniform1i64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform1ui64ARB().
void ARBGPUShaderInt64API::uniform1UI64(GLint location, GLuint64 x) const
{
    static const char *fnName = "glUniform1ui64ARB";

    beforeCommand(fnName, _api.glUniform1ui64);
    _api.glUniform1ui64(location, x);
    afterCommand(fnName);
}

// Calls glUniform1ui64vARB().
void ARBGPUShaderInt64API::uniform1UI64(GLint location, GLsizei count,
                                        const GLuint64 *value) const
{
    static const char *fnName = "glUniform1ui64vARB";

    beforeCommand(fnName, _api.glUniform1ui64v);
    _api.glUniform1ui64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2i64ARB().
void ARBGPUShaderInt64API::uniform2I64(GLint location, GLint64 x, GLint64 y) const
{
    static const char *fnName = "glUniform2i64ARB";

    beforeCommand(fnName, _api.glUniform2i64);
    _api.glUniform2i64(location, x, y);
    afterCommand(fnName);
}

// Calls glUniform2i64vARB().
void ARBGPUShaderInt64API::uniform2I64V(GLint location, GLsizei count,
                                        const GLint64 *value) const
{
    static const char *fnName = "glUniform2i64vARB";

    beforeCommand(fnName, _api.glUniform2i64v);
    _api.glUniform2i64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2ui64ARB().
void ARBGPUShaderInt64API::uniform2UI64(GLint location, GLuint64 x, GLuint64 y) const
{
    static const char *fnName = "glUniform2ui64ARB";

    beforeCommand(fnName, _api.glUniform2ui64);
    _api.glUniform2ui64(location, x, y);
    afterCommand(fnName);
}

// Calls glUniform2ui64vARB().
void ARBGPUShaderInt64API::uniform2UI64(GLint location, GLsizei count,
                                        const GLuint64 *value) const
{
    static const char *fnName = "glUniform2ui64vARB";

    beforeCommand(fnName, _api.glUniform2ui64v);
    _api.glUniform2ui64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3i64ARB().
void ARBGPUShaderInt64API::uniform3I64(GLint location, GLint64 x, GLint64 y,
                                       GLint64 z) const
{
    static const char *fnName = "glUniform3i64ARB";

    beforeCommand(fnName, _api.glUniform3i64);
    _api.glUniform3i64(location, x, y, z);
    afterCommand(fnName);
}

// Calls glUniform3i64vARB().
void ARBGPUShaderInt64API::uniform3I64V(GLint location, GLsizei count,
                                        const GLint64 *value) const
{
    static const char *fnName = "glUniform3i64vARB";

    beforeCommand(fnName, _api.glUniform3i64v);
    _api.glUniform3i64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3ui64ARB().
void ARBGPUShaderInt64API::uniform3UI64(GLint location, GLuint64 x, GLuint64 y,
                                        GLuint64 z) const
{
    static const char *fnName = "glUniform3ui64ARB";

    beforeCommand(fnName, _api.glUniform3ui64);
    _api.glUniform3ui64(location, x, y, z);
    afterCommand(fnName);
}

// Calls glUniform3ui64vARB().
void ARBGPUShaderInt64API::uniform3UI64(GLint location, GLsizei count,
                                        const GLuint64 *value) const
{
    static const char *fnName = "glUniform3ui64vARB";

    beforeCommand(fnName, _api.glUniform3ui64v);
    _api.glUniform3ui64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4i64ARB().
void ARBGPUShaderInt64API::uniform4I64(GLint location, GLint64 x, GLint64 y,
                                       GLint64 z, GLint64 w) const
{
    static const char *fnName = "glUniform4i64ARB";

    beforeCommand(fnName, _api.glUniform4i64);
    _api.glUniform4i64(location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glUniform4i64vARB().
void ARBGPUShaderInt64API::uniform4I64V(GLint location, GLsizei count,
                                        const GLint64 *value) const
{
    static const char *fnName = "glUniform4i64vARB";

    beforeCommand(fnName, _api.glUniform4i64v);
    _api.glUniform4i64v(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4ui64ARB().
void ARBGPUShaderInt64API::uniform4UI64(GLint location, GLuint64 x, GLuint64 y,
                                        GLuint64 z, GLuint64 w) const
{
    static const char *fnName = "glUniform4ui64ARB";

    beforeCommand(fnName, _api.glUniform4ui64);
    _api.glUniform4ui64(location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glUniform4ui64vARB().
void ARBGPUShaderInt64API::uniform4UI64(GLint location, GLsizei count,
                                        const GLuint64 *value) const
{
    static const char *fnName = "glUniform4ui64vARB";

    beforeCommand(fnName, _api.glUniform4ui64v);
    _api.glUniform4ui64v(location, count, value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBIndirectParametersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_indirect_parameters extension.
ARBIndirectParametersAPI::ARBIndirectParametersAPI() :
    BaseExtension("GL_ARB_indirect_parameters")
{
}

// Grant read-only access to the underlying function pointers.
const ARBIndirectParameters &ARBIndirectParametersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_indirect_parameters entry points.
void ARBIndirectParametersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMultiDrawArraysIndirectCountARB().
void ARBIndirectParametersAPI::multiDrawArraysIndirectCount(PrimitiveType mode,
                                                            const void *indirect,
                                                            GLintptr drawcount,
                                                            GLsizei maxdrawcount,
                                                            GLsizei stride) const
{
    static const char *fnName = "glMultiDrawArraysIndirectCountARB";

    beforeCommand(fnName, _api.glMultiDrawArraysIndirectCount);
    _api.glMultiDrawArraysIndirectCount(toScalar(mode), indirect, drawcount,
                                        maxdrawcount, stride);
    afterCommand(fnName);
}

// Calls glMultiDrawElementsIndirectCountARB().
void ARBIndirectParametersAPI::multiDrawElementsIndirectCount(PrimitiveType mode,
                                                              DrawElementsType type,
                                                              const void *indirect,
                                                              GLintptr drawcount,
                                                              GLsizei maxdrawcount,
                                                              GLsizei stride) const
{
    static const char *fnName = "glMultiDrawElementsIndirectCountARB";

    beforeCommand(fnName, _api.glMultiDrawElementsIndirectCount);
    _api.glMultiDrawElementsIndirectCount(toScalar(mode), toScalar(type),
                                          indirect, drawcount, maxdrawcount,
                                          stride);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBInstancedArraysAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_instanced_arrays extension.
ARBInstancedArraysAPI::ARBInstancedArraysAPI() :
    BaseExtension("GL_ARB_instanced_arrays")
{
}

// Grant read-only access to the underlying function pointers.
const ARBInstancedArrays &ARBInstancedArraysAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_instanced_arrays entry points.
void ARBInstancedArraysAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glVertexAttribDivisorARB().
void ARBInstancedArraysAPI::vertexAttribDivisor(GLuint index, GLuint divisor) const
{
    static const char *fnName = "glVertexAttribDivisorARB";

    beforeCommand(fnName, _api.glVertexAttribDivisor);
    _api.glVertexAttribDivisor(index, divisor);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBMatrixPaletteAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_matrix_palette extension.
ARBMatrixPaletteAPI::ARBMatrixPaletteAPI() :
    BaseExtension("GL_ARB_matrix_palette")
{
}

// Grant read-only access to the underlying function pointers.
const ARBMatrixPalette &ARBMatrixPaletteAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_matrix_palette entry points.
void ARBMatrixPaletteAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCurrentPaletteMatrixARB().
void ARBMatrixPaletteAPI::currentPaletteMatrix(GLint index) const
{
    static const char *fnName = "glCurrentPaletteMatrixARB";

    beforeCommand(fnName, _api.glCurrentPaletteMatrix);
    _api.glCurrentPaletteMatrix(index);
    afterCommand(fnName);
}

// Calls glMatrixIndexPointerARB().
void ARBMatrixPaletteAPI::matrixIndexPointer(GLint size,
                                             MatrixIndexPointerTypeARB type,
                                             GLsizei stride, const void *pointer) const
{
    static const char *fnName = "glMatrixIndexPointerARB";

    beforeCommand(fnName, _api.glMatrixIndexPointer);
    _api.glMatrixIndexPointer(size, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glMatrixIndexubvARB().
void ARBMatrixPaletteAPI::matrixIndexUBV(GLint size, const GLubyte *indices) const
{
    static const char *fnName = "glMatrixIndexubvARB";

    beforeCommand(fnName, _api.glMatrixIndexubv);
    _api.glMatrixIndexubv(size, indices);
    afterCommand(fnName);
}

// Calls glMatrixIndexuivARB().
void ARBMatrixPaletteAPI::matrixIndexUIV(GLint size, const GLuint *indices) const
{
    static const char *fnName = "glMatrixIndexuivARB";

    beforeCommand(fnName, _api.glMatrixIndexuiv);
    _api.glMatrixIndexuiv(size, indices);
    afterCommand(fnName);
}

// Calls glMatrixIndexusvARB().
void ARBMatrixPaletteAPI::matrixIndexUSV(GLint size, const GLushort *indices) const
{
    static const char *fnName = "glMatrixIndexusvARB";

    beforeCommand(fnName, _api.glMatrixIndexusv);
    _api.glMatrixIndexusv(size, indices);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBMultisampleAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_multisample extension.
ARBMultisampleAPI::ARBMultisampleAPI() :
    BaseExtension("GL_ARB_multisample")
{
}

// Grant read-only access to the underlying function pointers.
const ARBMultisample &ARBMultisampleAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_multisample entry points.
void ARBMultisampleAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glSampleCoverageARB().
void ARBMultisampleAPI::sampleCoverage(GLfloat value, Boolean invert) const
{
    static const char *fnName = "glSampleCoverageARB";

    beforeCommand(fnName, _api.glSampleCoverage);
    _api.glSampleCoverage(value, toScalar(invert));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBMultitextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_multitexture extension.
ARBMultitextureAPI::ARBMultitextureAPI() :
    BaseExtension("GL_ARB_multitexture")
{
}

// Grant read-only access to the underlying function pointers.
const ARBMultitexture &ARBMultitextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_multitexture entry points.
void ARBMultitextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glActiveTextureARB().
void ARBMultitextureAPI::activeTexture(TextureUnit texture) const
{
    static const char *fnName = "glActiveTextureARB";

    beforeCommand(fnName, _api.glActiveTexture);
    _api.glActiveTexture(toScalar(texture));
    afterCommand(fnName);
}

// Calls glClientActiveTextureARB().
void ARBMultitextureAPI::clientActiveTexture(TextureUnit texture) const
{
    static const char *fnName = "glClientActiveTextureARB";

    beforeCommand(fnName, _api.glClientActiveTexture);
    _api.glClientActiveTexture(toScalar(texture));
    afterCommand(fnName);
}

// Calls glMultiTexCoord1dARB().
void ARBMultitextureAPI::multiTexCoord1D(TextureUnit target, GLdouble s) const
{
    static const char *fnName = "glMultiTexCoord1dARB";

    beforeCommand(fnName, _api.glMultiTexCoord1d);
    _api.glMultiTexCoord1d(toScalar(target), s);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1dvARB().
void ARBMultitextureAPI::multiTexCoord1DV(TextureUnit target, const GLdouble *v) const
{
    static const char *fnName = "glMultiTexCoord1dvARB";

    beforeCommand(fnName, _api.glMultiTexCoord1dv);
    _api.glMultiTexCoord1dv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1fARB().
void ARBMultitextureAPI::multiTexCoord1F(TextureUnit target, GLfloat s) const
{
    static const char *fnName = "glMultiTexCoord1fARB";

    beforeCommand(fnName, _api.glMultiTexCoord1f);
    _api.glMultiTexCoord1f(toScalar(target), s);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1fvARB().
void ARBMultitextureAPI::multiTexCoord1FV(TextureUnit target, const GLfloat *v) const
{
    static const char *fnName = "glMultiTexCoord1fvARB";

    beforeCommand(fnName, _api.glMultiTexCoord1fv);
    _api.glMultiTexCoord1fv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1iARB().
void ARBMultitextureAPI::multiTexCoord1I(TextureUnit target, GLint s) const
{
    static const char *fnName = "glMultiTexCoord1iARB";

    beforeCommand(fnName, _api.glMultiTexCoord1i);
    _api.glMultiTexCoord1i(toScalar(target), s);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1ivARB().
void ARBMultitextureAPI::multiTexCoord1IV(TextureUnit target, const GLint *v) const
{
    static const char *fnName = "glMultiTexCoord1ivARB";

    beforeCommand(fnName, _api.glMultiTexCoord1iv);
    _api.glMultiTexCoord1iv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1sARB().
void ARBMultitextureAPI::multiTexCoord1S(TextureUnit target, GLshort s) const
{
    static const char *fnName = "glMultiTexCoord1sARB";

    beforeCommand(fnName, _api.glMultiTexCoord1s);
    _api.glMultiTexCoord1s(toScalar(target), s);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1svARB().
void ARBMultitextureAPI::multiTexCoord1SV(TextureUnit target, const GLshort *v) const
{
    static const char *fnName = "glMultiTexCoord1svARB";

    beforeCommand(fnName, _api.glMultiTexCoord1sv);
    _api.glMultiTexCoord1sv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2dARB().
void ARBMultitextureAPI::multiTexCoord2D(TextureUnit target, GLdouble s,
                                         GLdouble t) const
{
    static const char *fnName = "glMultiTexCoord2dARB";

    beforeCommand(fnName, _api.glMultiTexCoord2d);
    _api.glMultiTexCoord2d(toScalar(target), s, t);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2dvARB().
void ARBMultitextureAPI::multiTexCoord2DV(TextureUnit target, const GLdouble *v) const
{
    static const char *fnName = "glMultiTexCoord2dvARB";

    beforeCommand(fnName, _api.glMultiTexCoord2dv);
    _api.glMultiTexCoord2dv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2fARB().
void ARBMultitextureAPI::multiTexCoord2F(TextureUnit target, GLfloat s,
                                         GLfloat t) const
{
    static const char *fnName = "glMultiTexCoord2fARB";

    beforeCommand(fnName, _api.glMultiTexCoord2f);
    _api.glMultiTexCoord2f(toScalar(target), s, t);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2fvARB().
void ARBMultitextureAPI::multiTexCoord2FV(TextureUnit target, const GLfloat *v) const
{
    static const char *fnName = "glMultiTexCoord2fvARB";

    beforeCommand(fnName, _api.glMultiTexCoord2fv);
    _api.glMultiTexCoord2fv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2iARB().
void ARBMultitextureAPI::multiTexCoord2I(TextureUnit target, GLint s, GLint t) const
{
    static const char *fnName = "glMultiTexCoord2iARB";

    beforeCommand(fnName, _api.glMultiTexCoord2i);
    _api.glMultiTexCoord2i(toScalar(target), s, t);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2ivARB().
void ARBMultitextureAPI::multiTexCoord2IV(TextureUnit target, const GLint *v) const
{
    static const char *fnName = "glMultiTexCoord2ivARB";

    beforeCommand(fnName, _api.glMultiTexCoord2iv);
    _api.glMultiTexCoord2iv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2sARB().
void ARBMultitextureAPI::multiTexCoord2S(TextureUnit target, GLshort s,
                                         GLshort t) const
{
    static const char *fnName = "glMultiTexCoord2sARB";

    beforeCommand(fnName, _api.glMultiTexCoord2s);
    _api.glMultiTexCoord2s(toScalar(target), s, t);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2svARB().
void ARBMultitextureAPI::multiTexCoord2SV(TextureUnit target, const GLshort *v) const
{
    static const char *fnName = "glMultiTexCoord2svARB";

    beforeCommand(fnName, _api.glMultiTexCoord2sv);
    _api.glMultiTexCoord2sv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3dARB().
void ARBMultitextureAPI::multiTexCoord3D(TextureUnit target, GLdouble s,
                                         GLdouble t, GLdouble r) const
{
    static const char *fnName = "glMultiTexCoord3dARB";

    beforeCommand(fnName, _api.glMultiTexCoord3d);
    _api.glMultiTexCoord3d(toScalar(target), s, t, r);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3dvARB().
void ARBMultitextureAPI::multiTexCoord3DV(TextureUnit target, const GLdouble *v) const
{
    static const char *fnName = "glMultiTexCoord3dvARB";

    beforeCommand(fnName, _api.glMultiTexCoord3dv);
    _api.glMultiTexCoord3dv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3fARB().
void ARBMultitextureAPI::multiTexCoord3F(TextureUnit target, GLfloat s,
                                         GLfloat t, GLfloat r) const
{
    static const char *fnName = "glMultiTexCoord3fARB";

    beforeCommand(fnName, _api.glMultiTexCoord3f);
    _api.glMultiTexCoord3f(toScalar(target), s, t, r);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3fvARB().
void ARBMultitextureAPI::multiTexCoord3FV(TextureUnit target, const GLfloat *v) const
{
    static const char *fnName = "glMultiTexCoord3fvARB";

    beforeCommand(fnName, _api.glMultiTexCoord3fv);
    _api.glMultiTexCoord3fv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3iARB().
void ARBMultitextureAPI::multiTexCoord3I(TextureUnit target, GLint s, GLint t,
                                         GLint r) const
{
    static const char *fnName = "glMultiTexCoord3iARB";

    beforeCommand(fnName, _api.glMultiTexCoord3i);
    _api.glMultiTexCoord3i(toScalar(target), s, t, r);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3ivARB().
void ARBMultitextureAPI::multiTexCoord3IV(TextureUnit target, const GLint *v) const
{
    static const char *fnName = "glMultiTexCoord3ivARB";

    beforeCommand(fnName, _api.glMultiTexCoord3iv);
    _api.glMultiTexCoord3iv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3sARB().
void ARBMultitextureAPI::multiTexCoord3S(TextureUnit target, GLshort s,
                                         GLshort t, GLshort r) const
{
    static const char *fnName = "glMultiTexCoord3sARB";

    beforeCommand(fnName, _api.glMultiTexCoord3s);
    _api.glMultiTexCoord3s(toScalar(target), s, t, r);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3svARB().
void ARBMultitextureAPI::multiTexCoord3SV(TextureUnit target, const GLshort *v) const
{
    static const char *fnName = "glMultiTexCoord3svARB";

    beforeCommand(fnName, _api.glMultiTexCoord3sv);
    _api.glMultiTexCoord3sv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4dARB().
void ARBMultitextureAPI::multiTexCoord4D(TextureUnit target, GLdouble s,
                                         GLdouble t, GLdouble r, GLdouble q) const
{
    static const char *fnName = "glMultiTexCoord4dARB";

    beforeCommand(fnName, _api.glMultiTexCoord4d);
    _api.glMultiTexCoord4d(toScalar(target), s, t, r, q);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4dvARB().
void ARBMultitextureAPI::multiTexCoord4DV(TextureUnit target, const GLdouble *v) const
{
    static const char *fnName = "glMultiTexCoord4dvARB";

    beforeCommand(fnName, _api.glMultiTexCoord4dv);
    _api.glMultiTexCoord4dv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4fARB().
void ARBMultitextureAPI::multiTexCoord4F(TextureUnit target, GLfloat s,
                                         GLfloat t, GLfloat r, GLfloat q) const
{
    static const char *fnName = "glMultiTexCoord4fARB";

    beforeCommand(fnName, _api.glMultiTexCoord4f);
    _api.glMultiTexCoord4f(toScalar(target), s, t, r, q);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4fvARB().
void ARBMultitextureAPI::multiTexCoord4FV(TextureUnit target, const GLfloat *v) const
{
    static const char *fnName = "glMultiTexCoord4fvARB";

    beforeCommand(fnName, _api.glMultiTexCoord4fv);
    _api.glMultiTexCoord4fv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4iARB().
void ARBMultitextureAPI::multiTexCoord4I(TextureUnit target, GLint s, GLint t,
                                         GLint r, GLint q) const
{
    static const char *fnName = "glMultiTexCoord4iARB";

    beforeCommand(fnName, _api.glMultiTexCoord4i);
    _api.glMultiTexCoord4i(toScalar(target), s, t, r, q);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4ivARB().
void ARBMultitextureAPI::multiTexCoord4IV(TextureUnit target, const GLint *v) const
{
    static const char *fnName = "glMultiTexCoord4ivARB";

    beforeCommand(fnName, _api.glMultiTexCoord4iv);
    _api.glMultiTexCoord4iv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4sARB().
void ARBMultitextureAPI::multiTexCoord4S(TextureUnit target, GLshort s,
                                         GLshort t, GLshort r, GLshort q) const
{
    static const char *fnName = "glMultiTexCoord4sARB";

    beforeCommand(fnName, _api.glMultiTexCoord4s);
    _api.glMultiTexCoord4s(toScalar(target), s, t, r, q);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4svARB().
void ARBMultitextureAPI::multiTexCoord4SV(TextureUnit target, const GLshort *v) const
{
    static const char *fnName = "glMultiTexCoord4svARB";

    beforeCommand(fnName, _api.glMultiTexCoord4sv);
    _api.glMultiTexCoord4sv(toScalar(target), v);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBOcclusionQueryAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_occlusion_query extension.
ARBOcclusionQueryAPI::ARBOcclusionQueryAPI() :
    BaseExtension("GL_ARB_occlusion_query")
{
}

// Grant read-only access to the underlying function pointers.
const ARBOcclusionQuery &ARBOcclusionQueryAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_occlusion_query entry points.
void ARBOcclusionQueryAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginQueryARB().
void ARBOcclusionQueryAPI::beginQuery(QueryTarget target, QueryName id) const
{
    static const char *fnName = "glBeginQueryARB";

    beforeCommand(fnName, _api.glBeginQuery);
    _api.glBeginQuery(toScalar(target), id.ID);
    afterCommand(fnName);
}

// Calls glDeleteQueriesARB().
void ARBOcclusionQueryAPI::deleteQueries(GLsizei n, const QueryName *ids) const
{
    static const char *fnName = "glDeleteQueriesARB";

    beforeCommand(fnName, _api.glDeleteQueries);
    _api.glDeleteQueries(n, reinterpret_cast<const GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glEndQueryARB().
void ARBOcclusionQueryAPI::endQuery(QueryTarget target) const
{
    static const char *fnName = "glEndQueryARB";

    beforeCommand(fnName, _api.glEndQuery);
    _api.glEndQuery(toScalar(target));
    afterCommand(fnName);
}

// Calls glGenQueriesARB().
void ARBOcclusionQueryAPI::genQueries(GLsizei n, QueryName *ids) const
{
    static const char *fnName = "glGenQueriesARB";

    beforeCommand(fnName, _api.glGenQueries);
    _api.glGenQueries(n, reinterpret_cast<GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glGetQueryObjectivARB().
void ARBOcclusionQueryAPI::getQueryObjectIV(QueryName id,
                                            QueryObjectParameterName pname,
                                            GLint *params) const
{
    static const char *fnName = "glGetQueryObjectivARB";

    beforeCommand(fnName, _api.glGetQueryObjectiv);
    _api.glGetQueryObjectiv(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetQueryObjectuivARB().
void ARBOcclusionQueryAPI::getQueryObjectUIV(QueryName id,
                                             QueryObjectParameterName pname,
                                             GLuint *params) const
{
    static const char *fnName = "glGetQueryObjectuivARB";

    beforeCommand(fnName, _api.glGetQueryObjectuiv);
    _api.glGetQueryObjectuiv(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetQueryivARB().
void ARBOcclusionQueryAPI::getQueryIV(QueryTarget target,
                                      QueryParameterName pname, GLint *params) const
{
    static const char *fnName = "glGetQueryivARB";

    beforeCommand(fnName, _api.glGetQueryiv);
    _api.glGetQueryiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsQueryARB().
Boolean ARBOcclusionQueryAPI::isQuery(QueryName id) const
{
    static const char *fnName = "glIsQueryARB";

    beforeCommand(fnName, _api.glIsQuery);
    GLboolean result = _api.glIsQuery(id.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

////////////////////////////////////////////////////////////////////////////////
// ARBParallelShaderCompileAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_parallel_shader_compile extension.
ARBParallelShaderCompileAPI::ARBParallelShaderCompileAPI() :
    BaseExtension("GL_ARB_parallel_shader_compile")
{
}

// Grant read-only access to the underlying function pointers.
const ARBParallelShaderCompile &ARBParallelShaderCompileAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_parallel_shader_compile entry points.
void ARBParallelShaderCompileAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMaxShaderCompilerThreadsARB().
void ARBParallelShaderCompileAPI::maxShaderCompilerThreads(GLuint count) const
{
    static const char *fnName = "glMaxShaderCompilerThreadsARB";

    beforeCommand(fnName, _api.glMaxShaderCompilerThreads);
    _api.glMaxShaderCompilerThreads(count);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBPointParametersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_point_parameters extension.
ARBPointParametersAPI::ARBPointParametersAPI() :
    BaseExtension("GL_ARB_point_parameters")
{
}

// Grant read-only access to the underlying function pointers.
const ARBPointParameters &ARBPointParametersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_point_parameters entry points.
void ARBPointParametersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPointParameterfARB().
void ARBPointParametersAPI::pointParameterF(PointParameterNameARB pname,
                                            GLfloat param) const
{
    static const char *fnName = "glPointParameterfARB";

    beforeCommand(fnName, _api.glPointParameterf);
    _api.glPointParameterf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPointParameterfvARB().
void ARBPointParametersAPI::pointParameterFV(PointParameterNameARB pname,
                                             const GLfloat *params) const
{
    static const char *fnName = "glPointParameterfvARB";

    beforeCommand(fnName, _api.glPointParameterfv);
    _api.glPointParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBRobustnessAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_robustness extension.
ARBRobustnessAPI::ARBRobustnessAPI() :
    BaseExtension("GL_ARB_robustness")
{
}

// Grant read-only access to the underlying function pointers.
const ARBRobustness &ARBRobustnessAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_robustness entry points.
void ARBRobustnessAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetGraphicsResetStatusARB().
GraphicsResetStatus ARBRobustnessAPI::getGraphicsResetStatus() const
{
    static const char *fnName = "glGetGraphicsResetStatusARB";

    beforeCommand(fnName, _api.glGetGraphicsResetStatus);
    GLenum result = _api.glGetGraphicsResetStatus();
    afterCommand(fnName);

    return static_cast<GraphicsResetStatus>(result);
}

// Calls glGetnCompressedTexImageARB().
void ARBRobustnessAPI::getnCompressedTexImage(TextureTarget target, GLint lod,
                                              GLsizei bufSize, void *img) const
{
    static const char *fnName = "glGetnCompressedTexImageARB";

    beforeCommand(fnName, _api.glGetnCompressedTexImage);
    _api.glGetnCompressedTexImage(toScalar(target), lod, bufSize, img);
    afterCommand(fnName);
}

// Calls glGetnTexImageARB().
void ARBRobustnessAPI::getnTexImage(TextureTarget target, GLint level,
                                    PixelFormat format, PixelType type,
                                    GLsizei bufSize, void *img) const
{
    static const char *fnName = "glGetnTexImageARB";

    beforeCommand(fnName, _api.glGetnTexImage);
    _api.glGetnTexImage(toScalar(target), level, toScalar(format),
                        toScalar(type), bufSize, img);
    afterCommand(fnName);
}

// Calls glGetnUniformdvARB().
void ARBRobustnessAPI::getnUniformDV(ProgramName program, GLint location,
                                     GLsizei bufSize, GLdouble *params) const
{
    static const char *fnName = "glGetnUniformdvARB";

    beforeCommand(fnName, _api.glGetnUniformdv);
    _api.glGetnUniformdv(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glGetnUniformfvARB().
void ARBRobustnessAPI::getnUniformFV(ProgramName program, GLint location,
                                     GLsizei bufSize, GLfloat *params) const
{
    static const char *fnName = "glGetnUniformfvARB";

    beforeCommand(fnName, _api.glGetnUniformfv);
    _api.glGetnUniformfv(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glGetnUniformivARB().
void ARBRobustnessAPI::getnUniformIV(ProgramName program, GLint location,
                                     GLsizei bufSize, GLint *params) const
{
    static const char *fnName = "glGetnUniformivARB";

    beforeCommand(fnName, _api.glGetnUniformiv);
    _api.glGetnUniformiv(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glGetnUniformuivARB().
void ARBRobustnessAPI::getnUniformUIV(ProgramName program, GLint location,
                                      GLsizei bufSize, GLuint *params) const
{
    static const char *fnName = "glGetnUniformuivARB";

    beforeCommand(fnName, _api.glGetnUniformuiv);
    _api.glGetnUniformuiv(program.ID, location, bufSize, params);
    afterCommand(fnName);
}

// Calls glReadnPixelsARB().
void ARBRobustnessAPI::readnPixels(GLint x, GLint y, GLsizei width,
                                   GLsizei height, PixelFormat format,
                                   PixelType type, GLsizei bufSize, void *data) const
{
    static const char *fnName = "glReadnPixelsARB";

    beforeCommand(fnName, _api.glReadnPixels);
    _api.glReadnPixels(x, y, width, height, toScalar(format), toScalar(type),
                       bufSize, data);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBSampleLocationsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_sample_locations extension.
ARBSampleLocationsAPI::ARBSampleLocationsAPI() :
    BaseExtension("GL_ARB_sample_locations")
{
}

// Grant read-only access to the underlying function pointers.
const ARBSampleLocations &ARBSampleLocationsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_sample_locations entry points.
void ARBSampleLocationsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glEvaluateDepthValuesARB().
void ARBSampleLocationsAPI::evaluateDepthValues() const
{
    static const char *fnName = "glEvaluateDepthValuesARB";

    beforeCommand(fnName, _api.glEvaluateDepthValues);
    _api.glEvaluateDepthValues();
    afterCommand(fnName);
}

// Calls glFramebufferSampleLocationsfvARB().
void ARBSampleLocationsAPI::framebufferSampleLocationsFV(FramebufferTarget target,
                                                         GLuint start,
                                                         GLsizei count,
                                                         const GLfloat *v) const
{
    static const char *fnName = "glFramebufferSampleLocationsfvARB";

    beforeCommand(fnName, _api.glFramebufferSampleLocationsfv);
    _api.glFramebufferSampleLocationsfv(toScalar(target), start, count, v);
    afterCommand(fnName);
}

// Calls glNamedFramebufferSampleLocationsfvARB().
void ARBSampleLocationsAPI::namedFramebufferSampleLocationsFV(FrameBufferName framebuffer,
                                                              GLuint start,
                                                              GLsizei count,
                                                              const GLfloat *v) const
{
    static const char *fnName = "glNamedFramebufferSampleLocationsfvARB";

    beforeCommand(fnName, _api.glNamedFramebufferSampleLocationsfv);
    _api.glNamedFramebufferSampleLocationsfv(framebuffer.ID, start, count, v);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBSampleShadingAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_sample_shading extension.
ARBSampleShadingAPI::ARBSampleShadingAPI() :
    BaseExtension("GL_ARB_sample_shading")
{
}

// Grant read-only access to the underlying function pointers.
const ARBSampleShading &ARBSampleShadingAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_sample_shading entry points.
void ARBSampleShadingAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMinSampleShadingARB().
void ARBSampleShadingAPI::minSampleShading(GLfloat value) const
{
    static const char *fnName = "glMinSampleShadingARB";

    beforeCommand(fnName, _api.glMinSampleShading);
    _api.glMinSampleShading(value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBShaderObjectsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_shader_objects extension.
ARBShaderObjectsAPI::ARBShaderObjectsAPI() :
    BaseExtension("GL_ARB_shader_objects")
{
}

// Grant read-only access to the underlying function pointers.
const ARBShaderObjects &ARBShaderObjectsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_shader_objects entry points.
void ARBShaderObjectsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAttachObjectARB().
void ARBShaderObjectsAPI::attachObject(GLhandleARB containerObj, GLhandleARB obj) const
{
    static const char *fnName = "glAttachObjectARB";

    beforeCommand(fnName, _api.glAttachObject);
    _api.glAttachObject(containerObj, obj);
    afterCommand(fnName);
}

// Calls glCompileShaderARB().
void ARBShaderObjectsAPI::compileShader(GLhandleARB shaderObj) const
{
    static const char *fnName = "glCompileShaderARB";

    beforeCommand(fnName, _api.glCompileShader);
    _api.glCompileShader(shaderObj);
    afterCommand(fnName);
}

// Calls glCreateProgramObjectARB().
GLhandleARB ARBShaderObjectsAPI::createProgramObject() const
{
    static const char *fnName = "glCreateProgramObjectARB";

    beforeCommand(fnName, _api.glCreateProgramObject);
    GLhandleARB result = _api.glCreateProgramObject();
    afterCommand(fnName);

    return result;
}

// Calls glCreateShaderObjectARB().
GLhandleARB ARBShaderObjectsAPI::createShaderObject(ShaderType shaderType) const
{
    static const char *fnName = "glCreateShaderObjectARB";

    beforeCommand(fnName, _api.glCreateShaderObject);
    GLhandleARB result = _api.glCreateShaderObject(toScalar(shaderType));
    afterCommand(fnName);

    return result;
}

// Calls glDeleteObjectARB().
void ARBShaderObjectsAPI::deleteObject(GLhandleARB obj) const
{
    static const char *fnName = "glDeleteObjectARB";

    beforeCommand(fnName, _api.glDeleteObject);
    _api.glDeleteObject(obj);
    afterCommand(fnName);
}

// Calls glDetachObjectARB().
void ARBShaderObjectsAPI::detachObject(GLhandleARB containerObj,
                                       GLhandleARB attachedObj) const
{
    static const char *fnName = "glDetachObjectARB";

    beforeCommand(fnName, _api.glDetachObject);
    _api.glDetachObject(containerObj, attachedObj);
    afterCommand(fnName);
}

// Calls glGetActiveUniformARB().
void ARBShaderObjectsAPI::getActiveUniform(GLhandleARB programObj, GLuint index,
                                           GLsizei maxLength, GLsizei *length,
                                           GLint *size, UniformType *type,
                                           GLcharARB *name) const
{
    static const char *fnName = "glGetActiveUniformARB";

    beforeCommand(fnName, _api.glGetActiveUniform);
    _api.glGetActiveUniform(programObj, index, maxLength, length, size,
                            toScalarPtr(type), name);
    afterCommand(fnName);
}

// Calls glGetAttachedObjectsARB().
void ARBShaderObjectsAPI::getAttachedObjects(GLhandleARB containerObj,
                                             GLsizei maxCount, GLsizei *count,
                                             GLhandleARB *obj) const
{
    static const char *fnName = "glGetAttachedObjectsARB";

    beforeCommand(fnName, _api.glGetAttachedObjects);
    _api.glGetAttachedObjects(containerObj, maxCount, count, obj);
    afterCommand(fnName);
}

// Calls glGetHandleARB().
GLhandleARB ARBShaderObjectsAPI::getHandle(GLenum pname) const
{
    static const char *fnName = "glGetHandleARB";

    beforeCommand(fnName, _api.glGetHandle);
    GLhandleARB result = _api.glGetHandle(pname);
    afterCommand(fnName);

    return result;
}

// Calls glGetInfoLogARB().
void ARBShaderObjectsAPI::getInfoLog(GLhandleARB obj, GLsizei maxLength,
                                     GLsizei *length, GLcharARB *infoLog) const
{
    static const char *fnName = "glGetInfoLogARB";

    beforeCommand(fnName, _api.glGetInfoLog);
    _api.glGetInfoLog(obj, maxLength, length, infoLog);
    afterCommand(fnName);
}

// Calls glGetObjectParameterfvARB().
void ARBShaderObjectsAPI::getObjectParameterFV(GLhandleARB obj, GLenum pname,
                                               GLfloat *params) const
{
    static const char *fnName = "glGetObjectParameterfvARB";

    beforeCommand(fnName, _api.glGetObjectParameterfv);
    _api.glGetObjectParameterfv(obj, pname, params);
    afterCommand(fnName);
}

// Calls glGetObjectParameterivARB().
void ARBShaderObjectsAPI::getObjectParameterIV(GLhandleARB obj, GLenum pname,
                                               GLint *params) const
{
    static const char *fnName = "glGetObjectParameterivARB";

    beforeCommand(fnName, _api.glGetObjectParameteriv);
    _api.glGetObjectParameteriv(obj, pname, params);
    afterCommand(fnName);
}

// Calls glGetShaderSourceARB().
void ARBShaderObjectsAPI::getShaderSource(GLhandleARB obj, GLsizei maxLength,
                                          GLsizei *length, GLcharARB *source) const
{
    static const char *fnName = "glGetShaderSourceARB";

    beforeCommand(fnName, _api.glGetShaderSource);
    _api.glGetShaderSource(obj, maxLength, length, source);
    afterCommand(fnName);
}

// Calls glGetUniformLocationARB().
GLint ARBShaderObjectsAPI::getUniformLocation(GLhandleARB programObj,
                                              const GLcharARB *name) const
{
    static const char *fnName = "glGetUniformLocationARB";

    beforeCommand(fnName, _api.glGetUniformLocation);
    GLint result = _api.glGetUniformLocation(programObj, name);
    afterCommand(fnName);

    return result;
}

// Calls glGetUniformfvARB().
void ARBShaderObjectsAPI::getUniformFV(GLhandleARB programObj, GLint location,
                                       GLfloat *params) const
{
    static const char *fnName = "glGetUniformfvARB";

    beforeCommand(fnName, _api.glGetUniformfv);
    _api.glGetUniformfv(programObj, location, params);
    afterCommand(fnName);
}

// Calls glGetUniformivARB().
void ARBShaderObjectsAPI::getUniformIV(GLhandleARB programObj, GLint location,
                                       GLint *params) const
{
    static const char *fnName = "glGetUniformivARB";

    beforeCommand(fnName, _api.glGetUniformiv);
    _api.glGetUniformiv(programObj, location, params);
    afterCommand(fnName);
}

// Calls glLinkProgramARB().
void ARBShaderObjectsAPI::linkProgram(GLhandleARB programObj) const
{
    static const char *fnName = "glLinkProgramARB";

    beforeCommand(fnName, _api.glLinkProgram);
    _api.glLinkProgram(programObj);
    afterCommand(fnName);
}

// Calls glShaderSourceARB().
void ARBShaderObjectsAPI::shaderSource(GLhandleARB shaderObj, GLsizei count,
                                       const GLcharARB **string,
                                       const GLint *length) const
{
    static const char *fnName = "glShaderSourceARB";

    beforeCommand(fnName, _api.glShaderSource);
    _api.glShaderSource(shaderObj, count, string, length);
    afterCommand(fnName);
}

// Calls glUniform1fARB().
void ARBShaderObjectsAPI::uniform1F(GLint location, GLfloat v0) const
{
    static const char *fnName = "glUniform1fARB";

    beforeCommand(fnName, _api.glUniform1f);
    _api.glUniform1f(location, v0);
    afterCommand(fnName);
}

// Calls glUniform1fvARB().
void ARBShaderObjectsAPI::uniform1FV(GLint location, GLsizei count,
                                     const GLfloat *value) const
{
    static const char *fnName = "glUniform1fvARB";

    beforeCommand(fnName, _api.glUniform1fv);
    _api.glUniform1fv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform1iARB().
void ARBShaderObjectsAPI::uniform1I(GLint location, GLint v0) const
{
    static const char *fnName = "glUniform1iARB";

    beforeCommand(fnName, _api.glUniform1i);
    _api.glUniform1i(location, v0);
    afterCommand(fnName);
}

// Calls glUniform1ivARB().
void ARBShaderObjectsAPI::uniform1IV(GLint location, GLsizei count,
                                     const GLint *value) const
{
    static const char *fnName = "glUniform1ivARB";

    beforeCommand(fnName, _api.glUniform1iv);
    _api.glUniform1iv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2fARB().
void ARBShaderObjectsAPI::uniform2F(GLint location, GLfloat v0, GLfloat v1) const
{
    static const char *fnName = "glUniform2fARB";

    beforeCommand(fnName, _api.glUniform2f);
    _api.glUniform2f(location, v0, v1);
    afterCommand(fnName);
}

// Calls glUniform2fvARB().
void ARBShaderObjectsAPI::uniform2FV(GLint location, GLsizei count,
                                     const GLfloat *value) const
{
    static const char *fnName = "glUniform2fvARB";

    beforeCommand(fnName, _api.glUniform2fv);
    _api.glUniform2fv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2iARB().
void ARBShaderObjectsAPI::uniform2I(GLint location, GLint v0, GLint v1) const
{
    static const char *fnName = "glUniform2iARB";

    beforeCommand(fnName, _api.glUniform2i);
    _api.glUniform2i(location, v0, v1);
    afterCommand(fnName);
}

// Calls glUniform2ivARB().
void ARBShaderObjectsAPI::uniform2IV(GLint location, GLsizei count,
                                     const GLint *value) const
{
    static const char *fnName = "glUniform2ivARB";

    beforeCommand(fnName, _api.glUniform2iv);
    _api.glUniform2iv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3fARB().
void ARBShaderObjectsAPI::uniform3F(GLint location, GLfloat v0, GLfloat v1,
                                    GLfloat v2) const
{
    static const char *fnName = "glUniform3fARB";

    beforeCommand(fnName, _api.glUniform3f);
    _api.glUniform3f(location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glUniform3fvARB().
void ARBShaderObjectsAPI::uniform3FV(GLint location, GLsizei count,
                                     const GLfloat *value) const
{
    static const char *fnName = "glUniform3fvARB";

    beforeCommand(fnName, _api.glUniform3fv);
    _api.glUniform3fv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3iARB().
void ARBShaderObjectsAPI::uniform3I(GLint location, GLint v0, GLint v1, GLint v2) const
{
    static const char *fnName = "glUniform3iARB";

    beforeCommand(fnName, _api.glUniform3i);
    _api.glUniform3i(location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glUniform3ivARB().
void ARBShaderObjectsAPI::uniform3IV(GLint location, GLsizei count,
                                     const GLint *value) const
{
    static const char *fnName = "glUniform3ivARB";

    beforeCommand(fnName, _api.glUniform3iv);
    _api.glUniform3iv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4fARB().
void ARBShaderObjectsAPI::uniform4F(GLint location, GLfloat v0, GLfloat v1,
                                    GLfloat v2, GLfloat v3) const
{
    static const char *fnName = "glUniform4fARB";

    beforeCommand(fnName, _api.glUniform4f);
    _api.glUniform4f(location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glUniform4fvARB().
void ARBShaderObjectsAPI::uniform4FV(GLint location, GLsizei count,
                                     const GLfloat *value) const
{
    static const char *fnName = "glUniform4fvARB";

    beforeCommand(fnName, _api.glUniform4fv);
    _api.glUniform4fv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4iARB().
void ARBShaderObjectsAPI::uniform4I(GLint location, GLint v0, GLint v1, GLint v2,
                                    GLint v3) const
{
    static const char *fnName = "glUniform4iARB";

    beforeCommand(fnName, _api.glUniform4i);
    _api.glUniform4i(location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glUniform4ivARB().
void ARBShaderObjectsAPI::uniform4IV(GLint location, GLsizei count,
                                     const GLint *value) const
{
    static const char *fnName = "glUniform4ivARB";

    beforeCommand(fnName, _api.glUniform4iv);
    _api.glUniform4iv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniformMatrix2fvARB().
void ARBShaderObjectsAPI::uniformMatrix2FV(GLint location, GLsizei count,
                                           Boolean transpose,
                                           const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix2fvARB";

    beforeCommand(fnName, _api.glUniformMatrix2fv);
    _api.glUniformMatrix2fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix3fvARB().
void ARBShaderObjectsAPI::uniformMatrix3FV(GLint location, GLsizei count,
                                           Boolean transpose,
                                           const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix3fvARB";

    beforeCommand(fnName, _api.glUniformMatrix3fv);
    _api.glUniformMatrix3fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUniformMatrix4fvARB().
void ARBShaderObjectsAPI::uniformMatrix4FV(GLint location, GLsizei count,
                                           Boolean transpose,
                                           const GLfloat *value) const
{
    static const char *fnName = "glUniformMatrix4fvARB";

    beforeCommand(fnName, _api.glUniformMatrix4fv);
    _api.glUniformMatrix4fv(location, count, toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glUseProgramObjectARB().
void ARBShaderObjectsAPI::useProgramObject(GLhandleARB programObj) const
{
    static const char *fnName = "glUseProgramObjectARB";

    beforeCommand(fnName, _api.glUseProgramObject);
    _api.glUseProgramObject(programObj);
    afterCommand(fnName);
}

// Calls glValidateProgramARB().
void ARBShaderObjectsAPI::validateProgram(GLhandleARB programObj) const
{
    static const char *fnName = "glValidateProgramARB";

    beforeCommand(fnName, _api.glValidateProgram);
    _api.glValidateProgram(programObj);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBShadingLanguageIncludeAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_shading_language_include extension.
ARBShadingLanguageIncludeAPI::ARBShadingLanguageIncludeAPI() :
    BaseExtension("GL_ARB_shading_language_include")
{
}

// Grant read-only access to the underlying function pointers.
const ARBShadingLanguageInclude &ARBShadingLanguageIncludeAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_shading_language_include entry points.
void ARBShadingLanguageIncludeAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCompileShaderIncludeARB().
void ARBShadingLanguageIncludeAPI::compileShaderInclude(ShaderName shader,
                                                        GLsizei count,
                                                        const GLchar *const*path,
                                                        const GLint *length) const
{
    static const char *fnName = "glCompileShaderIncludeARB";

    beforeCommand(fnName, _api.glCompileShaderInclude);
    _api.glCompileShaderInclude(shader.ID, count, path, length);
    afterCommand(fnName);
}

// Calls glDeleteNamedStringARB().
void ARBShadingLanguageIncludeAPI::deleteNamedString(GLint namelen,
                                                     const GLchar *name) const
{
    static const char *fnName = "glDeleteNamedStringARB";

    beforeCommand(fnName, _api.glDeleteNamedString);
    _api.glDeleteNamedString(namelen, name);
    afterCommand(fnName);
}

// Calls glGetNamedStringARB().
void ARBShadingLanguageIncludeAPI::getNamedString(GLint namelen,
                                                  const GLchar *name,
                                                  GLsizei bufSize,
                                                  GLint *stringlen,
                                                  GLchar *string) const
{
    static const char *fnName = "glGetNamedStringARB";

    beforeCommand(fnName, _api.glGetNamedString);
    _api.glGetNamedString(namelen, name, bufSize, stringlen, string);
    afterCommand(fnName);
}

// Calls glGetNamedStringivARB().
void ARBShadingLanguageIncludeAPI::getNamedStringIV(GLint namelen,
                                                    const GLchar *name,
                                                    GLenum pname, GLint *params) const
{
    static const char *fnName = "glGetNamedStringivARB";

    beforeCommand(fnName, _api.glGetNamedStringiv);
    _api.glGetNamedStringiv(namelen, name, pname, params);
    afterCommand(fnName);
}

// Calls glIsNamedStringARB().
Boolean ARBShadingLanguageIncludeAPI::isNamedString(GLint namelen,
                                                    const GLchar *name) const
{
    static const char *fnName = "glIsNamedStringARB";

    beforeCommand(fnName, _api.glIsNamedString);
    GLboolean result = _api.glIsNamedString(namelen, name);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glNamedStringARB().
void ARBShadingLanguageIncludeAPI::namedString(GLenum type, GLint namelen,
                                               const GLchar *name,
                                               GLint stringlen,
                                               const GLchar *string) const
{
    static const char *fnName = "glNamedStringARB";

    beforeCommand(fnName, _api.glNamedString);
    _api.glNamedString(type, namelen, name, stringlen, string);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBSparseBufferAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_sparse_buffer extension.
ARBSparseBufferAPI::ARBSparseBufferAPI() :
    BaseExtension("GL_ARB_sparse_buffer")
{
}

// Grant read-only access to the underlying function pointers.
const ARBSparseBuffer &ARBSparseBufferAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_sparse_buffer entry points.
void ARBSparseBufferAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBufferPageCommitmentARB().
void ARBSparseBufferAPI::bufferPageCommitment(GLenum target, GLintptr offset,
                                              GLsizeiptr size, Boolean commit) const
{
    static const char *fnName = "glBufferPageCommitmentARB";

    beforeCommand(fnName, _api.glBufferPageCommitment);
    _api.glBufferPageCommitment(target, offset, size, toScalar(commit));
    afterCommand(fnName);
}

// Calls glNamedBufferPageCommitmentARB().
void ARBSparseBufferAPI::namedBufferPageCommitmentARB(BufferName buffer,
                                                      GLintptr offset,
                                                      GLsizeiptr size,
                                                      Boolean commit) const
{
    static const char *fnName = "glNamedBufferPageCommitmentARB";

    beforeCommand(fnName, _api.glNamedBufferPageCommitmentARB);
    _api.glNamedBufferPageCommitmentARB(buffer.ID, offset, size,
                                        toScalar(commit));
    afterCommand(fnName);
}

// Calls glNamedBufferPageCommitmentEXT().
void ARBSparseBufferAPI::namedBufferPageCommitmentEXT(BufferName buffer,
                                                      GLintptr offset,
                                                      GLsizeiptr size,
                                                      Boolean commit) const
{
    static const char *fnName = "glNamedBufferPageCommitmentEXT";

    beforeCommand(fnName, _api.glNamedBufferPageCommitmentEXT);
    _api.glNamedBufferPageCommitmentEXT(buffer.ID, offset, size,
                                        toScalar(commit));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBSparseTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_sparse_texture extension.
ARBSparseTextureAPI::ARBSparseTextureAPI() :
    BaseExtension("GL_ARB_sparse_texture")
{
}

// Grant read-only access to the underlying function pointers.
const ARBSparseTexture &ARBSparseTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_sparse_texture entry points.
void ARBSparseTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexPageCommitmentARB().
void ARBSparseTextureAPI::texPageCommitment(GLenum target, GLint level,
                                            GLint xoffset, GLint yoffset,
                                            GLint zoffset, GLsizei width,
                                            GLsizei height, GLsizei depth,
                                            Boolean commit) const
{
    static const char *fnName = "glTexPageCommitmentARB";

    beforeCommand(fnName, _api.glTexPageCommitment);
    _api.glTexPageCommitment(target, level, xoffset, yoffset, zoffset, width,
                             height, depth, toScalar(commit));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBTextureBufferObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_texture_buffer_object extension.
ARBTextureBufferObjectAPI::ARBTextureBufferObjectAPI() :
    BaseExtension("GL_ARB_texture_buffer_object")
{
}

// Grant read-only access to the underlying function pointers.
const ARBTextureBufferObject &ARBTextureBufferObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_texture_buffer_object entry points.
void ARBTextureBufferObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexBufferARB().
void ARBTextureBufferObjectAPI::texBuffer(TextureTarget target,
                                          SizedInternalFormat internalformat,
                                          BufferName buffer) const
{
    static const char *fnName = "glTexBufferARB";

    beforeCommand(fnName, _api.glTexBuffer);
    _api.glTexBuffer(toScalar(target), toScalar(internalformat), buffer.ID);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBTextureCompressionAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_texture_compression extension.
ARBTextureCompressionAPI::ARBTextureCompressionAPI() :
    BaseExtension("GL_ARB_texture_compression")
{
}

// Grant read-only access to the underlying function pointers.
const ARBTextureCompression &ARBTextureCompressionAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_texture_compression entry points.
void ARBTextureCompressionAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCompressedTexImage1DARB().
void ARBTextureCompressionAPI::compressedTexImage1D(TextureTarget target,
                                                    GLint level,
                                                    InternalFormat internalformat,
                                                    GLsizei width, GLint border,
                                                    GLsizei imageSize,
                                                    const void *data) const
{
    static const char *fnName = "glCompressedTexImage1DARB";

    beforeCommand(fnName, _api.glCompressedTexImage1D);
    _api.glCompressedTexImage1D(toScalar(target), level,
                                toScalar(internalformat), width, border,
                                imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTexImage2DARB().
void ARBTextureCompressionAPI::compressedTexImage2D(TextureTarget target,
                                                    GLint level,
                                                    InternalFormat internalformat,
                                                    GLsizei width,
                                                    GLsizei height, GLint border,
                                                    GLsizei imageSize,
                                                    const void *data) const
{
    static const char *fnName = "glCompressedTexImage2DARB";

    beforeCommand(fnName, _api.glCompressedTexImage2D);
    _api.glCompressedTexImage2D(toScalar(target), level,
                                toScalar(internalformat), width, height, border,
                                imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTexImage3DARB().
void ARBTextureCompressionAPI::compressedTexImage3D(TextureTarget target,
                                                    GLint level,
                                                    InternalFormat internalformat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLsizei depth, GLint border,
                                                    GLsizei imageSize,
                                                    const void *data) const
{
    static const char *fnName = "glCompressedTexImage3DARB";

    beforeCommand(fnName, _api.glCompressedTexImage3D);
    _api.glCompressedTexImage3D(toScalar(target), level,
                                toScalar(internalformat), width, height, depth,
                                border, imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTexSubImage1DARB().
void ARBTextureCompressionAPI::compressedTexSubImage1D(TextureTarget target,
                                                       GLint level,
                                                       GLint xoffset,
                                                       GLsizei width,
                                                       InternalFormat format,
                                                       GLsizei imageSize,
                                                       const void *data) const
{
    static const char *fnName = "glCompressedTexSubImage1DARB";

    beforeCommand(fnName, _api.glCompressedTexSubImage1D);
    _api.glCompressedTexSubImage1D(toScalar(target), level, xoffset, width,
                                   toScalar(format), imageSize, data);
    afterCommand(fnName);
}

// Calls glCompressedTexSubImage2DARB().
void ARBTextureCompressionAPI::compressedTexSubImage2D(TextureTarget target,
                                                       GLint level,
                                                       GLint xoffset,
                                                       GLint yoffset,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       InternalFormat format,
                                                       GLsizei imageSize,
                                                       const void *data) const
{
    static const char *fnName = "glCompressedTexSubImage2DARB";

    beforeCommand(fnName, _api.glCompressedTexSubImage2D);
    _api.glCompressedTexSubImage2D(toScalar(target), level, xoffset, yoffset,
                                   width, height, toScalar(format), imageSize,
                                   data);
    afterCommand(fnName);
}

// Calls glCompressedTexSubImage3DARB().
void ARBTextureCompressionAPI::compressedTexSubImage3D(TextureTarget target,
                                                       GLint level,
                                                       GLint xoffset,
                                                       GLint yoffset,
                                                       GLint zoffset,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLsizei depth,
                                                       InternalFormat format,
                                                       GLsizei imageSize,
                                                       const void *data) const
{
    static const char *fnName = "glCompressedTexSubImage3DARB";

    beforeCommand(fnName, _api.glCompressedTexSubImage3D);
    _api.glCompressedTexSubImage3D(toScalar(target), level, xoffset, yoffset,
                                   zoffset, width, height, depth,
                                   toScalar(format), imageSize, data);
    afterCommand(fnName);
}

// Calls glGetCompressedTexImageARB().
void ARBTextureCompressionAPI::getCompressedTexImage(TextureTarget target,
                                                     GLint level, void *img) const
{
    static const char *fnName = "glGetCompressedTexImageARB";

    beforeCommand(fnName, _api.glGetCompressedTexImage);
    _api.glGetCompressedTexImage(toScalar(target), level, img);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBTransposeMatrixAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_transpose_matrix extension.
ARBTransposeMatrixAPI::ARBTransposeMatrixAPI() :
    BaseExtension("GL_ARB_transpose_matrix")
{
}

// Grant read-only access to the underlying function pointers.
const ARBTransposeMatrix &ARBTransposeMatrixAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_transpose_matrix entry points.
void ARBTransposeMatrixAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glLoadTransposeMatrixdARB().
void ARBTransposeMatrixAPI::loadTransposeMatrixD(const GLdouble *m) const
{
    static const char *fnName = "glLoadTransposeMatrixdARB";

    beforeCommand(fnName, _api.glLoadTransposeMatrixd);
    _api.glLoadTransposeMatrixd(m);
    afterCommand(fnName);
}

// Calls glLoadTransposeMatrixfARB().
void ARBTransposeMatrixAPI::loadTransposeMatrixF(const GLfloat *m) const
{
    static const char *fnName = "glLoadTransposeMatrixfARB";

    beforeCommand(fnName, _api.glLoadTransposeMatrixf);
    _api.glLoadTransposeMatrixf(m);
    afterCommand(fnName);
}

// Calls glMultTransposeMatrixdARB().
void ARBTransposeMatrixAPI::multTransposeMatrixD(const GLdouble *m) const
{
    static const char *fnName = "glMultTransposeMatrixdARB";

    beforeCommand(fnName, _api.glMultTransposeMatrixd);
    _api.glMultTransposeMatrixd(m);
    afterCommand(fnName);
}

// Calls glMultTransposeMatrixfARB().
void ARBTransposeMatrixAPI::multTransposeMatrixF(const GLfloat *m) const
{
    static const char *fnName = "glMultTransposeMatrixfARB";

    beforeCommand(fnName, _api.glMultTransposeMatrixf);
    _api.glMultTransposeMatrixf(m);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBVertexBlendAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_vertex_blend extension.
ARBVertexBlendAPI::ARBVertexBlendAPI() :
    BaseExtension("GL_ARB_vertex_blend")
{
}

// Grant read-only access to the underlying function pointers.
const ARBVertexBlend &ARBVertexBlendAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_vertex_blend entry points.
void ARBVertexBlendAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glVertexBlendARB().
void ARBVertexBlendAPI::vertexBlend(GLint count) const
{
    static const char *fnName = "glVertexBlendARB";

    beforeCommand(fnName, _api.glVertexBlend);
    _api.glVertexBlend(count);
    afterCommand(fnName);
}

// Calls glWeightPointerARB().
void ARBVertexBlendAPI::weightPointer(GLint size, WeightPointerTypeARB type,
                                      GLsizei stride, const void *pointer) const
{
    static const char *fnName = "glWeightPointerARB";

    beforeCommand(fnName, _api.glWeightPointer);
    _api.glWeightPointer(size, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glWeightbvARB().
void ARBVertexBlendAPI::weightBV(GLint size, const GLbyte *weights) const
{
    static const char *fnName = "glWeightbvARB";

    beforeCommand(fnName, _api.glWeightbv);
    _api.glWeightbv(size, weights);
    afterCommand(fnName);
}

// Calls glWeightdvARB().
void ARBVertexBlendAPI::weightDV(GLint size, const GLdouble *weights) const
{
    static const char *fnName = "glWeightdvARB";

    beforeCommand(fnName, _api.glWeightdv);
    _api.glWeightdv(size, weights);
    afterCommand(fnName);
}

// Calls glWeightfvARB().
void ARBVertexBlendAPI::weightFV(GLint size, const GLfloat *weights) const
{
    static const char *fnName = "glWeightfvARB";

    beforeCommand(fnName, _api.glWeightfv);
    _api.glWeightfv(size, weights);
    afterCommand(fnName);
}

// Calls glWeightivARB().
void ARBVertexBlendAPI::weightIV(GLint size, const GLint *weights) const
{
    static const char *fnName = "glWeightivARB";

    beforeCommand(fnName, _api.glWeightiv);
    _api.glWeightiv(size, weights);
    afterCommand(fnName);
}

// Calls glWeightsvARB().
void ARBVertexBlendAPI::weightSV(GLint size, const GLshort *weights) const
{
    static const char *fnName = "glWeightsvARB";

    beforeCommand(fnName, _api.glWeightsv);
    _api.glWeightsv(size, weights);
    afterCommand(fnName);
}

// Calls glWeightubvARB().
void ARBVertexBlendAPI::weightUBV(GLint size, const GLubyte *weights) const
{
    static const char *fnName = "glWeightubvARB";

    beforeCommand(fnName, _api.glWeightubv);
    _api.glWeightubv(size, weights);
    afterCommand(fnName);
}

// Calls glWeightuivARB().
void ARBVertexBlendAPI::weightUIV(GLint size, const GLuint *weights) const
{
    static const char *fnName = "glWeightuivARB";

    beforeCommand(fnName, _api.glWeightuiv);
    _api.glWeightuiv(size, weights);
    afterCommand(fnName);
}

// Calls glWeightusvARB().
void ARBVertexBlendAPI::weightUSV(GLint size, const GLushort *weights) const
{
    static const char *fnName = "glWeightusvARB";

    beforeCommand(fnName, _api.glWeightusv);
    _api.glWeightusv(size, weights);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBVertexBufferObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_vertex_buffer_object extension.
ARBVertexBufferObjectAPI::ARBVertexBufferObjectAPI() :
    BaseExtension("GL_ARB_vertex_buffer_object")
{
}

// Grant read-only access to the underlying function pointers.
const ARBVertexBufferObject &ARBVertexBufferObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_vertex_buffer_object entry points.
void ARBVertexBufferObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindBufferARB().
void ARBVertexBufferObjectAPI::bindBuffer(BufferTarget target,
                                          BufferName buffer) const
{
    static const char *fnName = "glBindBufferARB";

    beforeCommand(fnName, _api.glBindBuffer);
    _api.glBindBuffer(toScalar(target), buffer.ID);
    afterCommand(fnName);
}

// Calls glBufferDataARB().
void ARBVertexBufferObjectAPI::bufferData(BufferTarget target,
                                          GLsizeiptrARB size, const void *data,
                                          BufferUsage usage) const
{
    static const char *fnName = "glBufferDataARB";

    beforeCommand(fnName, _api.glBufferData);
    _api.glBufferData(toScalar(target), size, data, toScalar(usage));
    afterCommand(fnName);
}

// Calls glBufferSubDataARB().
void ARBVertexBufferObjectAPI::bufferSubData(BufferTarget target,
                                             GLintptrARB offset,
                                             GLsizeiptrARB size,
                                             const void *data) const
{
    static const char *fnName = "glBufferSubDataARB";

    beforeCommand(fnName, _api.glBufferSubData);
    _api.glBufferSubData(toScalar(target), offset, size, data);
    afterCommand(fnName);
}

// Calls glDeleteBuffersARB().
void ARBVertexBufferObjectAPI::deleteBuffers(GLsizei n,
                                             const BufferName *buffers) const
{
    static const char *fnName = "glDeleteBuffersARB";

    beforeCommand(fnName, _api.glDeleteBuffers);
    _api.glDeleteBuffers(n, reinterpret_cast<const GLuint *>(buffers));
    afterCommand(fnName);
}

// Calls glGenBuffersARB().
void ARBVertexBufferObjectAPI::genBuffers(GLsizei n, BufferName *buffers) const
{
    static const char *fnName = "glGenBuffersARB";

    beforeCommand(fnName, _api.glGenBuffers);
    _api.glGenBuffers(n, reinterpret_cast<GLuint *>(buffers));
    afterCommand(fnName);
}

// Calls glGetBufferParameterivARB().
void ARBVertexBufferObjectAPI::getBufferParameterIV(BufferTarget target,
                                                    BufferPNameARB pname,
                                                    GLint *params) const
{
    static const char *fnName = "glGetBufferParameterivARB";

    beforeCommand(fnName, _api.glGetBufferParameteriv);
    _api.glGetBufferParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetBufferPointervARB().
void ARBVertexBufferObjectAPI::getBufferPointerV(BufferTarget target,
                                                 BufferPointerNameARB pname,
                                                 void **params) const
{
    static const char *fnName = "glGetBufferPointervARB";

    beforeCommand(fnName, _api.glGetBufferPointerv);
    _api.glGetBufferPointerv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetBufferSubDataARB().
void ARBVertexBufferObjectAPI::getBufferSubData(BufferTarget target,
                                                GLintptrARB offset,
                                                GLsizeiptrARB size, void *data) const
{
    static const char *fnName = "glGetBufferSubDataARB";

    beforeCommand(fnName, _api.glGetBufferSubData);
    _api.glGetBufferSubData(toScalar(target), offset, size, data);
    afterCommand(fnName);
}

// Calls glIsBufferARB().
Boolean ARBVertexBufferObjectAPI::isBuffer(BufferName buffer) const
{
    static const char *fnName = "glIsBufferARB";

    beforeCommand(fnName, _api.glIsBuffer);
    GLboolean result = _api.glIsBuffer(buffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMapBufferARB().
void *ARBVertexBufferObjectAPI::mapBuffer(BufferTarget target,
                                          BufferAccessARB access) const
{
    static const char *fnName = "glMapBufferARB";

    beforeCommand(fnName, _api.glMapBuffer);
    void *result = _api.glMapBuffer(toScalar(target), toScalar(access));
    afterCommand(fnName);

    return result;
}

// Calls glUnmapBufferARB().
Boolean ARBVertexBufferObjectAPI::unmapBuffer(BufferTarget target) const
{
    static const char *fnName = "glUnmapBufferARB";

    beforeCommand(fnName, _api.glUnmapBuffer);
    GLboolean result = _api.glUnmapBuffer(toScalar(target));
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

////////////////////////////////////////////////////////////////////////////////
// ARBVertexProgramAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_vertex_program extension.
ARBVertexProgramAPI::ARBVertexProgramAPI() :
    BaseExtension("GL_ARB_vertex_program")
{
}

// Grant read-only access to the underlying function pointers.
const ARBVertexProgram &ARBVertexProgramAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_vertex_program entry points.
void ARBVertexProgramAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDisableVertexAttribArrayARB().
void ARBVertexProgramAPI::disableVertexAttribArray(GLuint index) const
{
    static const char *fnName = "glDisableVertexAttribArrayARB";

    beforeCommand(fnName, _api.glDisableVertexAttribArray);
    _api.glDisableVertexAttribArray(index);
    afterCommand(fnName);
}

// Calls glEnableVertexAttribArrayARB().
void ARBVertexProgramAPI::enableVertexAttribArray(GLuint index) const
{
    static const char *fnName = "glEnableVertexAttribArrayARB";

    beforeCommand(fnName, _api.glEnableVertexAttribArray);
    _api.glEnableVertexAttribArray(index);
    afterCommand(fnName);
}

// Calls glGetVertexAttribPointervARB().
void ARBVertexProgramAPI::getVertexAttribPointerV(GLuint index,
                                                  VertexAttribPointerPropertyARB pname,
                                                  void **pointer) const
{
    static const char *fnName = "glGetVertexAttribPointervARB";

    beforeCommand(fnName, _api.glGetVertexAttribPointerv);
    _api.glGetVertexAttribPointerv(index, toScalar(pname), pointer);
    afterCommand(fnName);
}

// Calls glGetVertexAttribdvARB().
void ARBVertexProgramAPI::getVertexAttribDV(GLuint index,
                                            VertexAttribPropertyARB pname,
                                            GLdouble *params) const
{
    static const char *fnName = "glGetVertexAttribdvARB";

    beforeCommand(fnName, _api.glGetVertexAttribdv);
    _api.glGetVertexAttribdv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribfvARB().
void ARBVertexProgramAPI::getVertexAttribFV(GLuint index,
                                            VertexAttribPropertyARB pname,
                                            GLfloat *params) const
{
    static const char *fnName = "glGetVertexAttribfvARB";

    beforeCommand(fnName, _api.glGetVertexAttribfv);
    _api.glGetVertexAttribfv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribivARB().
void ARBVertexProgramAPI::getVertexAttribIV(GLuint index,
                                            VertexAttribPropertyARB pname,
                                            GLint *params) const
{
    static const char *fnName = "glGetVertexAttribivARB";

    beforeCommand(fnName, _api.glGetVertexAttribiv);
    _api.glGetVertexAttribiv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glVertexAttrib1dARB().
void ARBVertexProgramAPI::vertexAttrib1D(GLuint index, GLdouble x) const
{
    static const char *fnName = "glVertexAttrib1dARB";

    beforeCommand(fnName, _api.glVertexAttrib1d);
    _api.glVertexAttrib1d(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1dvARB().
void ARBVertexProgramAPI::vertexAttrib1DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib1dvARB";

    beforeCommand(fnName, _api.glVertexAttrib1dv);
    _api.glVertexAttrib1dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib1fARB().
void ARBVertexProgramAPI::vertexAttrib1F(GLuint index, GLfloat x) const
{
    static const char *fnName = "glVertexAttrib1fARB";

    beforeCommand(fnName, _api.glVertexAttrib1f);
    _api.glVertexAttrib1f(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1fvARB().
void ARBVertexProgramAPI::vertexAttrib1FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib1fvARB";

    beforeCommand(fnName, _api.glVertexAttrib1fv);
    _api.glVertexAttrib1fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib1sARB().
void ARBVertexProgramAPI::vertexAttrib1S(GLuint index, GLshort x) const
{
    static const char *fnName = "glVertexAttrib1sARB";

    beforeCommand(fnName, _api.glVertexAttrib1s);
    _api.glVertexAttrib1s(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1svARB().
void ARBVertexProgramAPI::vertexAttrib1SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib1svARB";

    beforeCommand(fnName, _api.glVertexAttrib1sv);
    _api.glVertexAttrib1sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2dARB().
void ARBVertexProgramAPI::vertexAttrib2D(GLuint index, GLdouble x, GLdouble y) const
{
    static const char *fnName = "glVertexAttrib2dARB";

    beforeCommand(fnName, _api.glVertexAttrib2d);
    _api.glVertexAttrib2d(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2dvARB().
void ARBVertexProgramAPI::vertexAttrib2DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib2dvARB";

    beforeCommand(fnName, _api.glVertexAttrib2dv);
    _api.glVertexAttrib2dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2fARB().
void ARBVertexProgramAPI::vertexAttrib2F(GLuint index, GLfloat x, GLfloat y) const
{
    static const char *fnName = "glVertexAttrib2fARB";

    beforeCommand(fnName, _api.glVertexAttrib2f);
    _api.glVertexAttrib2f(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2fvARB().
void ARBVertexProgramAPI::vertexAttrib2FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib2fvARB";

    beforeCommand(fnName, _api.glVertexAttrib2fv);
    _api.glVertexAttrib2fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2sARB().
void ARBVertexProgramAPI::vertexAttrib2S(GLuint index, GLshort x, GLshort y) const
{
    static const char *fnName = "glVertexAttrib2sARB";

    beforeCommand(fnName, _api.glVertexAttrib2s);
    _api.glVertexAttrib2s(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2svARB().
void ARBVertexProgramAPI::vertexAttrib2SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib2svARB";

    beforeCommand(fnName, _api.glVertexAttrib2sv);
    _api.glVertexAttrib2sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3dARB().
void ARBVertexProgramAPI::vertexAttrib3D(GLuint index, GLdouble x, GLdouble y,
                                         GLdouble z) const
{
    static const char *fnName = "glVertexAttrib3dARB";

    beforeCommand(fnName, _api.glVertexAttrib3d);
    _api.glVertexAttrib3d(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3dvARB().
void ARBVertexProgramAPI::vertexAttrib3DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib3dvARB";

    beforeCommand(fnName, _api.glVertexAttrib3dv);
    _api.glVertexAttrib3dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3fARB().
void ARBVertexProgramAPI::vertexAttrib3F(GLuint index, GLfloat x, GLfloat y,
                                         GLfloat z) const
{
    static const char *fnName = "glVertexAttrib3fARB";

    beforeCommand(fnName, _api.glVertexAttrib3f);
    _api.glVertexAttrib3f(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3fvARB().
void ARBVertexProgramAPI::vertexAttrib3FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib3fvARB";

    beforeCommand(fnName, _api.glVertexAttrib3fv);
    _api.glVertexAttrib3fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3sARB().
void ARBVertexProgramAPI::vertexAttrib3S(GLuint index, GLshort x, GLshort y,
                                         GLshort z) const
{
    static const char *fnName = "glVertexAttrib3sARB";

    beforeCommand(fnName, _api.glVertexAttrib3s);
    _api.glVertexAttrib3s(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3svARB().
void ARBVertexProgramAPI::vertexAttrib3SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib3svARB";

    beforeCommand(fnName, _api.glVertexAttrib3sv);
    _api.glVertexAttrib3sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4NbvARB().
void ARBVertexProgramAPI::vertexAttrib4NBV(GLuint index, const GLbyte *v) const
{
    static const char *fnName = "glVertexAttrib4NbvARB";

    beforeCommand(fnName, _api.glVertexAttrib4Nbv);
    _api.glVertexAttrib4Nbv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4NivARB().
void ARBVertexProgramAPI::vertexAttrib4NIV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttrib4NivARB";

    beforeCommand(fnName, _api.glVertexAttrib4Niv);
    _api.glVertexAttrib4Niv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4NsvARB().
void ARBVertexProgramAPI::vertexAttrib4NSV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib4NsvARB";

    beforeCommand(fnName, _api.glVertexAttrib4Nsv);
    _api.glVertexAttrib4Nsv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4NubARB().
void ARBVertexProgramAPI::vertexAttrib4NUB(GLuint index, GLubyte x, GLubyte y,
                                           GLubyte z, GLubyte w) const
{
    static const char *fnName = "glVertexAttrib4NubARB";

    beforeCommand(fnName, _api.glVertexAttrib4Nub);
    _api.glVertexAttrib4Nub(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4NubvARB().
void ARBVertexProgramAPI::vertexAttrib4NUBV(GLuint index, const GLubyte *v) const
{
    static const char *fnName = "glVertexAttrib4NubvARB";

    beforeCommand(fnName, _api.glVertexAttrib4Nubv);
    _api.glVertexAttrib4Nubv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4NuivARB().
void ARBVertexProgramAPI::vertexAttrib4NUIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttrib4NuivARB";

    beforeCommand(fnName, _api.glVertexAttrib4Nuiv);
    _api.glVertexAttrib4Nuiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4NusvARB().
void ARBVertexProgramAPI::vertexAttrib4NUSV(GLuint index, const GLushort *v) const
{
    static const char *fnName = "glVertexAttrib4NusvARB";

    beforeCommand(fnName, _api.glVertexAttrib4Nusv);
    _api.glVertexAttrib4Nusv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4bvARB().
void ARBVertexProgramAPI::vertexAttrib4BV(GLuint index, const GLbyte *v) const
{
    static const char *fnName = "glVertexAttrib4bvARB";

    beforeCommand(fnName, _api.glVertexAttrib4bv);
    _api.glVertexAttrib4bv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4dARB().
void ARBVertexProgramAPI::vertexAttrib4D(GLuint index, GLdouble x, GLdouble y,
                                         GLdouble z, GLdouble w) const
{
    static const char *fnName = "glVertexAttrib4dARB";

    beforeCommand(fnName, _api.glVertexAttrib4d);
    _api.glVertexAttrib4d(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4dvARB().
void ARBVertexProgramAPI::vertexAttrib4DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib4dvARB";

    beforeCommand(fnName, _api.glVertexAttrib4dv);
    _api.glVertexAttrib4dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4fARB().
void ARBVertexProgramAPI::vertexAttrib4F(GLuint index, GLfloat x, GLfloat y,
                                         GLfloat z, GLfloat w) const
{
    static const char *fnName = "glVertexAttrib4fARB";

    beforeCommand(fnName, _api.glVertexAttrib4f);
    _api.glVertexAttrib4f(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4fvARB().
void ARBVertexProgramAPI::vertexAttrib4FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib4fvARB";

    beforeCommand(fnName, _api.glVertexAttrib4fv);
    _api.glVertexAttrib4fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4ivARB().
void ARBVertexProgramAPI::vertexAttrib4IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttrib4ivARB";

    beforeCommand(fnName, _api.glVertexAttrib4iv);
    _api.glVertexAttrib4iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4sARB().
void ARBVertexProgramAPI::vertexAttrib4S(GLuint index, GLshort x, GLshort y,
                                         GLshort z, GLshort w) const
{
    static const char *fnName = "glVertexAttrib4sARB";

    beforeCommand(fnName, _api.glVertexAttrib4s);
    _api.glVertexAttrib4s(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4svARB().
void ARBVertexProgramAPI::vertexAttrib4SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib4svARB";

    beforeCommand(fnName, _api.glVertexAttrib4sv);
    _api.glVertexAttrib4sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4ubvARB().
void ARBVertexProgramAPI::vertexAttrib4UBV(GLuint index, const GLubyte *v) const
{
    static const char *fnName = "glVertexAttrib4ubvARB";

    beforeCommand(fnName, _api.glVertexAttrib4ubv);
    _api.glVertexAttrib4ubv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4uivARB().
void ARBVertexProgramAPI::vertexAttrib4UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttrib4uivARB";

    beforeCommand(fnName, _api.glVertexAttrib4uiv);
    _api.glVertexAttrib4uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4usvARB().
void ARBVertexProgramAPI::vertexAttrib4USV(GLuint index, const GLushort *v) const
{
    static const char *fnName = "glVertexAttrib4usvARB";

    beforeCommand(fnName, _api.glVertexAttrib4usv);
    _api.glVertexAttrib4usv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribPointerARB().
void ARBVertexProgramAPI::vertexAttribPointer(GLuint index, GLint size,
                                              VertexAttribPointerType type,
                                              Boolean normalized, GLsizei stride,
                                              const void *pointer) const
{
    static const char *fnName = "glVertexAttribPointerARB";

    beforeCommand(fnName, _api.glVertexAttribPointer);
    _api.glVertexAttribPointer(index, size, toScalar(type), toScalar(normalized),
                               stride, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBVertexShaderAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_vertex_shader extension.
ARBVertexShaderAPI::ARBVertexShaderAPI() :
    BaseExtension("GL_ARB_vertex_shader")
{
}

// Grant read-only access to the underlying function pointers.
const ARBVertexShader &ARBVertexShaderAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_vertex_shader entry points.
void ARBVertexShaderAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindAttribLocationARB().
void ARBVertexShaderAPI::bindAttribLocation(GLhandleARB programObj, GLuint index,
                                            const GLcharARB *name) const
{
    static const char *fnName = "glBindAttribLocationARB";

    beforeCommand(fnName, _api.glBindAttribLocation);
    _api.glBindAttribLocation(programObj, index, name);
    afterCommand(fnName);
}

// Calls glGetActiveAttribARB().
void ARBVertexShaderAPI::getActiveAttrib(GLhandleARB programObj, GLuint index,
                                         GLsizei maxLength, GLsizei *length,
                                         GLint *size, AttributeType *type,
                                         GLcharARB *name) const
{
    static const char *fnName = "glGetActiveAttribARB";

    beforeCommand(fnName, _api.glGetActiveAttrib);
    _api.glGetActiveAttrib(programObj, index, maxLength, length, size,
                           toScalarPtr(type), name);
    afterCommand(fnName);
}

// Calls glGetAttribLocationARB().
GLint ARBVertexShaderAPI::getAttribLocation(GLhandleARB programObj,
                                            const GLcharARB *name) const
{
    static const char *fnName = "glGetAttribLocationARB";

    beforeCommand(fnName, _api.glGetAttribLocation);
    GLint result = _api.glGetAttribLocation(programObj, name);
    afterCommand(fnName);

    return result;
}

////////////////////////////////////////////////////////////////////////////////
// ARBViewportArrayAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_viewport_array extension.
ARBViewportArrayAPI::ARBViewportArrayAPI() :
    BaseExtension("GL_ARB_viewport_array")
{
}

// Grant read-only access to the underlying function pointers.
const ARBViewportArray &ARBViewportArrayAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_viewport_array entry points.
void ARBViewportArrayAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDepthRangeArraydvNV().
void ARBViewportArrayAPI::depthRangeArrayDV(GLuint first, GLsizei count,
                                            const GLdouble *v) const
{
    static const char *fnName = "glDepthRangeArraydvNV";

    beforeCommand(fnName, _api.glDepthRangeArraydv);
    _api.glDepthRangeArraydv(first, count, v);
    afterCommand(fnName);
}

// Calls glDepthRangeIndexeddNV().
void ARBViewportArrayAPI::depthRangeIndexedD(GLuint index, GLdouble n,
                                             GLdouble f) const
{
    static const char *fnName = "glDepthRangeIndexeddNV";

    beforeCommand(fnName, _api.glDepthRangeIndexedd);
    _api.glDepthRangeIndexedd(index, n, f);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ARBWindowPosAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ARB_window_pos extension.
ARBWindowPosAPI::ARBWindowPosAPI() :
    BaseExtension("GL_ARB_window_pos")
{
}

// Grant read-only access to the underlying function pointers.
const ARBWindowPos &ARBWindowPosAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ARB_window_pos entry points.
void ARBWindowPosAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glWindowPos2dARB().
void ARBWindowPosAPI::windowPOS2D(GLdouble x, GLdouble y) const
{
    static const char *fnName = "glWindowPos2dARB";

    beforeCommand(fnName, _api.glWindowPos2d);
    _api.glWindowPos2d(x, y);
    afterCommand(fnName);
}

// Calls glWindowPos2dvARB().
void ARBWindowPosAPI::windowPOS2DV(const GLdouble *v) const
{
    static const char *fnName = "glWindowPos2dvARB";

    beforeCommand(fnName, _api.glWindowPos2dv);
    _api.glWindowPos2dv(v);
    afterCommand(fnName);
}

// Calls glWindowPos2fARB().
void ARBWindowPosAPI::windowPOS2F(GLfloat x, GLfloat y) const
{
    static const char *fnName = "glWindowPos2fARB";

    beforeCommand(fnName, _api.glWindowPos2f);
    _api.glWindowPos2f(x, y);
    afterCommand(fnName);
}

// Calls glWindowPos2fvARB().
void ARBWindowPosAPI::windowPOS2FV(const GLfloat *v) const
{
    static const char *fnName = "glWindowPos2fvARB";

    beforeCommand(fnName, _api.glWindowPos2fv);
    _api.glWindowPos2fv(v);
    afterCommand(fnName);
}

// Calls glWindowPos2iARB().
void ARBWindowPosAPI::windowPOS2I(GLint x, GLint y) const
{
    static const char *fnName = "glWindowPos2iARB";

    beforeCommand(fnName, _api.glWindowPos2i);
    _api.glWindowPos2i(x, y);
    afterCommand(fnName);
}

// Calls glWindowPos2ivARB().
void ARBWindowPosAPI::windowPOS2IV(const GLint *v) const
{
    static const char *fnName = "glWindowPos2ivARB";

    beforeCommand(fnName, _api.glWindowPos2iv);
    _api.glWindowPos2iv(v);
    afterCommand(fnName);
}

// Calls glWindowPos2sARB().
void ARBWindowPosAPI::windowPOS2S(GLshort x, GLshort y) const
{
    static const char *fnName = "glWindowPos2sARB";

    beforeCommand(fnName, _api.glWindowPos2s);
    _api.glWindowPos2s(x, y);
    afterCommand(fnName);
}

// Calls glWindowPos2svARB().
void ARBWindowPosAPI::windowPOS2SV(const GLshort *v) const
{
    static const char *fnName = "glWindowPos2svARB";

    beforeCommand(fnName, _api.glWindowPos2sv);
    _api.glWindowPos2sv(v);
    afterCommand(fnName);
}

// Calls glWindowPos3dARB().
void ARBWindowPosAPI::windowPOS3D(GLdouble x, GLdouble y, GLdouble z) const
{
    static const char *fnName = "glWindowPos3dARB";

    beforeCommand(fnName, _api.glWindowPos3d);
    _api.glWindowPos3d(x, y, z);
    afterCommand(fnName);
}

// Calls glWindowPos3dvARB().
void ARBWindowPosAPI::windowPOS3DV(const GLdouble *v) const
{
    static const char *fnName = "glWindowPos3dvARB";

    beforeCommand(fnName, _api.glWindowPos3dv);
    _api.glWindowPos3dv(v);
    afterCommand(fnName);
}

// Calls glWindowPos3fARB().
void ARBWindowPosAPI::windowPOS3F(GLfloat x, GLfloat y, GLfloat z) const
{
    static const char *fnName = "glWindowPos3fARB";

    beforeCommand(fnName, _api.glWindowPos3f);
    _api.glWindowPos3f(x, y, z);
    afterCommand(fnName);
}

// Calls glWindowPos3fvARB().
void ARBWindowPosAPI::windowPOS3FV(const GLfloat *v) const
{
    static const char *fnName = "glWindowPos3fvARB";

    beforeCommand(fnName, _api.glWindowPos3fv);
    _api.glWindowPos3fv(v);
    afterCommand(fnName);
}

// Calls glWindowPos3iARB().
void ARBWindowPosAPI::windowPOS3I(GLint x, GLint y, GLint z) const
{
    static const char *fnName = "glWindowPos3iARB";

    beforeCommand(fnName, _api.glWindowPos3i);
    _api.glWindowPos3i(x, y, z);
    afterCommand(fnName);
}

// Calls glWindowPos3ivARB().
void ARBWindowPosAPI::windowPOS3IV(const GLint *v) const
{
    static const char *fnName = "glWindowPos3ivARB";

    beforeCommand(fnName, _api.glWindowPos3iv);
    _api.glWindowPos3iv(v);
    afterCommand(fnName);
}

// Calls glWindowPos3sARB().
void ARBWindowPosAPI::windowPOS3S(GLshort x, GLshort y, GLshort z) const
{
    static const char *fnName = "glWindowPos3sARB";

    beforeCommand(fnName, _api.glWindowPos3s);
    _api.glWindowPos3s(x, y, z);
    afterCommand(fnName);
}

// Calls glWindowPos3svARB().
void ARBWindowPosAPI::windowPOS3SV(const GLshort *v) const
{
    static const char *fnName = "glWindowPos3svARB";

    beforeCommand(fnName, _api.glWindowPos3sv);
    _api.glWindowPos3sv(v);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIDrawBuffersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_draw_buffers extension.
ATIDrawBuffersAPI::ATIDrawBuffersAPI() :
    BaseExtension("GL_ATI_draw_buffers")
{
}

// Grant read-only access to the underlying function pointers.
const ATIDrawBuffers &ATIDrawBuffersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_draw_buffers entry points.
void ATIDrawBuffersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawBuffersATI().
void ATIDrawBuffersAPI::drawBuffers(GLsizei n, const DrawBufferMode *bufs) const
{
    static const char *fnName = "glDrawBuffersATI";

    beforeCommand(fnName, _api.glDrawBuffers);
    _api.glDrawBuffers(n, toScalarPtr(bufs));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIElementArrayAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_element_array extension.
ATIElementArrayAPI::ATIElementArrayAPI() :
    BaseExtension("GL_ATI_element_array")
{
}

// Grant read-only access to the underlying function pointers.
const ATIElementArray &ATIElementArrayAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_element_array entry points.
void ATIElementArrayAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawElementArrayATI().
void ATIElementArrayAPI::drawElementArray(PrimitiveType mode, GLsizei count) const
{
    static const char *fnName = "glDrawElementArrayATI";

    beforeCommand(fnName, _api.glDrawElementArray);
    _api.glDrawElementArray(toScalar(mode), count);
    afterCommand(fnName);
}

// Calls glDrawRangeElementArrayATI().
void ATIElementArrayAPI::drawRangeElementArray(PrimitiveType mode, GLuint start,
                                               GLuint end, GLsizei count) const
{
    static const char *fnName = "glDrawRangeElementArrayATI";

    beforeCommand(fnName, _api.glDrawRangeElementArray);
    _api.glDrawRangeElementArray(toScalar(mode), start, end, count);
    afterCommand(fnName);
}

// Calls glElementPointerATI().
void ATIElementArrayAPI::elementPointer(ElementPointerTypeATI type,
                                        const void *pointer) const
{
    static const char *fnName = "glElementPointerATI";

    beforeCommand(fnName, _api.glElementPointer);
    _api.glElementPointer(toScalar(type), pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIEnvmapBumpmapAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_envmap_bumpmap extension.
ATIEnvmapBumpmapAPI::ATIEnvmapBumpmapAPI() :
    BaseExtension("GL_ATI_envmap_bumpmap")
{
}

// Grant read-only access to the underlying function pointers.
const ATIEnvmapBumpmap &ATIEnvmapBumpmapAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_envmap_bumpmap entry points.
void ATIEnvmapBumpmapAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetTexBumpParameterfvATI().
void ATIEnvmapBumpmapAPI::getTexBumpParameterFV(GetTexBumpParameterATI pname,
                                                GLfloat *param) const
{
    static const char *fnName = "glGetTexBumpParameterfvATI";

    beforeCommand(fnName, _api.glGetTexBumpParameterfv);
    _api.glGetTexBumpParameterfv(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetTexBumpParameterivATI().
void ATIEnvmapBumpmapAPI::getTexBumpParameterIV(GetTexBumpParameterATI pname,
                                                GLint *param) const
{
    static const char *fnName = "glGetTexBumpParameterivATI";

    beforeCommand(fnName, _api.glGetTexBumpParameteriv);
    _api.glGetTexBumpParameteriv(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTexBumpParameterfvATI().
void ATIEnvmapBumpmapAPI::texBumpParameterFV(TexBumpParameterATI pname,
                                             const GLfloat *param) const
{
    static const char *fnName = "glTexBumpParameterfvATI";

    beforeCommand(fnName, _api.glTexBumpParameterfv);
    _api.glTexBumpParameterfv(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTexBumpParameterivATI().
void ATIEnvmapBumpmapAPI::texBumpParameterIV(TexBumpParameterATI pname,
                                             const GLint *param) const
{
    static const char *fnName = "glTexBumpParameterivATI";

    beforeCommand(fnName, _api.glTexBumpParameteriv);
    _api.glTexBumpParameteriv(toScalar(pname), param);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIFragmentShaderAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_fragment_shader extension.
ATIFragmentShaderAPI::ATIFragmentShaderAPI() :
    BaseExtension("GL_ATI_fragment_shader")
{
}

// Grant read-only access to the underlying function pointers.
const ATIFragmentShader &ATIFragmentShaderAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_fragment_shader entry points.
void ATIFragmentShaderAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAlphaFragmentOp1ATI().
void ATIFragmentShaderAPI::alphaFragmentOp1(FragmentOpATI op, GLuint dst,
                                            GLuint dstMod, GLuint arg1,
                                            GLuint arg1Rep, GLuint arg1Mod) const
{
    static const char *fnName = "glAlphaFragmentOp1ATI";

    beforeCommand(fnName, _api.glAlphaFragmentOp1);
    _api.glAlphaFragmentOp1(toScalar(op), dst, dstMod, arg1, arg1Rep, arg1Mod);
    afterCommand(fnName);
}

// Calls glAlphaFragmentOp2ATI().
void ATIFragmentShaderAPI::alphaFragmentOp2(FragmentOpATI op, GLuint dst,
                                            GLuint dstMod, GLuint arg1,
                                            GLuint arg1Rep, GLuint arg1Mod,
                                            GLuint arg2, GLuint arg2Rep,
                                            GLuint arg2Mod) const
{
    static const char *fnName = "glAlphaFragmentOp2ATI";

    beforeCommand(fnName, _api.glAlphaFragmentOp2);
    _api.glAlphaFragmentOp2(toScalar(op), dst, dstMod, arg1, arg1Rep, arg1Mod,
                            arg2, arg2Rep, arg2Mod);
    afterCommand(fnName);
}

// Calls glAlphaFragmentOp3ATI().
void ATIFragmentShaderAPI::alphaFragmentOp3(FragmentOpATI op, GLuint dst,
                                            GLuint dstMod, GLuint arg1,
                                            GLuint arg1Rep, GLuint arg1Mod,
                                            GLuint arg2, GLuint arg2Rep,
                                            GLuint arg2Mod, GLuint arg3,
                                            GLuint arg3Rep, GLuint arg3Mod) const
{
    static const char *fnName = "glAlphaFragmentOp3ATI";

    beforeCommand(fnName, _api.glAlphaFragmentOp3);
    _api.glAlphaFragmentOp3(toScalar(op), dst, dstMod, arg1, arg1Rep, arg1Mod,
                            arg2, arg2Rep, arg2Mod, arg3, arg3Rep, arg3Mod);
    afterCommand(fnName);
}

// Calls glBeginFragmentShaderATI().
void ATIFragmentShaderAPI::beginFragmentShader() const
{
    static const char *fnName = "glBeginFragmentShaderATI";

    beforeCommand(fnName, _api.glBeginFragmentShader);
    _api.glBeginFragmentShader();
    afterCommand(fnName);
}

// Calls glBindFragmentShaderATI().
void ATIFragmentShaderAPI::bindFragmentShader(GLuint id) const
{
    static const char *fnName = "glBindFragmentShaderATI";

    beforeCommand(fnName, _api.glBindFragmentShader);
    _api.glBindFragmentShader(id);
    afterCommand(fnName);
}

// Calls glColorFragmentOp1ATI().
void ATIFragmentShaderAPI::colorFragmentOp1(FragmentOpATI op, GLuint dst,
                                            GLuint dstMask, GLuint dstMod,
                                            GLuint arg1, GLuint arg1Rep,
                                            GLuint arg1Mod) const
{
    static const char *fnName = "glColorFragmentOp1ATI";

    beforeCommand(fnName, _api.glColorFragmentOp1);
    _api.glColorFragmentOp1(toScalar(op), dst, dstMask, dstMod, arg1, arg1Rep,
                            arg1Mod);
    afterCommand(fnName);
}

// Calls glColorFragmentOp2ATI().
void ATIFragmentShaderAPI::colorFragmentOp2(FragmentOpATI op, GLuint dst,
                                            GLuint dstMask, GLuint dstMod,
                                            GLuint arg1, GLuint arg1Rep,
                                            GLuint arg1Mod, GLuint arg2,
                                            GLuint arg2Rep, GLuint arg2Mod) const
{
    static const char *fnName = "glColorFragmentOp2ATI";

    beforeCommand(fnName, _api.glColorFragmentOp2);
    _api.glColorFragmentOp2(toScalar(op), dst, dstMask, dstMod, arg1, arg1Rep,
                            arg1Mod, arg2, arg2Rep, arg2Mod);
    afterCommand(fnName);
}

// Calls glColorFragmentOp3ATI().
void ATIFragmentShaderAPI::colorFragmentOp3(FragmentOpATI op, GLuint dst,
                                            GLuint dstMask, GLuint dstMod,
                                            GLuint arg1, GLuint arg1Rep,
                                            GLuint arg1Mod, GLuint arg2,
                                            GLuint arg2Rep, GLuint arg2Mod,
                                            GLuint arg3, GLuint arg3Rep,
                                            GLuint arg3Mod) const
{
    static const char *fnName = "glColorFragmentOp3ATI";

    beforeCommand(fnName, _api.glColorFragmentOp3);
    _api.glColorFragmentOp3(toScalar(op), dst, dstMask, dstMod, arg1, arg1Rep,
                            arg1Mod, arg2, arg2Rep, arg2Mod, arg3, arg3Rep,
                            arg3Mod);
    afterCommand(fnName);
}

// Calls glDeleteFragmentShaderATI().
void ATIFragmentShaderAPI::deleteFragmentShader(GLuint id) const
{
    static const char *fnName = "glDeleteFragmentShaderATI";

    beforeCommand(fnName, _api.glDeleteFragmentShader);
    _api.glDeleteFragmentShader(id);
    afterCommand(fnName);
}

// Calls glEndFragmentShaderATI().
void ATIFragmentShaderAPI::endFragmentShader() const
{
    static const char *fnName = "glEndFragmentShaderATI";

    beforeCommand(fnName, _api.glEndFragmentShader);
    _api.glEndFragmentShader();
    afterCommand(fnName);
}

// Calls glGenFragmentShadersATI().
GLuint ATIFragmentShaderAPI::genFragmentShaders(GLuint range) const
{
    static const char *fnName = "glGenFragmentShadersATI";

    beforeCommand(fnName, _api.glGenFragmentShaders);
    GLuint result = _api.glGenFragmentShaders(range);
    afterCommand(fnName);

    return result;
}

// Calls glPassTexCoordATI().
void ATIFragmentShaderAPI::passTexCoord(GLuint dst, GLuint coord,
                                        SwizzleOpATI swizzle) const
{
    static const char *fnName = "glPassTexCoordATI";

    beforeCommand(fnName, _api.glPassTexCoord);
    _api.glPassTexCoord(dst, coord, toScalar(swizzle));
    afterCommand(fnName);
}

// Calls glSampleMapATI().
void ATIFragmentShaderAPI::sampleMap(GLuint dst, GLuint interp,
                                     SwizzleOpATI swizzle) const
{
    static const char *fnName = "glSampleMapATI";

    beforeCommand(fnName, _api.glSampleMap);
    _api.glSampleMap(dst, interp, toScalar(swizzle));
    afterCommand(fnName);
}

// Calls glSetFragmentShaderConstantATI().
void ATIFragmentShaderAPI::setFragmentShaderConstant(GLuint dst,
                                                     const GLfloat *value) const
{
    static const char *fnName = "glSetFragmentShaderConstantATI";

    beforeCommand(fnName, _api.glSetFragmentShaderConstant);
    _api.glSetFragmentShaderConstant(dst, value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIMapObjectBufferAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_map_object_buffer extension.
ATIMapObjectBufferAPI::ATIMapObjectBufferAPI() :
    BaseExtension("GL_ATI_map_object_buffer")
{
}

// Grant read-only access to the underlying function pointers.
const ATIMapObjectBuffer &ATIMapObjectBufferAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_map_object_buffer entry points.
void ATIMapObjectBufferAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMapObjectBufferATI().
void *ATIMapObjectBufferAPI::mapObjectBuffer(BufferName buffer) const
{
    static const char *fnName = "glMapObjectBufferATI";

    beforeCommand(fnName, _api.glMapObjectBuffer);
    void *result = _api.glMapObjectBuffer(buffer.ID);
    afterCommand(fnName);

    return result;
}

// Calls glUnmapObjectBufferATI().
void ATIMapObjectBufferAPI::unmapObjectBuffer(BufferName buffer) const
{
    static const char *fnName = "glUnmapObjectBufferATI";

    beforeCommand(fnName, _api.glUnmapObjectBuffer);
    _api.glUnmapObjectBuffer(buffer.ID);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIPnTrianglesAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_pn_triangles extension.
ATIPnTrianglesAPI::ATIPnTrianglesAPI() :
    BaseExtension("GL_ATI_pn_triangles")
{
}

// Grant read-only access to the underlying function pointers.
const ATIPnTriangles &ATIPnTrianglesAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_pn_triangles entry points.
void ATIPnTrianglesAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPNTrianglesfATI().
void ATIPnTrianglesAPI::pnTrianglesF(PNTrianglesPNameATI pname, GLfloat param) const
{
    static const char *fnName = "glPNTrianglesfATI";

    beforeCommand(fnName, _api.glPNTrianglesf);
    _api.glPNTrianglesf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPNTrianglesiATI().
void ATIPnTrianglesAPI::pnTrianglesI(PNTrianglesPNameATI pname, GLint param) const
{
    static const char *fnName = "glPNTrianglesiATI";

    beforeCommand(fnName, _api.glPNTrianglesi);
    _api.glPNTrianglesi(toScalar(pname), param);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATISeparateStencilAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_separate_stencil extension.
ATISeparateStencilAPI::ATISeparateStencilAPI() :
    BaseExtension("GL_ATI_separate_stencil")
{
}

// Grant read-only access to the underlying function pointers.
const ATISeparateStencil &ATISeparateStencilAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_separate_stencil entry points.
void ATISeparateStencilAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glStencilFuncSeparateATI().
void ATISeparateStencilAPI::stencilFuncSeparate(StencilFunction frontfunc,
                                                StencilFunction backfunc,
                                                GLint ref, GLuint mask) const
{
    static const char *fnName = "glStencilFuncSeparateATI";

    beforeCommand(fnName, _api.glStencilFuncSeparate);
    _api.glStencilFuncSeparate(toScalar(frontfunc), toScalar(backfunc), ref,
                               mask);
    afterCommand(fnName);
}

// Calls glStencilOpSeparateATI().
void ATISeparateStencilAPI::stencilOpSeparate(StencilFaceDirection face,
                                              StencilOp sfail, StencilOp dpfail,
                                              StencilOp dppass) const
{
    static const char *fnName = "glStencilOpSeparateATI";

    beforeCommand(fnName, _api.glStencilOpSeparate);
    _api.glStencilOpSeparate(toScalar(face), toScalar(sfail), toScalar(dpfail),
                             toScalar(dppass));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIVertexArrayObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_vertex_array_object extension.
ATIVertexArrayObjectAPI::ATIVertexArrayObjectAPI() :
    BaseExtension("GL_ATI_vertex_array_object")
{
}

// Grant read-only access to the underlying function pointers.
const ATIVertexArrayObject &ATIVertexArrayObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_vertex_array_object entry points.
void ATIVertexArrayObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glArrayObjectATI().
void ATIVertexArrayObjectAPI::arrayObject(EnableCap array, GLint size,
                                          ScalarType type, GLsizei stride,
                                          BufferName buffer, GLuint offset) const
{
    static const char *fnName = "glArrayObjectATI";

    beforeCommand(fnName, _api.glArrayObject);
    _api.glArrayObject(toScalar(array), size, toScalar(type), stride, buffer.ID,
                       offset);
    afterCommand(fnName);
}

// Calls glFreeObjectBufferATI().
void ATIVertexArrayObjectAPI::freeObjectBuffer(BufferName buffer) const
{
    static const char *fnName = "glFreeObjectBufferATI";

    beforeCommand(fnName, _api.glFreeObjectBuffer);
    _api.glFreeObjectBuffer(buffer.ID);
    afterCommand(fnName);
}

// Calls glGetArrayObjectfvATI().
void ATIVertexArrayObjectAPI::getArrayObjectFV(EnableCap array,
                                               ArrayObjectPNameATI pname,
                                               GLfloat *params) const
{
    static const char *fnName = "glGetArrayObjectfvATI";

    beforeCommand(fnName, _api.glGetArrayObjectfv);
    _api.glGetArrayObjectfv(toScalar(array), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetArrayObjectivATI().
void ATIVertexArrayObjectAPI::getArrayObjectIV(EnableCap array,
                                               ArrayObjectPNameATI pname,
                                               GLint *params) const
{
    static const char *fnName = "glGetArrayObjectivATI";

    beforeCommand(fnName, _api.glGetArrayObjectiv);
    _api.glGetArrayObjectiv(toScalar(array), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetObjectBufferfvATI().
void ATIVertexArrayObjectAPI::getObjectBufferFV(BufferName buffer,
                                                ArrayObjectPNameATI pname,
                                                GLfloat *params) const
{
    static const char *fnName = "glGetObjectBufferfvATI";

    beforeCommand(fnName, _api.glGetObjectBufferfv);
    _api.glGetObjectBufferfv(buffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetObjectBufferivATI().
void ATIVertexArrayObjectAPI::getObjectBufferIV(BufferName buffer,
                                                ArrayObjectPNameATI pname,
                                                GLint *params) const
{
    static const char *fnName = "glGetObjectBufferivATI";

    beforeCommand(fnName, _api.glGetObjectBufferiv);
    _api.glGetObjectBufferiv(buffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVariantArrayObjectfvATI().
void ATIVertexArrayObjectAPI::getVariantArrayObjectFV(GLuint id,
                                                      ArrayObjectPNameATI pname,
                                                      GLfloat *params) const
{
    static const char *fnName = "glGetVariantArrayObjectfvATI";

    beforeCommand(fnName, _api.glGetVariantArrayObjectfv);
    _api.glGetVariantArrayObjectfv(id, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVariantArrayObjectivATI().
void ATIVertexArrayObjectAPI::getVariantArrayObjectIV(GLuint id,
                                                      ArrayObjectPNameATI pname,
                                                      GLint *params) const
{
    static const char *fnName = "glGetVariantArrayObjectivATI";

    beforeCommand(fnName, _api.glGetVariantArrayObjectiv);
    _api.glGetVariantArrayObjectiv(id, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsObjectBufferATI().
Boolean ATIVertexArrayObjectAPI::isObjectBuffer(BufferName buffer) const
{
    static const char *fnName = "glIsObjectBufferATI";

    beforeCommand(fnName, _api.glIsObjectBuffer);
    GLboolean result = _api.glIsObjectBuffer(buffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glNewObjectBufferATI().
GLuint ATIVertexArrayObjectAPI::newObjectBuffer(GLsizei size,
                                                const void *pointer,
                                                ArrayObjectUsageATI usage) const
{
    static const char *fnName = "glNewObjectBufferATI";

    beforeCommand(fnName, _api.glNewObjectBuffer);
    GLuint result = _api.glNewObjectBuffer(size, pointer, toScalar(usage));
    afterCommand(fnName);

    return result;
}

// Calls glUpdateObjectBufferATI().
void ATIVertexArrayObjectAPI::updateObjectBuffer(BufferName buffer,
                                                 GLuint offset, GLsizei size,
                                                 const void *pointer,
                                                 PreserveModeATI preserve) const
{
    static const char *fnName = "glUpdateObjectBufferATI";

    beforeCommand(fnName, _api.glUpdateObjectBuffer);
    _api.glUpdateObjectBuffer(buffer.ID, offset, size, pointer,
                              toScalar(preserve));
    afterCommand(fnName);
}

// Calls glVariantArrayObjectATI().
void ATIVertexArrayObjectAPI::variantArrayObject(GLuint id, ScalarType type,
                                                 GLsizei stride,
                                                 BufferName buffer,
                                                 GLuint offset) const
{
    static const char *fnName = "glVariantArrayObjectATI";

    beforeCommand(fnName, _api.glVariantArrayObject);
    _api.glVariantArrayObject(id, toScalar(type), stride, buffer.ID, offset);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIVertexAttribArrayObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_vertex_attrib_array_object extension.
ATIVertexAttribArrayObjectAPI::ATIVertexAttribArrayObjectAPI() :
    BaseExtension("GL_ATI_vertex_attrib_array_object")
{
}

// Grant read-only access to the underlying function pointers.
const ATIVertexAttribArrayObject &ATIVertexAttribArrayObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_vertex_attrib_array_object entry points.
void ATIVertexAttribArrayObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetVertexAttribArrayObjectfvATI().
void ATIVertexAttribArrayObjectAPI::getVertexAttribArrayObjectFV(GLuint index,
                                                                 ArrayObjectPNameATI pname,
                                                                 GLfloat *params) const
{
    static const char *fnName = "glGetVertexAttribArrayObjectfvATI";

    beforeCommand(fnName, _api.glGetVertexAttribArrayObjectfv);
    _api.glGetVertexAttribArrayObjectfv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribArrayObjectivATI().
void ATIVertexAttribArrayObjectAPI::getVertexAttribArrayObjectIV(GLuint index,
                                                                 ArrayObjectPNameATI pname,
                                                                 GLint *params) const
{
    static const char *fnName = "glGetVertexAttribArrayObjectivATI";

    beforeCommand(fnName, _api.glGetVertexAttribArrayObjectiv);
    _api.glGetVertexAttribArrayObjectiv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glVertexAttribArrayObjectATI().
void ATIVertexAttribArrayObjectAPI::vertexAttribArrayObject(GLuint index,
                                                            GLint size,
                                                            VertexAttribPointerType type,
                                                            Boolean normalized,
                                                            GLsizei stride,
                                                            BufferName buffer,
                                                            GLuint offset) const
{
    static const char *fnName = "glVertexAttribArrayObjectATI";

    beforeCommand(fnName, _api.glVertexAttribArrayObject);
    _api.glVertexAttribArrayObject(index, size, toScalar(type),
                                   toScalar(normalized), stride, buffer.ID,
                                   offset);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// ATIVertexStreamsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_ATI_vertex_streams extension.
ATIVertexStreamsAPI::ATIVertexStreamsAPI() :
    BaseExtension("GL_ATI_vertex_streams")
{
}

// Grant read-only access to the underlying function pointers.
const ATIVertexStreams &ATIVertexStreamsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_ATI_vertex_streams entry points.
void ATIVertexStreamsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glClientActiveVertexStreamATI().
void ATIVertexStreamsAPI::clientActiveVertexStream(VertexStreamATI stream) const
{
    static const char *fnName = "glClientActiveVertexStreamATI";

    beforeCommand(fnName, _api.glClientActiveVertexStream);
    _api.glClientActiveVertexStream(toScalar(stream));
    afterCommand(fnName);
}

// Calls glNormalStream3bATI().
void ATIVertexStreamsAPI::normalStream3B(VertexStreamATI stream, GLbyte nx,
                                         GLbyte ny, GLbyte nz) const
{
    static const char *fnName = "glNormalStream3bATI";

    beforeCommand(fnName, _api.glNormalStream3b);
    _api.glNormalStream3b(toScalar(stream), nx, ny, nz);
    afterCommand(fnName);
}

// Calls glNormalStream3bvATI().
void ATIVertexStreamsAPI::normalStream3BV(VertexStreamATI stream,
                                          const GLbyte *coords) const
{
    static const char *fnName = "glNormalStream3bvATI";

    beforeCommand(fnName, _api.glNormalStream3bv);
    _api.glNormalStream3bv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glNormalStream3dATI().
void ATIVertexStreamsAPI::normalStream3D(VertexStreamATI stream, GLdouble nx,
                                         GLdouble ny, GLdouble nz) const
{
    static const char *fnName = "glNormalStream3dATI";

    beforeCommand(fnName, _api.glNormalStream3d);
    _api.glNormalStream3d(toScalar(stream), nx, ny, nz);
    afterCommand(fnName);
}

// Calls glNormalStream3dvATI().
void ATIVertexStreamsAPI::normalStream3DV(VertexStreamATI stream,
                                          const GLdouble *coords) const
{
    static const char *fnName = "glNormalStream3dvATI";

    beforeCommand(fnName, _api.glNormalStream3dv);
    _api.glNormalStream3dv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glNormalStream3fATI().
void ATIVertexStreamsAPI::normalStream3F(VertexStreamATI stream, GLfloat nx,
                                         GLfloat ny, GLfloat nz) const
{
    static const char *fnName = "glNormalStream3fATI";

    beforeCommand(fnName, _api.glNormalStream3f);
    _api.glNormalStream3f(toScalar(stream), nx, ny, nz);
    afterCommand(fnName);
}

// Calls glNormalStream3fvATI().
void ATIVertexStreamsAPI::normalStream3FV(VertexStreamATI stream,
                                          const GLfloat *coords) const
{
    static const char *fnName = "glNormalStream3fvATI";

    beforeCommand(fnName, _api.glNormalStream3fv);
    _api.glNormalStream3fv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glNormalStream3iATI().
void ATIVertexStreamsAPI::normalStream3I(VertexStreamATI stream, GLint nx,
                                         GLint ny, GLint nz) const
{
    static const char *fnName = "glNormalStream3iATI";

    beforeCommand(fnName, _api.glNormalStream3i);
    _api.glNormalStream3i(toScalar(stream), nx, ny, nz);
    afterCommand(fnName);
}

// Calls glNormalStream3ivATI().
void ATIVertexStreamsAPI::normalStream3IV(VertexStreamATI stream,
                                          const GLint *coords) const
{
    static const char *fnName = "glNormalStream3ivATI";

    beforeCommand(fnName, _api.glNormalStream3iv);
    _api.glNormalStream3iv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glNormalStream3sATI().
void ATIVertexStreamsAPI::normalStream3S(VertexStreamATI stream, GLshort nx,
                                         GLshort ny, GLshort nz) const
{
    static const char *fnName = "glNormalStream3sATI";

    beforeCommand(fnName, _api.glNormalStream3s);
    _api.glNormalStream3s(toScalar(stream), nx, ny, nz);
    afterCommand(fnName);
}

// Calls glNormalStream3svATI().
void ATIVertexStreamsAPI::normalStream3SV(VertexStreamATI stream,
                                          const GLshort *coords) const
{
    static const char *fnName = "glNormalStream3svATI";

    beforeCommand(fnName, _api.glNormalStream3sv);
    _api.glNormalStream3sv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexBlendEnvfATI().
void ATIVertexStreamsAPI::vertexBlendEnvF(VertexStreamATI pname, GLfloat param) const
{
    static const char *fnName = "glVertexBlendEnvfATI";

    beforeCommand(fnName, _api.glVertexBlendEnvf);
    _api.glVertexBlendEnvf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glVertexBlendEnviATI().
void ATIVertexStreamsAPI::vertexBlendEnvI(VertexStreamATI pname, GLint param) const
{
    static const char *fnName = "glVertexBlendEnviATI";

    beforeCommand(fnName, _api.glVertexBlendEnvi);
    _api.glVertexBlendEnvi(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glVertexStream1dATI().
void ATIVertexStreamsAPI::vertexStream1D(VertexStreamATI stream, GLdouble x) const
{
    static const char *fnName = "glVertexStream1dATI";

    beforeCommand(fnName, _api.glVertexStream1d);
    _api.glVertexStream1d(toScalar(stream), x);
    afterCommand(fnName);
}

// Calls glVertexStream1dvATI().
void ATIVertexStreamsAPI::vertexStream1DV(VertexStreamATI stream,
                                          const GLdouble *coords) const
{
    static const char *fnName = "glVertexStream1dvATI";

    beforeCommand(fnName, _api.glVertexStream1dv);
    _api.glVertexStream1dv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream1fATI().
void ATIVertexStreamsAPI::vertexStream1F(VertexStreamATI stream, GLfloat x) const
{
    static const char *fnName = "glVertexStream1fATI";

    beforeCommand(fnName, _api.glVertexStream1f);
    _api.glVertexStream1f(toScalar(stream), x);
    afterCommand(fnName);
}

// Calls glVertexStream1fvATI().
void ATIVertexStreamsAPI::vertexStream1FV(VertexStreamATI stream,
                                          const GLfloat *coords) const
{
    static const char *fnName = "glVertexStream1fvATI";

    beforeCommand(fnName, _api.glVertexStream1fv);
    _api.glVertexStream1fv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream1iATI().
void ATIVertexStreamsAPI::vertexStream1I(VertexStreamATI stream, GLint x) const
{
    static const char *fnName = "glVertexStream1iATI";

    beforeCommand(fnName, _api.glVertexStream1i);
    _api.glVertexStream1i(toScalar(stream), x);
    afterCommand(fnName);
}

// Calls glVertexStream1ivATI().
void ATIVertexStreamsAPI::vertexStream1IV(VertexStreamATI stream,
                                          const GLint *coords) const
{
    static const char *fnName = "glVertexStream1ivATI";

    beforeCommand(fnName, _api.glVertexStream1iv);
    _api.glVertexStream1iv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream1sATI().
void ATIVertexStreamsAPI::vertexStream1S(VertexStreamATI stream, GLshort x) const
{
    static const char *fnName = "glVertexStream1sATI";

    beforeCommand(fnName, _api.glVertexStream1s);
    _api.glVertexStream1s(toScalar(stream), x);
    afterCommand(fnName);
}

// Calls glVertexStream1svATI().
void ATIVertexStreamsAPI::vertexStream1SV(VertexStreamATI stream,
                                          const GLshort *coords) const
{
    static const char *fnName = "glVertexStream1svATI";

    beforeCommand(fnName, _api.glVertexStream1sv);
    _api.glVertexStream1sv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream2dATI().
void ATIVertexStreamsAPI::vertexStream2D(VertexStreamATI stream, GLdouble x,
                                         GLdouble y) const
{
    static const char *fnName = "glVertexStream2dATI";

    beforeCommand(fnName, _api.glVertexStream2d);
    _api.glVertexStream2d(toScalar(stream), x, y);
    afterCommand(fnName);
}

// Calls glVertexStream2dvATI().
void ATIVertexStreamsAPI::vertexStream2DV(VertexStreamATI stream,
                                          const GLdouble *coords) const
{
    static const char *fnName = "glVertexStream2dvATI";

    beforeCommand(fnName, _api.glVertexStream2dv);
    _api.glVertexStream2dv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream2fATI().
void ATIVertexStreamsAPI::vertexStream2F(VertexStreamATI stream, GLfloat x,
                                         GLfloat y) const
{
    static const char *fnName = "glVertexStream2fATI";

    beforeCommand(fnName, _api.glVertexStream2f);
    _api.glVertexStream2f(toScalar(stream), x, y);
    afterCommand(fnName);
}

// Calls glVertexStream2fvATI().
void ATIVertexStreamsAPI::vertexStream2FV(VertexStreamATI stream,
                                          const GLfloat *coords) const
{
    static const char *fnName = "glVertexStream2fvATI";

    beforeCommand(fnName, _api.glVertexStream2fv);
    _api.glVertexStream2fv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream2iATI().
void ATIVertexStreamsAPI::vertexStream2I(VertexStreamATI stream, GLint x,
                                         GLint y) const
{
    static const char *fnName = "glVertexStream2iATI";

    beforeCommand(fnName, _api.glVertexStream2i);
    _api.glVertexStream2i(toScalar(stream), x, y);
    afterCommand(fnName);
}

// Calls glVertexStream2ivATI().
void ATIVertexStreamsAPI::vertexStream2IV(VertexStreamATI stream,
                                          const GLint *coords) const
{
    static const char *fnName = "glVertexStream2ivATI";

    beforeCommand(fnName, _api.glVertexStream2iv);
    _api.glVertexStream2iv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream2sATI().
void ATIVertexStreamsAPI::vertexStream2S(VertexStreamATI stream, GLshort x,
                                         GLshort y) const
{
    static const char *fnName = "glVertexStream2sATI";

    beforeCommand(fnName, _api.glVertexStream2s);
    _api.glVertexStream2s(toScalar(stream), x, y);
    afterCommand(fnName);
}

// Calls glVertexStream2svATI().
void ATIVertexStreamsAPI::vertexStream2SV(VertexStreamATI stream,
                                          const GLshort *coords) const
{
    static const char *fnName = "glVertexStream2svATI";

    beforeCommand(fnName, _api.glVertexStream2sv);
    _api.glVertexStream2sv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream3dATI().
void ATIVertexStreamsAPI::vertexStream3D(VertexStreamATI stream, GLdouble x,
                                         GLdouble y, GLdouble z) const
{
    static const char *fnName = "glVertexStream3dATI";

    beforeCommand(fnName, _api.glVertexStream3d);
    _api.glVertexStream3d(toScalar(stream), x, y, z);
    afterCommand(fnName);
}

// Calls glVertexStream3dvATI().
void ATIVertexStreamsAPI::vertexStream3DV(VertexStreamATI stream,
                                          const GLdouble *coords) const
{
    static const char *fnName = "glVertexStream3dvATI";

    beforeCommand(fnName, _api.glVertexStream3dv);
    _api.glVertexStream3dv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream3fATI().
void ATIVertexStreamsAPI::vertexStream3F(VertexStreamATI stream, GLfloat x,
                                         GLfloat y, GLfloat z) const
{
    static const char *fnName = "glVertexStream3fATI";

    beforeCommand(fnName, _api.glVertexStream3f);
    _api.glVertexStream3f(toScalar(stream), x, y, z);
    afterCommand(fnName);
}

// Calls glVertexStream3fvATI().
void ATIVertexStreamsAPI::vertexStream3FV(VertexStreamATI stream,
                                          const GLfloat *coords) const
{
    static const char *fnName = "glVertexStream3fvATI";

    beforeCommand(fnName, _api.glVertexStream3fv);
    _api.glVertexStream3fv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream3iATI().
void ATIVertexStreamsAPI::vertexStream3I(VertexStreamATI stream, GLint x,
                                         GLint y, GLint z) const
{
    static const char *fnName = "glVertexStream3iATI";

    beforeCommand(fnName, _api.glVertexStream3i);
    _api.glVertexStream3i(toScalar(stream), x, y, z);
    afterCommand(fnName);
}

// Calls glVertexStream3ivATI().
void ATIVertexStreamsAPI::vertexStream3IV(VertexStreamATI stream,
                                          const GLint *coords) const
{
    static const char *fnName = "glVertexStream3ivATI";

    beforeCommand(fnName, _api.glVertexStream3iv);
    _api.glVertexStream3iv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream3sATI().
void ATIVertexStreamsAPI::vertexStream3S(VertexStreamATI stream, GLshort x,
                                         GLshort y, GLshort z) const
{
    static const char *fnName = "glVertexStream3sATI";

    beforeCommand(fnName, _api.glVertexStream3s);
    _api.glVertexStream3s(toScalar(stream), x, y, z);
    afterCommand(fnName);
}

// Calls glVertexStream3svATI().
void ATIVertexStreamsAPI::vertexStream3SV(VertexStreamATI stream,
                                          const GLshort *coords) const
{
    static const char *fnName = "glVertexStream3svATI";

    beforeCommand(fnName, _api.glVertexStream3sv);
    _api.glVertexStream3sv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream4dATI().
void ATIVertexStreamsAPI::vertexStream4D(VertexStreamATI stream, GLdouble x,
                                         GLdouble y, GLdouble z, GLdouble w) const
{
    static const char *fnName = "glVertexStream4dATI";

    beforeCommand(fnName, _api.glVertexStream4d);
    _api.glVertexStream4d(toScalar(stream), x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexStream4dvATI().
void ATIVertexStreamsAPI::vertexStream4DV(VertexStreamATI stream,
                                          const GLdouble *coords) const
{
    static const char *fnName = "glVertexStream4dvATI";

    beforeCommand(fnName, _api.glVertexStream4dv);
    _api.glVertexStream4dv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream4fATI().
void ATIVertexStreamsAPI::vertexStream4F(VertexStreamATI stream, GLfloat x,
                                         GLfloat y, GLfloat z, GLfloat w) const
{
    static const char *fnName = "glVertexStream4fATI";

    beforeCommand(fnName, _api.glVertexStream4f);
    _api.glVertexStream4f(toScalar(stream), x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexStream4fvATI().
void ATIVertexStreamsAPI::vertexStream4FV(VertexStreamATI stream,
                                          const GLfloat *coords) const
{
    static const char *fnName = "glVertexStream4fvATI";

    beforeCommand(fnName, _api.glVertexStream4fv);
    _api.glVertexStream4fv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream4iATI().
void ATIVertexStreamsAPI::vertexStream4I(VertexStreamATI stream, GLint x,
                                         GLint y, GLint z, GLint w) const
{
    static const char *fnName = "glVertexStream4iATI";

    beforeCommand(fnName, _api.glVertexStream4i);
    _api.glVertexStream4i(toScalar(stream), x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexStream4ivATI().
void ATIVertexStreamsAPI::vertexStream4IV(VertexStreamATI stream,
                                          const GLint *coords) const
{
    static const char *fnName = "glVertexStream4ivATI";

    beforeCommand(fnName, _api.glVertexStream4iv);
    _api.glVertexStream4iv(toScalar(stream), coords);
    afterCommand(fnName);
}

// Calls glVertexStream4sATI().
void ATIVertexStreamsAPI::vertexStream4S(VertexStreamATI stream, GLshort x,
                                         GLshort y, GLshort z, GLshort w) const
{
    static const char *fnName = "glVertexStream4sATI";

    beforeCommand(fnName, _api.glVertexStream4s);
    _api.glVertexStream4s(toScalar(stream), x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexStream4svATI().
void ATIVertexStreamsAPI::vertexStream4SV(VertexStreamATI stream,
                                          const GLshort *coords) const
{
    static const char *fnName = "glVertexStream4svATI";

    beforeCommand(fnName, _api.glVertexStream4sv);
    _api.glVertexStream4sv(toScalar(stream), coords);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTEglImageStorageAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_EGL_image_storage extension.
EXTEglImageStorageAPI::EXTEglImageStorageAPI() :
    BaseExtension("GL_EXT_EGL_image_storage")
{
}

// Grant read-only access to the underlying function pointers.
const EXTEglImageStorage &EXTEglImageStorageAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_EGL_image_storage entry points.
void EXTEglImageStorageAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glEGLImageTargetTexStorageEXT().
void EXTEglImageStorageAPI::eglImageTargetTexStorage(GLenum target,
                                                     GLeglImageOES image,
                                                     const GLint*attrib_list) const
{
    static const char *fnName = "glEGLImageTargetTexStorageEXT";

    beforeCommand(fnName, _api.glEGLImageTargetTexStorage);
    _api.glEGLImageTargetTexStorage(target, image, attrib_list);
    afterCommand(fnName);
}

// Calls glEGLImageTargetTextureStorageEXT().
void EXTEglImageStorageAPI::eglImageTargetTextureStorage(TextureName texture,
                                                         GLeglImageOES image,
                                                         const GLint*attrib_list) const
{
    static const char *fnName = "glEGLImageTargetTextureStorageEXT";

    beforeCommand(fnName, _api.glEGLImageTargetTextureStorage);
    _api.glEGLImageTargetTextureStorage(texture.ID, image, attrib_list);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTBindableUniformAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_bindable_uniform extension.
EXTBindableUniformAPI::EXTBindableUniformAPI() :
    BaseExtension("GL_EXT_bindable_uniform")
{
}

// Grant read-only access to the underlying function pointers.
const EXTBindableUniform &EXTBindableUniformAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_bindable_uniform entry points.
void EXTBindableUniformAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetUniformBufferSizeEXT().
GLint EXTBindableUniformAPI::getUniformBufferSize(ProgramName program,
                                                  GLint location) const
{
    static const char *fnName = "glGetUniformBufferSizeEXT";

    beforeCommand(fnName, _api.glGetUniformBufferSize);
    GLint result = _api.glGetUniformBufferSize(program.ID, location);
    afterCommand(fnName);

    return result;
}

// Calls glGetUniformOffsetEXT().
GLintptr EXTBindableUniformAPI::getUniformOffset(ProgramName program,
                                                 GLint location) const
{
    static const char *fnName = "glGetUniformOffsetEXT";

    beforeCommand(fnName, _api.glGetUniformOffset);
    GLintptr result = _api.glGetUniformOffset(program.ID, location);
    afterCommand(fnName);

    return result;
}

// Calls glUniformBufferEXT().
void EXTBindableUniformAPI::uniformBuffer(ProgramName program, GLint location,
                                          BufferName buffer) const
{
    static const char *fnName = "glUniformBufferEXT";

    beforeCommand(fnName, _api.glUniformBuffer);
    _api.glUniformBuffer(program.ID, location, buffer.ID);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTBlendColorAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_blend_color extension.
EXTBlendColorAPI::EXTBlendColorAPI() :
    BaseExtension("GL_EXT_blend_color")
{
}

// Grant read-only access to the underlying function pointers.
const EXTBlendColor &EXTBlendColorAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_blend_color entry points.
void EXTBlendColorAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendColorEXT().
void EXTBlendColorAPI::blendColor(GLfloat red, GLfloat green, GLfloat blue,
                                  GLfloat alpha) const
{
    static const char *fnName = "glBlendColorEXT";

    beforeCommand(fnName, _api.glBlendColor);
    _api.glBlendColor(red, green, blue, alpha);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTBlendEquationSeparateAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_blend_equation_separate extension.
EXTBlendEquationSeparateAPI::EXTBlendEquationSeparateAPI() :
    BaseExtension("GL_EXT_blend_equation_separate")
{
}

// Grant read-only access to the underlying function pointers.
const EXTBlendEquationSeparate &EXTBlendEquationSeparateAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_blend_equation_separate entry points.
void EXTBlendEquationSeparateAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendEquationSeparateEXT().
void EXTBlendEquationSeparateAPI::blendEquationSeparate(BlendEquationModeEXT modeRGB,
                                                        BlendEquationModeEXT modeAlpha) const
{
    static const char *fnName = "glBlendEquationSeparateEXT";

    beforeCommand(fnName, _api.glBlendEquationSeparate);
    _api.glBlendEquationSeparate(toScalar(modeRGB), toScalar(modeAlpha));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTBlendFuncSeparateAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_blend_func_separate extension.
EXTBlendFuncSeparateAPI::EXTBlendFuncSeparateAPI() :
    BaseExtension("GL_EXT_blend_func_separate")
{
}

// Grant read-only access to the underlying function pointers.
const EXTBlendFuncSeparate &EXTBlendFuncSeparateAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_blend_func_separate entry points.
void EXTBlendFuncSeparateAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendFuncSeparateEXT().
void EXTBlendFuncSeparateAPI::blendFuncSeparate(BlendingFactor sfactorRGB,
                                                BlendingFactor dfactorRGB,
                                                BlendingFactor sfactorAlpha,
                                                BlendingFactor dfactorAlpha) const
{
    static const char *fnName = "glBlendFuncSeparateEXT";

    beforeCommand(fnName, _api.glBlendFuncSeparate);
    _api.glBlendFuncSeparate(toScalar(sfactorRGB), toScalar(dfactorRGB),
                             toScalar(sfactorAlpha), toScalar(dfactorAlpha));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTBlendMinmaxAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_blend_minmax extension.
EXTBlendMinmaxAPI::EXTBlendMinmaxAPI() :
    BaseExtension("GL_EXT_blend_minmax")
{
}

// Grant read-only access to the underlying function pointers.
const EXTBlendMinmax &EXTBlendMinmaxAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_blend_minmax entry points.
void EXTBlendMinmaxAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendEquationEXT().
void EXTBlendMinmaxAPI::blendEquation(BlendEquationModeEXT mode) const
{
    static const char *fnName = "glBlendEquationEXT";

    beforeCommand(fnName, _api.glBlendEquation);
    _api.glBlendEquation(toScalar(mode));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTColorSubtableAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_color_subtable extension.
EXTColorSubtableAPI::EXTColorSubtableAPI() :
    BaseExtension("GL_EXT_color_subtable")
{
}

// Grant read-only access to the underlying function pointers.
const EXTColorSubtable &EXTColorSubtableAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_color_subtable entry points.
void EXTColorSubtableAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glColorSubTableEXT().
void EXTColorSubtableAPI::colorSubTable(GLenum target, GLsizei start,
                                        GLsizei count, PixelFormat format,
                                        PixelType type, const void *data) const
{
    static const char *fnName = "glColorSubTableEXT";

    beforeCommand(fnName, _api.glColorSubTable);
    _api.glColorSubTable(target, start, count, toScalar(format), toScalar(type),
                         data);
    afterCommand(fnName);
}

// Calls glCopyColorSubTableEXT().
void EXTColorSubtableAPI::copyColorSubTable(GLenum target, GLsizei start,
                                            GLint x, GLint y, GLsizei width) const
{
    static const char *fnName = "glCopyColorSubTableEXT";

    beforeCommand(fnName, _api.glCopyColorSubTable);
    _api.glCopyColorSubTable(target, start, x, y, width);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTCompiledVertexArrayAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_compiled_vertex_array extension.
EXTCompiledVertexArrayAPI::EXTCompiledVertexArrayAPI() :
    BaseExtension("GL_EXT_compiled_vertex_array")
{
}

// Grant read-only access to the underlying function pointers.
const EXTCompiledVertexArray &EXTCompiledVertexArrayAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_compiled_vertex_array entry points.
void EXTCompiledVertexArrayAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glLockArraysEXT().
void EXTCompiledVertexArrayAPI::lockArrays(GLint first, GLsizei count) const
{
    static const char *fnName = "glLockArraysEXT";

    beforeCommand(fnName, _api.glLockArrays);
    _api.glLockArrays(first, count);
    afterCommand(fnName);
}

// Calls glUnlockArraysEXT().
void EXTCompiledVertexArrayAPI::unlockArrays() const
{
    static const char *fnName = "glUnlockArraysEXT";

    beforeCommand(fnName, _api.glUnlockArrays);
    _api.glUnlockArrays();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTConvolutionAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_convolution extension.
EXTConvolutionAPI::EXTConvolutionAPI() :
    BaseExtension("GL_EXT_convolution")
{
}

// Grant read-only access to the underlying function pointers.
const EXTConvolution &EXTConvolutionAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_convolution entry points.
void EXTConvolutionAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glConvolutionFilter1DEXT().
void EXTConvolutionAPI::convolutionFilter1D(ConvolutionTargetEXT target,
                                            InternalFormat internalformat,
                                            GLsizei width, PixelFormat format,
                                            PixelType type, const void *image) const
{
    static const char *fnName = "glConvolutionFilter1DEXT";

    beforeCommand(fnName, _api.glConvolutionFilter1D);
    _api.glConvolutionFilter1D(toScalar(target), toScalar(internalformat), width,
                               toScalar(format), toScalar(type), image);
    afterCommand(fnName);
}

// Calls glConvolutionFilter2DEXT().
void EXTConvolutionAPI::convolutionFilter2D(ConvolutionTargetEXT target,
                                            InternalFormat internalformat,
                                            GLsizei width, GLsizei height,
                                            PixelFormat format, PixelType type,
                                            const void *image) const
{
    static const char *fnName = "glConvolutionFilter2DEXT";

    beforeCommand(fnName, _api.glConvolutionFilter2D);
    _api.glConvolutionFilter2D(toScalar(target), toScalar(internalformat), width,
                               height, toScalar(format), toScalar(type), image);
    afterCommand(fnName);
}

// Calls glConvolutionParameterfEXT().
void EXTConvolutionAPI::convolutionParameterF(ConvolutionTargetEXT target,
                                              ConvolutionParameterEXT pname,
                                              GLfloat params) const
{
    static const char *fnName = "glConvolutionParameterfEXT";

    beforeCommand(fnName, _api.glConvolutionParameterf);
    _api.glConvolutionParameterf(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glConvolutionParameterfvEXT().
void EXTConvolutionAPI::convolutionParameterFV(ConvolutionTargetEXT target,
                                               ConvolutionParameterEXT pname,
                                               const GLfloat *params) const
{
    static const char *fnName = "glConvolutionParameterfvEXT";

    beforeCommand(fnName, _api.glConvolutionParameterfv);
    _api.glConvolutionParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glConvolutionParameteriEXT().
void EXTConvolutionAPI::convolutionParameterI(ConvolutionTargetEXT target,
                                              ConvolutionParameterEXT pname,
                                              GLint params) const
{
    static const char *fnName = "glConvolutionParameteriEXT";

    beforeCommand(fnName, _api.glConvolutionParameteri);
    _api.glConvolutionParameteri(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glConvolutionParameterivEXT().
void EXTConvolutionAPI::convolutionParameterIV(ConvolutionTargetEXT target,
                                               ConvolutionParameterEXT pname,
                                               const GLint *params) const
{
    static const char *fnName = "glConvolutionParameterivEXT";

    beforeCommand(fnName, _api.glConvolutionParameteriv);
    _api.glConvolutionParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glCopyConvolutionFilter1DEXT().
void EXTConvolutionAPI::copyConvolutionFilter1D(ConvolutionTargetEXT target,
                                                InternalFormat internalformat,
                                                GLint x, GLint y, GLsizei width) const
{
    static const char *fnName = "glCopyConvolutionFilter1DEXT";

    beforeCommand(fnName, _api.glCopyConvolutionFilter1D);
    _api.glCopyConvolutionFilter1D(toScalar(target), toScalar(internalformat), x,
                                   y, width);
    afterCommand(fnName);
}

// Calls glCopyConvolutionFilter2DEXT().
void EXTConvolutionAPI::copyConvolutionFilter2D(ConvolutionTargetEXT target,
                                                InternalFormat internalformat,
                                                GLint x, GLint y, GLsizei width,
                                                GLsizei height) const
{
    static const char *fnName = "glCopyConvolutionFilter2DEXT";

    beforeCommand(fnName, _api.glCopyConvolutionFilter2D);
    _api.glCopyConvolutionFilter2D(toScalar(target), toScalar(internalformat), x,
                                   y, width, height);
    afterCommand(fnName);
}

// Calls glGetConvolutionFilterEXT().
void EXTConvolutionAPI::getConvolutionFilter(ConvolutionTargetEXT target,
                                             PixelFormat format, PixelType type,
                                             void *image) const
{
    static const char *fnName = "glGetConvolutionFilterEXT";

    beforeCommand(fnName, _api.glGetConvolutionFilter);
    _api.glGetConvolutionFilter(toScalar(target), toScalar(format),
                                toScalar(type), image);
    afterCommand(fnName);
}

// Calls glGetConvolutionParameterfvEXT().
void EXTConvolutionAPI::getConvolutionParameterFV(ConvolutionTargetEXT target,
                                                  ConvolutionParameterEXT pname,
                                                  GLfloat *params) const
{
    static const char *fnName = "glGetConvolutionParameterfvEXT";

    beforeCommand(fnName, _api.glGetConvolutionParameterfv);
    _api.glGetConvolutionParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetConvolutionParameterivEXT().
void EXTConvolutionAPI::getConvolutionParameterIV(ConvolutionTargetEXT target,
                                                  ConvolutionParameterEXT pname,
                                                  GLint *params) const
{
    static const char *fnName = "glGetConvolutionParameterivEXT";

    beforeCommand(fnName, _api.glGetConvolutionParameteriv);
    _api.glGetConvolutionParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetSeparableFilterEXT().
void EXTConvolutionAPI::getSeparableFilter(SeparableTargetEXT target,
                                           PixelFormat format, PixelType type,
                                           void *row, void *column, void *span) const
{
    static const char *fnName = "glGetSeparableFilterEXT";

    beforeCommand(fnName, _api.glGetSeparableFilter);
    _api.glGetSeparableFilter(toScalar(target), toScalar(format), toScalar(type),
                              row, column, span);
    afterCommand(fnName);
}

// Calls glSeparableFilter2DEXT().
void EXTConvolutionAPI::separableFilter2D(SeparableTargetEXT target,
                                          InternalFormat internalformat,
                                          GLsizei width, GLsizei height,
                                          PixelFormat format, PixelType type,
                                          const void *row, const void *column) const
{
    static const char *fnName = "glSeparableFilter2DEXT";

    beforeCommand(fnName, _api.glSeparableFilter2D);
    _api.glSeparableFilter2D(toScalar(target), toScalar(internalformat), width,
                             height, toScalar(format), toScalar(type), row,
                             column);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTCoordinateFrameAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_coordinate_frame extension.
EXTCoordinateFrameAPI::EXTCoordinateFrameAPI() :
    BaseExtension("GL_EXT_coordinate_frame")
{
}

// Grant read-only access to the underlying function pointers.
const EXTCoordinateFrame &EXTCoordinateFrameAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_coordinate_frame entry points.
void EXTCoordinateFrameAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBinormal3bEXT().
void EXTCoordinateFrameAPI::binormal3B(GLbyte bx, GLbyte by, GLbyte bz) const
{
    static const char *fnName = "glBinormal3bEXT";

    beforeCommand(fnName, _api.glBinormal3b);
    _api.glBinormal3b(bx, by, bz);
    afterCommand(fnName);
}

// Calls glBinormal3bvEXT().
void EXTCoordinateFrameAPI::binormal3BV(const GLbyte *v) const
{
    static const char *fnName = "glBinormal3bvEXT";

    beforeCommand(fnName, _api.glBinormal3bv);
    _api.glBinormal3bv(v);
    afterCommand(fnName);
}

// Calls glBinormal3dEXT().
void EXTCoordinateFrameAPI::binormal3D(GLdouble bx, GLdouble by, GLdouble bz) const
{
    static const char *fnName = "glBinormal3dEXT";

    beforeCommand(fnName, _api.glBinormal3d);
    _api.glBinormal3d(bx, by, bz);
    afterCommand(fnName);
}

// Calls glBinormal3dvEXT().
void EXTCoordinateFrameAPI::binormal3DV(const GLdouble *v) const
{
    static const char *fnName = "glBinormal3dvEXT";

    beforeCommand(fnName, _api.glBinormal3dv);
    _api.glBinormal3dv(v);
    afterCommand(fnName);
}

// Calls glBinormal3fEXT().
void EXTCoordinateFrameAPI::binormal3F(GLfloat bx, GLfloat by, GLfloat bz) const
{
    static const char *fnName = "glBinormal3fEXT";

    beforeCommand(fnName, _api.glBinormal3f);
    _api.glBinormal3f(bx, by, bz);
    afterCommand(fnName);
}

// Calls glBinormal3fvEXT().
void EXTCoordinateFrameAPI::binormal3FV(const GLfloat *v) const
{
    static const char *fnName = "glBinormal3fvEXT";

    beforeCommand(fnName, _api.glBinormal3fv);
    _api.glBinormal3fv(v);
    afterCommand(fnName);
}

// Calls glBinormal3iEXT().
void EXTCoordinateFrameAPI::binormal3I(GLint bx, GLint by, GLint bz) const
{
    static const char *fnName = "glBinormal3iEXT";

    beforeCommand(fnName, _api.glBinormal3i);
    _api.glBinormal3i(bx, by, bz);
    afterCommand(fnName);
}

// Calls glBinormal3ivEXT().
void EXTCoordinateFrameAPI::binormal3IV(const GLint *v) const
{
    static const char *fnName = "glBinormal3ivEXT";

    beforeCommand(fnName, _api.glBinormal3iv);
    _api.glBinormal3iv(v);
    afterCommand(fnName);
}

// Calls glBinormal3sEXT().
void EXTCoordinateFrameAPI::binormal3S(GLshort bx, GLshort by, GLshort bz) const
{
    static const char *fnName = "glBinormal3sEXT";

    beforeCommand(fnName, _api.glBinormal3s);
    _api.glBinormal3s(bx, by, bz);
    afterCommand(fnName);
}

// Calls glBinormal3svEXT().
void EXTCoordinateFrameAPI::binormal3SV(const GLshort *v) const
{
    static const char *fnName = "glBinormal3svEXT";

    beforeCommand(fnName, _api.glBinormal3sv);
    _api.glBinormal3sv(v);
    afterCommand(fnName);
}

// Calls glBinormalPointerEXT().
void EXTCoordinateFrameAPI::binormalPointer(BinormalPointerTypeEXT type,
                                            GLsizei stride, const void *pointer) const
{
    static const char *fnName = "glBinormalPointerEXT";

    beforeCommand(fnName, _api.glBinormalPointer);
    _api.glBinormalPointer(toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glTangent3bEXT().
void EXTCoordinateFrameAPI::tangent3B(GLbyte tx, GLbyte ty, GLbyte tz) const
{
    static const char *fnName = "glTangent3bEXT";

    beforeCommand(fnName, _api.glTangent3b);
    _api.glTangent3b(tx, ty, tz);
    afterCommand(fnName);
}

// Calls glTangent3bvEXT().
void EXTCoordinateFrameAPI::tangent3BV(const GLbyte *v) const
{
    static const char *fnName = "glTangent3bvEXT";

    beforeCommand(fnName, _api.glTangent3bv);
    _api.glTangent3bv(v);
    afterCommand(fnName);
}

// Calls glTangent3dEXT().
void EXTCoordinateFrameAPI::tangent3D(GLdouble tx, GLdouble ty, GLdouble tz) const
{
    static const char *fnName = "glTangent3dEXT";

    beforeCommand(fnName, _api.glTangent3d);
    _api.glTangent3d(tx, ty, tz);
    afterCommand(fnName);
}

// Calls glTangent3dvEXT().
void EXTCoordinateFrameAPI::tangent3DV(const GLdouble *v) const
{
    static const char *fnName = "glTangent3dvEXT";

    beforeCommand(fnName, _api.glTangent3dv);
    _api.glTangent3dv(v);
    afterCommand(fnName);
}

// Calls glTangent3fEXT().
void EXTCoordinateFrameAPI::tangent3F(GLfloat tx, GLfloat ty, GLfloat tz) const
{
    static const char *fnName = "glTangent3fEXT";

    beforeCommand(fnName, _api.glTangent3f);
    _api.glTangent3f(tx, ty, tz);
    afterCommand(fnName);
}

// Calls glTangent3fvEXT().
void EXTCoordinateFrameAPI::tangent3FV(const GLfloat *v) const
{
    static const char *fnName = "glTangent3fvEXT";

    beforeCommand(fnName, _api.glTangent3fv);
    _api.glTangent3fv(v);
    afterCommand(fnName);
}

// Calls glTangent3iEXT().
void EXTCoordinateFrameAPI::tangent3I(GLint tx, GLint ty, GLint tz) const
{
    static const char *fnName = "glTangent3iEXT";

    beforeCommand(fnName, _api.glTangent3i);
    _api.glTangent3i(tx, ty, tz);
    afterCommand(fnName);
}

// Calls glTangent3ivEXT().
void EXTCoordinateFrameAPI::tangent3IV(const GLint *v) const
{
    static const char *fnName = "glTangent3ivEXT";

    beforeCommand(fnName, _api.glTangent3iv);
    _api.glTangent3iv(v);
    afterCommand(fnName);
}

// Calls glTangent3sEXT().
void EXTCoordinateFrameAPI::tangent3S(GLshort tx, GLshort ty, GLshort tz) const
{
    static const char *fnName = "glTangent3sEXT";

    beforeCommand(fnName, _api.glTangent3s);
    _api.glTangent3s(tx, ty, tz);
    afterCommand(fnName);
}

// Calls glTangent3svEXT().
void EXTCoordinateFrameAPI::tangent3SV(const GLshort *v) const
{
    static const char *fnName = "glTangent3svEXT";

    beforeCommand(fnName, _api.glTangent3sv);
    _api.glTangent3sv(v);
    afterCommand(fnName);
}

// Calls glTangentPointerEXT().
void EXTCoordinateFrameAPI::tangentPointer(TangentPointerTypeEXT type,
                                           GLsizei stride, const void *pointer) const
{
    static const char *fnName = "glTangentPointerEXT";

    beforeCommand(fnName, _api.glTangentPointer);
    _api.glTangentPointer(toScalar(type), stride, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTCopyTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_copy_texture extension.
EXTCopyTextureAPI::EXTCopyTextureAPI() :
    BaseExtension("GL_EXT_copy_texture")
{
}

// Grant read-only access to the underlying function pointers.
const EXTCopyTexture &EXTCopyTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_copy_texture entry points.
void EXTCopyTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCopyTexImage1DEXT().
void EXTCopyTextureAPI::copyTexImage1D(TextureTarget target, GLint level,
                                       InternalFormat internalformat, GLint x,
                                       GLint y, GLsizei width, GLint border) const
{
    static const char *fnName = "glCopyTexImage1DEXT";

    beforeCommand(fnName, _api.glCopyTexImage1D);
    _api.glCopyTexImage1D(toScalar(target), level, toScalar(internalformat), x,
                          y, width, border);
    afterCommand(fnName);
}

// Calls glCopyTexImage2DEXT().
void EXTCopyTextureAPI::copyTexImage2D(TextureTarget target, GLint level,
                                       InternalFormat internalformat, GLint x,
                                       GLint y, GLsizei width, GLsizei height,
                                       GLint border) const
{
    static const char *fnName = "glCopyTexImage2DEXT";

    beforeCommand(fnName, _api.glCopyTexImage2D);
    _api.glCopyTexImage2D(toScalar(target), level, toScalar(internalformat), x,
                          y, width, height, border);
    afterCommand(fnName);
}

// Calls glCopyTexSubImage1DEXT().
void EXTCopyTextureAPI::copyTexSubImage1D(TextureTarget target, GLint level,
                                          GLint xoffset, GLint x, GLint y,
                                          GLsizei width) const
{
    static const char *fnName = "glCopyTexSubImage1DEXT";

    beforeCommand(fnName, _api.glCopyTexSubImage1D);
    _api.glCopyTexSubImage1D(toScalar(target), level, xoffset, x, y, width);
    afterCommand(fnName);
}

// Calls glCopyTexSubImage2DEXT().
void EXTCopyTextureAPI::copyTexSubImage2D(TextureTarget target, GLint level,
                                          GLint xoffset, GLint yoffset, GLint x,
                                          GLint y, GLsizei width, GLsizei height) const
{
    static const char *fnName = "glCopyTexSubImage2DEXT";

    beforeCommand(fnName, _api.glCopyTexSubImage2D);
    _api.glCopyTexSubImage2D(toScalar(target), level, xoffset, yoffset, x, y,
                             width, height);
    afterCommand(fnName);
}

// Calls glCopyTexSubImage3DEXT().
void EXTCopyTextureAPI::copyTexSubImage3D(TextureTarget target, GLint level,
                                          GLint xoffset, GLint yoffset,
                                          GLint zoffset, GLint x, GLint y,
                                          GLsizei width, GLsizei height) const
{
    static const char *fnName = "glCopyTexSubImage3DEXT";

    beforeCommand(fnName, _api.glCopyTexSubImage3D);
    _api.glCopyTexSubImage3D(toScalar(target), level, xoffset, yoffset, zoffset,
                             x, y, width, height);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTCullVertexAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_cull_vertex extension.
EXTCullVertexAPI::EXTCullVertexAPI() :
    BaseExtension("GL_EXT_cull_vertex")
{
}

// Grant read-only access to the underlying function pointers.
const EXTCullVertex &EXTCullVertexAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_cull_vertex entry points.
void EXTCullVertexAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCullParameterdvEXT().
void EXTCullVertexAPI::cullParameterDV(CullParameterEXT pname, GLdouble *params) const
{
    static const char *fnName = "glCullParameterdvEXT";

    beforeCommand(fnName, _api.glCullParameterdv);
    _api.glCullParameterdv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glCullParameterfvEXT().
void EXTCullVertexAPI::cullParameterFV(CullParameterEXT pname, GLfloat *params) const
{
    static const char *fnName = "glCullParameterfvEXT";

    beforeCommand(fnName, _api.glCullParameterfv);
    _api.glCullParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTDebugLabelAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_debug_label extension.
EXTDebugLabelAPI::EXTDebugLabelAPI() :
    BaseExtension("GL_EXT_debug_label")
{
}

// Grant read-only access to the underlying function pointers.
const EXTDebugLabel &EXTDebugLabelAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_debug_label entry points.
void EXTDebugLabelAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetObjectLabelEXT().
void EXTDebugLabelAPI::getObjectLabel(GLenum type, GLuint object,
                                      GLsizei bufSize, GLsizei *length,
                                      GLchar *label) const
{
    static const char *fnName = "glGetObjectLabelEXT";

    beforeCommand(fnName, _api.glGetObjectLabel);
    _api.glGetObjectLabel(type, object, bufSize, length, label);
    afterCommand(fnName);
}

// Calls glLabelObjectEXT().
void EXTDebugLabelAPI::labelObject(GLenum type, GLuint object, GLsizei length,
                                   const GLchar *label) const
{
    static const char *fnName = "glLabelObjectEXT";

    beforeCommand(fnName, _api.glLabelObject);
    _api.glLabelObject(type, object, length, label);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTDebugMarkerAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_debug_marker extension.
EXTDebugMarkerAPI::EXTDebugMarkerAPI() :
    BaseExtension("GL_EXT_debug_marker")
{
}

// Grant read-only access to the underlying function pointers.
const EXTDebugMarker &EXTDebugMarkerAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_debug_marker entry points.
void EXTDebugMarkerAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glInsertEventMarkerEXT().
void EXTDebugMarkerAPI::insertEventMarker(GLsizei length, const GLchar *marker) const
{
    static const char *fnName = "glInsertEventMarkerEXT";

    beforeCommand(fnName, _api.glInsertEventMarker);
    _api.glInsertEventMarker(length, marker);
    afterCommand(fnName);
}

// Calls glPopGroupMarkerEXT().
void EXTDebugMarkerAPI::popGroupMarker() const
{
    static const char *fnName = "glPopGroupMarkerEXT";

    beforeCommand(fnName, _api.glPopGroupMarker);
    _api.glPopGroupMarker();
    afterCommand(fnName);
}

// Calls glPushGroupMarkerEXT().
void EXTDebugMarkerAPI::pushGroupMarker(GLsizei length, const GLchar *marker) const
{
    static const char *fnName = "glPushGroupMarkerEXT";

    beforeCommand(fnName, _api.glPushGroupMarker);
    _api.glPushGroupMarker(length, marker);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTDepthBoundsTestAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_depth_bounds_test extension.
EXTDepthBoundsTestAPI::EXTDepthBoundsTestAPI() :
    BaseExtension("GL_EXT_depth_bounds_test")
{
}

// Grant read-only access to the underlying function pointers.
const EXTDepthBoundsTest &EXTDepthBoundsTestAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_depth_bounds_test entry points.
void EXTDepthBoundsTestAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDepthBoundsEXT().
void EXTDepthBoundsTestAPI::depthBounds(GLclampd zmin, GLclampd zmax) const
{
    static const char *fnName = "glDepthBoundsEXT";

    beforeCommand(fnName, _api.glDepthBounds);
    _api.glDepthBounds(zmin, zmax);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTDirectStateAccessAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_direct_state_access extension.
EXTDirectStateAccessAPI::EXTDirectStateAccessAPI() :
    BaseExtension("GL_EXT_direct_state_access")
{
}

// Grant read-only access to the underlying function pointers.
const EXTDirectStateAccess &EXTDirectStateAccessAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_direct_state_access entry points.
void EXTDirectStateAccessAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindMultiTextureEXT().
void EXTDirectStateAccessAPI::bindMultiTexture(TextureUnit texunit,
                                               TextureTarget target,
                                               TextureName texture) const
{
    static const char *fnName = "glBindMultiTextureEXT";

    beforeCommand(fnName, _api.glBindMultiTexture);
    _api.glBindMultiTexture(toScalar(texunit), toScalar(target), texture.ID);
    afterCommand(fnName);
}

// Calls glCheckNamedFramebufferStatusEXT().
FramebufferStatus EXTDirectStateAccessAPI::checkNamedFramebufferStatus(FrameBufferName framebuffer,
                                                                       FramebufferTarget target) const
{
    static const char *fnName = "glCheckNamedFramebufferStatusEXT";

    beforeCommand(fnName, _api.glCheckNamedFramebufferStatus);
    GLenum result = _api.glCheckNamedFramebufferStatus(framebuffer.ID,
                                                       toScalar(target));
    afterCommand(fnName);

    return static_cast<FramebufferStatus>(result);
}

// Calls glClearNamedBufferDataEXT().
void EXTDirectStateAccessAPI::clearNamedBufferData(BufferName buffer,
                                                   SizedInternalFormat internalformat,
                                                   PixelFormat format,
                                                   PixelType type,
                                                   const void *data) const
{
    static const char *fnName = "glClearNamedBufferDataEXT";

    beforeCommand(fnName, _api.glClearNamedBufferData);
    _api.glClearNamedBufferData(buffer.ID, toScalar(internalformat),
                                toScalar(format), toScalar(type), data);
    afterCommand(fnName);
}

// Calls glClearNamedBufferSubDataEXT().
void EXTDirectStateAccessAPI::clearNamedBufferSubData(BufferName buffer,
                                                      SizedInternalFormat internalformat,
                                                      GLsizeiptr offset,
                                                      GLsizeiptr size,
                                                      PixelFormat format,
                                                      PixelType type,
                                                      const void *data) const
{
    static const char *fnName = "glClearNamedBufferSubDataEXT";

    beforeCommand(fnName, _api.glClearNamedBufferSubData);
    _api.glClearNamedBufferSubData(buffer.ID, toScalar(internalformat), offset,
                                   size, toScalar(format), toScalar(type), data);
    afterCommand(fnName);
}

// Calls glClientAttribDefaultEXT().
void EXTDirectStateAccessAPI::clientAttribDefault(GLbitfield mask) const
{
    static const char *fnName = "glClientAttribDefaultEXT";

    beforeCommand(fnName, _api.glClientAttribDefault);
    _api.glClientAttribDefault(mask);
    afterCommand(fnName);
}

// Calls glCompressedMultiTexImage1DEXT().
void EXTDirectStateAccessAPI::compressedMultiTexImage1D(TextureUnit texunit,
                                                        TextureTarget target,
                                                        GLint level,
                                                        InternalFormat internalformat,
                                                        GLsizei width,
                                                        GLint border,
                                                        GLsizei imageSize,
                                                        const void *bits) const
{
    static const char *fnName = "glCompressedMultiTexImage1DEXT";

    beforeCommand(fnName, _api.glCompressedMultiTexImage1D);
    _api.glCompressedMultiTexImage1D(toScalar(texunit), toScalar(target), level,
                                     toScalar(internalformat), width, border,
                                     imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedMultiTexImage2DEXT().
void EXTDirectStateAccessAPI::compressedMultiTexImage2D(TextureUnit texunit,
                                                        TextureTarget target,
                                                        GLint level,
                                                        InternalFormat internalformat,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        GLint border,
                                                        GLsizei imageSize,
                                                        const void *bits) const
{
    static const char *fnName = "glCompressedMultiTexImage2DEXT";

    beforeCommand(fnName, _api.glCompressedMultiTexImage2D);
    _api.glCompressedMultiTexImage2D(toScalar(texunit), toScalar(target), level,
                                     toScalar(internalformat), width, height,
                                     border, imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedMultiTexImage3DEXT().
void EXTDirectStateAccessAPI::compressedMultiTexImage3D(TextureUnit texunit,
                                                        TextureTarget target,
                                                        GLint level,
                                                        InternalFormat internalformat,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        GLsizei depth,
                                                        GLint border,
                                                        GLsizei imageSize,
                                                        const void *bits) const
{
    static const char *fnName = "glCompressedMultiTexImage3DEXT";

    beforeCommand(fnName, _api.glCompressedMultiTexImage3D);
    _api.glCompressedMultiTexImage3D(toScalar(texunit), toScalar(target), level,
                                     toScalar(internalformat), width, height,
                                     depth, border, imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedMultiTexSubImage1DEXT().
void EXTDirectStateAccessAPI::compressedMultiTexSubImage1D(TextureUnit texunit,
                                                           TextureTarget target,
                                                           GLint level,
                                                           GLint xoffset,
                                                           GLsizei width,
                                                           InternalFormat format,
                                                           GLsizei imageSize,
                                                           const void *bits) const
{
    static const char *fnName = "glCompressedMultiTexSubImage1DEXT";

    beforeCommand(fnName, _api.glCompressedMultiTexSubImage1D);
    _api.glCompressedMultiTexSubImage1D(toScalar(texunit), toScalar(target),
                                        level, xoffset, width, toScalar(format),
                                        imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedMultiTexSubImage2DEXT().
void EXTDirectStateAccessAPI::compressedMultiTexSubImage2D(TextureUnit texunit,
                                                           TextureTarget target,
                                                           GLint level,
                                                           GLint xoffset,
                                                           GLint yoffset,
                                                           GLsizei width,
                                                           GLsizei height,
                                                           InternalFormat format,
                                                           GLsizei imageSize,
                                                           const void *bits) const
{
    static const char *fnName = "glCompressedMultiTexSubImage2DEXT";

    beforeCommand(fnName, _api.glCompressedMultiTexSubImage2D);
    _api.glCompressedMultiTexSubImage2D(toScalar(texunit), toScalar(target),
                                        level, xoffset, yoffset, width, height,
                                        toScalar(format), imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedMultiTexSubImage3DEXT().
void EXTDirectStateAccessAPI::compressedMultiTexSubImage3D(TextureUnit texunit,
                                                           TextureTarget target,
                                                           GLint level,
                                                           GLint xoffset,
                                                           GLint yoffset,
                                                           GLint zoffset,
                                                           GLsizei width,
                                                           GLsizei height,
                                                           GLsizei depth,
                                                           InternalFormat format,
                                                           GLsizei imageSize,
                                                           const void *bits) const
{
    static const char *fnName = "glCompressedMultiTexSubImage3DEXT";

    beforeCommand(fnName, _api.glCompressedMultiTexSubImage3D);
    _api.glCompressedMultiTexSubImage3D(toScalar(texunit), toScalar(target),
                                        level, xoffset, yoffset, zoffset, width,
                                        height, depth, toScalar(format),
                                        imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedTextureImage1DEXT().
void EXTDirectStateAccessAPI::compressedTextureImage1D(TextureName texture,
                                                       TextureTarget target,
                                                       GLint level,
                                                       InternalFormat internalformat,
                                                       GLsizei width,
                                                       GLint border,
                                                       GLsizei imageSize,
                                                       const void *bits) const
{
    static const char *fnName = "glCompressedTextureImage1DEXT";

    beforeCommand(fnName, _api.glCompressedTextureImage1D);
    _api.glCompressedTextureImage1D(texture.ID, toScalar(target), level,
                                    toScalar(internalformat), width, border,
                                    imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedTextureImage2DEXT().
void EXTDirectStateAccessAPI::compressedTextureImage2D(TextureName texture,
                                                       TextureTarget target,
                                                       GLint level,
                                                       InternalFormat internalformat,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLint border,
                                                       GLsizei imageSize,
                                                       const void *bits) const
{
    static const char *fnName = "glCompressedTextureImage2DEXT";

    beforeCommand(fnName, _api.glCompressedTextureImage2D);
    _api.glCompressedTextureImage2D(texture.ID, toScalar(target), level,
                                    toScalar(internalformat), width, height,
                                    border, imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedTextureImage3DEXT().
void EXTDirectStateAccessAPI::compressedTextureImage3D(TextureName texture,
                                                       TextureTarget target,
                                                       GLint level,
                                                       InternalFormat internalformat,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLsizei depth,
                                                       GLint border,
                                                       GLsizei imageSize,
                                                       const void *bits) const
{
    static const char *fnName = "glCompressedTextureImage3DEXT";

    beforeCommand(fnName, _api.glCompressedTextureImage3D);
    _api.glCompressedTextureImage3D(texture.ID, toScalar(target), level,
                                    toScalar(internalformat), width, height,
                                    depth, border, imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedTextureSubImage1DEXT().
void EXTDirectStateAccessAPI::compressedTextureSubImage1D(TextureName texture,
                                                          TextureTarget target,
                                                          GLint level,
                                                          GLint xoffset,
                                                          GLsizei width,
                                                          InternalFormat format,
                                                          GLsizei imageSize,
                                                          const void *bits) const
{
    static const char *fnName = "glCompressedTextureSubImage1DEXT";

    beforeCommand(fnName, _api.glCompressedTextureSubImage1D);
    _api.glCompressedTextureSubImage1D(texture.ID, toScalar(target), level,
                                       xoffset, width, toScalar(format),
                                       imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedTextureSubImage2DEXT().
void EXTDirectStateAccessAPI::compressedTextureSubImage2D(TextureName texture,
                                                          TextureTarget target,
                                                          GLint level,
                                                          GLint xoffset,
                                                          GLint yoffset,
                                                          GLsizei width,
                                                          GLsizei height,
                                                          InternalFormat format,
                                                          GLsizei imageSize,
                                                          const void *bits) const
{
    static const char *fnName = "glCompressedTextureSubImage2DEXT";

    beforeCommand(fnName, _api.glCompressedTextureSubImage2D);
    _api.glCompressedTextureSubImage2D(texture.ID, toScalar(target), level,
                                       xoffset, yoffset, width, height,
                                       toScalar(format), imageSize, bits);
    afterCommand(fnName);
}

// Calls glCompressedTextureSubImage3DEXT().
void EXTDirectStateAccessAPI::compressedTextureSubImage3D(TextureName texture,
                                                          TextureTarget target,
                                                          GLint level,
                                                          GLint xoffset,
                                                          GLint yoffset,
                                                          GLint zoffset,
                                                          GLsizei width,
                                                          GLsizei height,
                                                          GLsizei depth,
                                                          InternalFormat format,
                                                          GLsizei imageSize,
                                                          const void *bits) const
{
    static const char *fnName = "glCompressedTextureSubImage3DEXT";

    beforeCommand(fnName, _api.glCompressedTextureSubImage3D);
    _api.glCompressedTextureSubImage3D(texture.ID, toScalar(target), level,
                                       xoffset, yoffset, zoffset, width, height,
                                       depth, toScalar(format), imageSize, bits);
    afterCommand(fnName);
}

// Calls glCopyMultiTexImage1DEXT().
void EXTDirectStateAccessAPI::copyMultiTexImage1D(TextureUnit texunit,
                                                  TextureTarget target,
                                                  GLint level,
                                                  InternalFormat internalformat,
                                                  GLint x, GLint y,
                                                  GLsizei width, GLint border) const
{
    static const char *fnName = "glCopyMultiTexImage1DEXT";

    beforeCommand(fnName, _api.glCopyMultiTexImage1D);
    _api.glCopyMultiTexImage1D(toScalar(texunit), toScalar(target), level,
                               toScalar(internalformat), x, y, width, border);
    afterCommand(fnName);
}

// Calls glCopyMultiTexImage2DEXT().
void EXTDirectStateAccessAPI::copyMultiTexImage2D(TextureUnit texunit,
                                                  TextureTarget target,
                                                  GLint level,
                                                  InternalFormat internalformat,
                                                  GLint x, GLint y,
                                                  GLsizei width, GLsizei height,
                                                  GLint border) const
{
    static const char *fnName = "glCopyMultiTexImage2DEXT";

    beforeCommand(fnName, _api.glCopyMultiTexImage2D);
    _api.glCopyMultiTexImage2D(toScalar(texunit), toScalar(target), level,
                               toScalar(internalformat), x, y, width, height,
                               border);
    afterCommand(fnName);
}

// Calls glCopyMultiTexSubImage1DEXT().
void EXTDirectStateAccessAPI::copyMultiTexSubImage1D(TextureUnit texunit,
                                                     TextureTarget target,
                                                     GLint level, GLint xoffset,
                                                     GLint x, GLint y,
                                                     GLsizei width) const
{
    static const char *fnName = "glCopyMultiTexSubImage1DEXT";

    beforeCommand(fnName, _api.glCopyMultiTexSubImage1D);
    _api.glCopyMultiTexSubImage1D(toScalar(texunit), toScalar(target), level,
                                  xoffset, x, y, width);
    afterCommand(fnName);
}

// Calls glCopyMultiTexSubImage2DEXT().
void EXTDirectStateAccessAPI::copyMultiTexSubImage2D(TextureUnit texunit,
                                                     TextureTarget target,
                                                     GLint level, GLint xoffset,
                                                     GLint yoffset, GLint x,
                                                     GLint y, GLsizei width,
                                                     GLsizei height) const
{
    static const char *fnName = "glCopyMultiTexSubImage2DEXT";

    beforeCommand(fnName, _api.glCopyMultiTexSubImage2D);
    _api.glCopyMultiTexSubImage2D(toScalar(texunit), toScalar(target), level,
                                  xoffset, yoffset, x, y, width, height);
    afterCommand(fnName);
}

// Calls glCopyMultiTexSubImage3DEXT().
void EXTDirectStateAccessAPI::copyMultiTexSubImage3D(TextureUnit texunit,
                                                     TextureTarget target,
                                                     GLint level, GLint xoffset,
                                                     GLint yoffset,
                                                     GLint zoffset, GLint x,
                                                     GLint y, GLsizei width,
                                                     GLsizei height) const
{
    static const char *fnName = "glCopyMultiTexSubImage3DEXT";

    beforeCommand(fnName, _api.glCopyMultiTexSubImage3D);
    _api.glCopyMultiTexSubImage3D(toScalar(texunit), toScalar(target), level,
                                  xoffset, yoffset, zoffset, x, y, width, height);
    afterCommand(fnName);
}

// Calls glCopyTextureImage1DEXT().
void EXTDirectStateAccessAPI::copyTextureImage1D(TextureName texture,
                                                 TextureTarget target,
                                                 GLint level,
                                                 InternalFormat internalformat,
                                                 GLint x, GLint y, GLsizei width,
                                                 GLint border) const
{
    static const char *fnName = "glCopyTextureImage1DEXT";

    beforeCommand(fnName, _api.glCopyTextureImage1D);
    _api.glCopyTextureImage1D(texture.ID, toScalar(target), level,
                              toScalar(internalformat), x, y, width, border);
    afterCommand(fnName);
}

// Calls glCopyTextureImage2DEXT().
void EXTDirectStateAccessAPI::copyTextureImage2D(TextureName texture,
                                                 TextureTarget target,
                                                 GLint level,
                                                 InternalFormat internalformat,
                                                 GLint x, GLint y, GLsizei width,
                                                 GLsizei height, GLint border) const
{
    static const char *fnName = "glCopyTextureImage2DEXT";

    beforeCommand(fnName, _api.glCopyTextureImage2D);
    _api.glCopyTextureImage2D(texture.ID, toScalar(target), level,
                              toScalar(internalformat), x, y, width, height,
                              border);
    afterCommand(fnName);
}

// Calls glCopyTextureSubImage1DEXT().
void EXTDirectStateAccessAPI::copyTextureSubImage1D(TextureName texture,
                                                    TextureTarget target,
                                                    GLint level, GLint xoffset,
                                                    GLint x, GLint y,
                                                    GLsizei width) const
{
    static const char *fnName = "glCopyTextureSubImage1DEXT";

    beforeCommand(fnName, _api.glCopyTextureSubImage1D);
    _api.glCopyTextureSubImage1D(texture.ID, toScalar(target), level, xoffset, x,
                                 y, width);
    afterCommand(fnName);
}

// Calls glCopyTextureSubImage2DEXT().
void EXTDirectStateAccessAPI::copyTextureSubImage2D(TextureName texture,
                                                    TextureTarget target,
                                                    GLint level, GLint xoffset,
                                                    GLint yoffset, GLint x,
                                                    GLint y, GLsizei width,
                                                    GLsizei height) const
{
    static const char *fnName = "glCopyTextureSubImage2DEXT";

    beforeCommand(fnName, _api.glCopyTextureSubImage2D);
    _api.glCopyTextureSubImage2D(texture.ID, toScalar(target), level, xoffset,
                                 yoffset, x, y, width, height);
    afterCommand(fnName);
}

// Calls glCopyTextureSubImage3DEXT().
void EXTDirectStateAccessAPI::copyTextureSubImage3D(TextureName texture,
                                                    TextureTarget target,
                                                    GLint level, GLint xoffset,
                                                    GLint yoffset, GLint zoffset,
                                                    GLint x, GLint y,
                                                    GLsizei width,
                                                    GLsizei height) const
{
    static const char *fnName = "glCopyTextureSubImage3DEXT";

    beforeCommand(fnName, _api.glCopyTextureSubImage3D);
    _api.glCopyTextureSubImage3D(texture.ID, toScalar(target), level, xoffset,
                                 yoffset, zoffset, x, y, width, height);
    afterCommand(fnName);
}

// Calls glDisableClientStateIndexedEXT().
void EXTDirectStateAccessAPI::disableClientStateIndexed(EnableCap array,
                                                        GLuint index) const
{
    static const char *fnName = "glDisableClientStateIndexedEXT";

    beforeCommand(fnName, _api.glDisableClientStateIndexed);
    _api.glDisableClientStateIndexed(toScalar(array), index);
    afterCommand(fnName);
}

// Calls glDisableClientStateiEXT().
void EXTDirectStateAccessAPI::disableClientStateI(EnableCap array, GLuint index) const
{
    static const char *fnName = "glDisableClientStateiEXT";

    beforeCommand(fnName, _api.glDisableClientStatei);
    _api.glDisableClientStatei(toScalar(array), index);
    afterCommand(fnName);
}

// Calls glDisableIndexedEXT().
void EXTDirectStateAccessAPI::disableIndexed(EnableCap target, GLuint index) const
{
    static const char *fnName = "glDisableIndexedEXT";

    beforeCommand(fnName, _api.glDisableIndexed);
    _api.glDisableIndexed(toScalar(target), index);
    afterCommand(fnName);
}

// Calls glDisableVertexArrayAttribEXT().
void EXTDirectStateAccessAPI::disableVertexArrayAttrib(VertexArrayName vaobj,
                                                       GLuint index) const
{
    static const char *fnName = "glDisableVertexArrayAttribEXT";

    beforeCommand(fnName, _api.glDisableVertexArrayAttrib);
    _api.glDisableVertexArrayAttrib(vaobj.ID, index);
    afterCommand(fnName);
}

// Calls glDisableVertexArrayEXT().
void EXTDirectStateAccessAPI::disableVertexArray(VertexArrayName vaobj,
                                                 EnableCap array) const
{
    static const char *fnName = "glDisableVertexArrayEXT";

    beforeCommand(fnName, _api.glDisableVertexArray);
    _api.glDisableVertexArray(vaobj.ID, toScalar(array));
    afterCommand(fnName);
}

// Calls glEnableClientStateIndexedEXT().
void EXTDirectStateAccessAPI::enableClientStateIndexed(EnableCap array,
                                                       GLuint index) const
{
    static const char *fnName = "glEnableClientStateIndexedEXT";

    beforeCommand(fnName, _api.glEnableClientStateIndexed);
    _api.glEnableClientStateIndexed(toScalar(array), index);
    afterCommand(fnName);
}

// Calls glEnableClientStateiEXT().
void EXTDirectStateAccessAPI::enableClientStateI(EnableCap array, GLuint index) const
{
    static const char *fnName = "glEnableClientStateiEXT";

    beforeCommand(fnName, _api.glEnableClientStatei);
    _api.glEnableClientStatei(toScalar(array), index);
    afterCommand(fnName);
}

// Calls glEnableIndexedEXT().
void EXTDirectStateAccessAPI::enableIndexed(EnableCap target, GLuint index) const
{
    static const char *fnName = "glEnableIndexedEXT";

    beforeCommand(fnName, _api.glEnableIndexed);
    _api.glEnableIndexed(toScalar(target), index);
    afterCommand(fnName);
}

// Calls glEnableVertexArrayAttribEXT().
void EXTDirectStateAccessAPI::enableVertexArrayAttrib(VertexArrayName vaobj,
                                                      GLuint index) const
{
    static const char *fnName = "glEnableVertexArrayAttribEXT";

    beforeCommand(fnName, _api.glEnableVertexArrayAttrib);
    _api.glEnableVertexArrayAttrib(vaobj.ID, index);
    afterCommand(fnName);
}

// Calls glEnableVertexArrayEXT().
void EXTDirectStateAccessAPI::enableVertexArray(VertexArrayName vaobj,
                                                EnableCap array) const
{
    static const char *fnName = "glEnableVertexArrayEXT";

    beforeCommand(fnName, _api.glEnableVertexArray);
    _api.glEnableVertexArray(vaobj.ID, toScalar(array));
    afterCommand(fnName);
}

// Calls glFlushMappedNamedBufferRangeEXT().
void EXTDirectStateAccessAPI::flushMappedNamedBufferRange(BufferName buffer,
                                                          GLintptr offset,
                                                          GLsizeiptr length) const
{
    static const char *fnName = "glFlushMappedNamedBufferRangeEXT";

    beforeCommand(fnName, _api.glFlushMappedNamedBufferRange);
    _api.glFlushMappedNamedBufferRange(buffer.ID, offset, length);
    afterCommand(fnName);
}

// Calls glFramebufferDrawBufferEXT().
void EXTDirectStateAccessAPI::framebufferDrawBuffer(FrameBufferName framebuffer,
                                                    DrawBufferMode mode) const
{
    static const char *fnName = "glFramebufferDrawBufferEXT";

    beforeCommand(fnName, _api.glFramebufferDrawBuffer);
    _api.glFramebufferDrawBuffer(framebuffer.ID, toScalar(mode));
    afterCommand(fnName);
}

// Calls glFramebufferDrawBuffersEXT().
void EXTDirectStateAccessAPI::framebufferDrawBuffers(FrameBufferName framebuffer,
                                                     GLsizei n,
                                                     const DrawBufferMode *bufs) const
{
    static const char *fnName = "glFramebufferDrawBuffersEXT";

    beforeCommand(fnName, _api.glFramebufferDrawBuffers);
    _api.glFramebufferDrawBuffers(framebuffer.ID, n, toScalarPtr(bufs));
    afterCommand(fnName);
}

// Calls glFramebufferReadBufferEXT().
void EXTDirectStateAccessAPI::framebufferReadBuffer(FrameBufferName framebuffer,
                                                    ReadBufferMode mode) const
{
    static const char *fnName = "glFramebufferReadBufferEXT";

    beforeCommand(fnName, _api.glFramebufferReadBuffer);
    _api.glFramebufferReadBuffer(framebuffer.ID, toScalar(mode));
    afterCommand(fnName);
}

// Calls glGenerateMultiTexMipmapEXT().
void EXTDirectStateAccessAPI::generateMultiTexMipmap(TextureUnit texunit,
                                                     TextureTarget target) const
{
    static const char *fnName = "glGenerateMultiTexMipmapEXT";

    beforeCommand(fnName, _api.glGenerateMultiTexMipmap);
    _api.glGenerateMultiTexMipmap(toScalar(texunit), toScalar(target));
    afterCommand(fnName);
}

// Calls glGenerateTextureMipmapEXT().
void EXTDirectStateAccessAPI::generateTextureMipmap(TextureName texture,
                                                    TextureTarget target) const
{
    static const char *fnName = "glGenerateTextureMipmapEXT";

    beforeCommand(fnName, _api.glGenerateTextureMipmap);
    _api.glGenerateTextureMipmap(texture.ID, toScalar(target));
    afterCommand(fnName);
}

// Calls glGetBooleanIndexedvEXT().
void EXTDirectStateAccessAPI::getBooleanIndexedv(BufferTarget target,
                                                 GLuint index, Boolean *data) const
{
    static const char *fnName = "glGetBooleanIndexedvEXT";

    beforeCommand(fnName, _api.glGetBooleanIndexedv);
    _api.glGetBooleanIndexedv(toScalar(target), index, toScalarPtr(data));
    afterCommand(fnName);
}

// Calls glGetCompressedMultiTexImageEXT().
void EXTDirectStateAccessAPI::getCompressedMultiTexImage(TextureUnit texunit,
                                                         TextureTarget target,
                                                         GLint lod, void *img) const
{
    static const char *fnName = "glGetCompressedMultiTexImageEXT";

    beforeCommand(fnName, _api.glGetCompressedMultiTexImage);
    _api.glGetCompressedMultiTexImage(toScalar(texunit), toScalar(target), lod,
                                      img);
    afterCommand(fnName);
}

// Calls glGetCompressedTextureImageEXT().
void EXTDirectStateAccessAPI::getCompressedTextureImage(TextureName texture,
                                                        TextureTarget target,
                                                        GLint lod, void *img) const
{
    static const char *fnName = "glGetCompressedTextureImageEXT";

    beforeCommand(fnName, _api.glGetCompressedTextureImage);
    _api.glGetCompressedTextureImage(texture.ID, toScalar(target), lod, img);
    afterCommand(fnName);
}

// Calls glGetDoubleIndexedvEXT().
void EXTDirectStateAccessAPI::getDoubleIndexedv(GetPName target, GLuint index,
                                                GLdouble *data) const
{
    static const char *fnName = "glGetDoubleIndexedvEXT";

    beforeCommand(fnName, _api.glGetDoubleIndexedv);
    _api.glGetDoubleIndexedv(toScalar(target), index, data);
    afterCommand(fnName);
}

// Calls glGetDoublei_vEXT().
void EXTDirectStateAccessAPI::getDoubleIV(GetPName pname, GLuint index,
                                          GLdouble *params) const
{
    static const char *fnName = "glGetDoublei_vEXT";

    beforeCommand(fnName, _api.glGetDoublei_v);
    _api.glGetDoublei_v(toScalar(pname), index, params);
    afterCommand(fnName);
}

// Calls glGetFloatIndexedvEXT().
void EXTDirectStateAccessAPI::getFloatIndexedv(GetPName target, GLuint index,
                                               GLfloat *data) const
{
    static const char *fnName = "glGetFloatIndexedvEXT";

    beforeCommand(fnName, _api.glGetFloatIndexedv);
    _api.glGetFloatIndexedv(toScalar(target), index, data);
    afterCommand(fnName);
}

// Calls glGetFloati_vEXT().
void EXTDirectStateAccessAPI::getFloatIV(GetPName pname, GLuint index,
                                         GLfloat *params) const
{
    static const char *fnName = "glGetFloati_vEXT";

    beforeCommand(fnName, _api.glGetFloati_v);
    _api.glGetFloati_v(toScalar(pname), index, params);
    afterCommand(fnName);
}

// Calls glGetFramebufferParameterivEXT().
void EXTDirectStateAccessAPI::getFramebufferParameterIV(FrameBufferName framebuffer,
                                                        GetFramebufferParameter pname,
                                                        GLint *params) const
{
    static const char *fnName = "glGetFramebufferParameterivEXT";

    beforeCommand(fnName, _api.glGetFramebufferParameteriv);
    _api.glGetFramebufferParameteriv(framebuffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetIntegerIndexedvEXT().
void EXTDirectStateAccessAPI::getIntegerIndexedv(GetPName target, GLuint index,
                                                 GLint *data) const
{
    static const char *fnName = "glGetIntegerIndexedvEXT";

    beforeCommand(fnName, _api.glGetIntegerIndexedv);
    _api.glGetIntegerIndexedv(toScalar(target), index, data);
    afterCommand(fnName);
}

// Calls glGetMultiTexEnvfvEXT().
void EXTDirectStateAccessAPI::getMultiTexEnvFV(TextureUnit texunit,
                                               GLenum target, GLenum pname,
                                               GLfloat *params) const
{
    static const char *fnName = "glGetMultiTexEnvfvEXT";

    beforeCommand(fnName, _api.glGetMultiTexEnvfv);
    _api.glGetMultiTexEnvfv(toScalar(texunit), target, pname, params);
    afterCommand(fnName);
}

// Calls glGetMultiTexEnvivEXT().
void EXTDirectStateAccessAPI::getMultiTexEnvIV(TextureUnit texunit,
                                               GLenum target, GLenum pname,
                                               GLint *params) const
{
    static const char *fnName = "glGetMultiTexEnvivEXT";

    beforeCommand(fnName, _api.glGetMultiTexEnviv);
    _api.glGetMultiTexEnviv(toScalar(texunit), target, pname, params);
    afterCommand(fnName);
}

// Calls glGetMultiTexGendvEXT().
void EXTDirectStateAccessAPI::getMultiTexGenDV(TextureUnit texunit, GLenum coord,
                                               TextureGenParameter pname,
                                               GLdouble *params) const
{
    static const char *fnName = "glGetMultiTexGendvEXT";

    beforeCommand(fnName, _api.glGetMultiTexGendv);
    _api.glGetMultiTexGendv(toScalar(texunit), coord, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMultiTexGenfvEXT().
void EXTDirectStateAccessAPI::getMultiTexGenFV(TextureUnit texunit, GLenum coord,
                                               TextureGenParameter pname,
                                               GLfloat *params) const
{
    static const char *fnName = "glGetMultiTexGenfvEXT";

    beforeCommand(fnName, _api.glGetMultiTexGenfv);
    _api.glGetMultiTexGenfv(toScalar(texunit), coord, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMultiTexGenivEXT().
void EXTDirectStateAccessAPI::getMultiTexGenIV(TextureUnit texunit, GLenum coord,
                                               TextureGenParameter pname,
                                               GLint *params) const
{
    static const char *fnName = "glGetMultiTexGenivEXT";

    beforeCommand(fnName, _api.glGetMultiTexGeniv);
    _api.glGetMultiTexGeniv(toScalar(texunit), coord, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMultiTexImageEXT().
void EXTDirectStateAccessAPI::getMultiTexImage(TextureUnit texunit,
                                               TextureTarget target, GLint level,
                                               PixelFormat format,
                                               PixelType type, void *pixels) const
{
    static const char *fnName = "glGetMultiTexImageEXT";

    beforeCommand(fnName, _api.glGetMultiTexImage);
    _api.glGetMultiTexImage(toScalar(texunit), toScalar(target), level,
                            toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glGetMultiTexLevelParameterfvEXT().
void EXTDirectStateAccessAPI::getMultiTexLevelParameterFV(TextureUnit texunit,
                                                          TextureTarget target,
                                                          GLint level,
                                                          GetTextureParameter pname,
                                                          GLfloat *params) const
{
    static const char *fnName = "glGetMultiTexLevelParameterfvEXT";

    beforeCommand(fnName, _api.glGetMultiTexLevelParameterfv);
    _api.glGetMultiTexLevelParameterfv(toScalar(texunit), toScalar(target),
                                       level, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMultiTexLevelParameterivEXT().
void EXTDirectStateAccessAPI::getMultiTexLevelParameterIV(TextureUnit texunit,
                                                          TextureTarget target,
                                                          GLint level,
                                                          GetTextureParameter pname,
                                                          GLint *params) const
{
    static const char *fnName = "glGetMultiTexLevelParameterivEXT";

    beforeCommand(fnName, _api.glGetMultiTexLevelParameteriv);
    _api.glGetMultiTexLevelParameteriv(toScalar(texunit), toScalar(target),
                                       level, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMultiTexParameterIivEXT().
void EXTDirectStateAccessAPI::getMultiTexParameterIIV(TextureUnit texunit,
                                                      TextureTarget target,
                                                      GetTextureParameter pname,
                                                      GLint *params) const
{
    static const char *fnName = "glGetMultiTexParameterIivEXT";

    beforeCommand(fnName, _api.glGetMultiTexParameterIiv);
    _api.glGetMultiTexParameterIiv(toScalar(texunit), toScalar(target),
                                   toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMultiTexParameterIuivEXT().
void EXTDirectStateAccessAPI::getMultiTexParameterIUIV(TextureUnit texunit,
                                                       TextureTarget target,
                                                       GetTextureParameter pname,
                                                       GLuint *params) const
{
    static const char *fnName = "glGetMultiTexParameterIuivEXT";

    beforeCommand(fnName, _api.glGetMultiTexParameterIuiv);
    _api.glGetMultiTexParameterIuiv(toScalar(texunit), toScalar(target),
                                    toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMultiTexParameterfvEXT().
void EXTDirectStateAccessAPI::getMultiTexParameterFV(TextureUnit texunit,
                                                     TextureTarget target,
                                                     GetTextureParameter pname,
                                                     GLfloat *params) const
{
    static const char *fnName = "glGetMultiTexParameterfvEXT";

    beforeCommand(fnName, _api.glGetMultiTexParameterfv);
    _api.glGetMultiTexParameterfv(toScalar(texunit), toScalar(target),
                                  toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMultiTexParameterivEXT().
void EXTDirectStateAccessAPI::getMultiTexParameterIV(TextureUnit texunit,
                                                     TextureTarget target,
                                                     GetTextureParameter pname,
                                                     GLint *params) const
{
    static const char *fnName = "glGetMultiTexParameterivEXT";

    beforeCommand(fnName, _api.glGetMultiTexParameteriv);
    _api.glGetMultiTexParameteriv(toScalar(texunit), toScalar(target),
                                  toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetNamedBufferParameterivEXT().
void EXTDirectStateAccessAPI::getNamedBufferParameterIV(BufferName buffer,
                                                        BufferPNameARB pname,
                                                        GLint *params) const
{
    static const char *fnName = "glGetNamedBufferParameterivEXT";

    beforeCommand(fnName, _api.glGetNamedBufferParameteriv);
    _api.glGetNamedBufferParameteriv(buffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetNamedBufferPointervEXT().
void EXTDirectStateAccessAPI::getNamedBufferPointerV(BufferName buffer,
                                                     BufferPointerNameARB pname,
                                                     void **params) const
{
    static const char *fnName = "glGetNamedBufferPointervEXT";

    beforeCommand(fnName, _api.glGetNamedBufferPointerv);
    _api.glGetNamedBufferPointerv(buffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetNamedBufferSubDataEXT().
void EXTDirectStateAccessAPI::getNamedBufferSubData(BufferName buffer,
                                                    GLintptr offset,
                                                    GLsizeiptr size, void *data) const
{
    static const char *fnName = "glGetNamedBufferSubDataEXT";

    beforeCommand(fnName, _api.glGetNamedBufferSubData);
    _api.glGetNamedBufferSubData(buffer.ID, offset, size, data);
    afterCommand(fnName);
}

// Calls glGetNamedFramebufferAttachmentParameterivEXT().
void EXTDirectStateAccessAPI::getNamedFramebufferAttachmentParameterIV(FrameBufferName framebuffer,
                                                                       FramebufferAttachment attachment,
                                                                       FramebufferAttachmentParameterName pname,
                                                                       GLint *params) const
{
    static const char *fnName = "glGetNamedFramebufferAttachmentParameterivEXT";

    beforeCommand(fnName, _api.glGetNamedFramebufferAttachmentParameteriv);
    _api.glGetNamedFramebufferAttachmentParameteriv(framebuffer.ID,
                                                    toScalar(attachment),
                                                    toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetNamedFramebufferParameterivEXT().
void EXTDirectStateAccessAPI::getNamedFramebufferParameterIV(FrameBufferName framebuffer,
                                                             GetFramebufferParameter pname,
                                                             GLint *params) const
{
    static const char *fnName = "glGetNamedFramebufferParameterivEXT";

    beforeCommand(fnName, _api.glGetNamedFramebufferParameteriv);
    _api.glGetNamedFramebufferParameteriv(framebuffer.ID, toScalar(pname),
                                          params);
    afterCommand(fnName);
}

// Calls glGetNamedProgramLocalParameterIivEXT().
void EXTDirectStateAccessAPI::getNamedProgramLocalParameterIIV(ProgramName program,
                                                               ProgramTarget target,
                                                               GLuint index,
                                                               GLint *params) const
{
    static const char *fnName = "glGetNamedProgramLocalParameterIivEXT";

    beforeCommand(fnName, _api.glGetNamedProgramLocalParameterIiv);
    _api.glGetNamedProgramLocalParameterIiv(program.ID, toScalar(target), index,
                                            params);
    afterCommand(fnName);
}

// Calls glGetNamedProgramLocalParameterIuivEXT().
void EXTDirectStateAccessAPI::getNamedProgramLocalParameterIUIV(ProgramName program,
                                                                ProgramTarget target,
                                                                GLuint index,
                                                                GLuint *params) const
{
    static const char *fnName = "glGetNamedProgramLocalParameterIuivEXT";

    beforeCommand(fnName, _api.glGetNamedProgramLocalParameterIuiv);
    _api.glGetNamedProgramLocalParameterIuiv(program.ID, toScalar(target), index,
                                             params);
    afterCommand(fnName);
}

// Calls glGetNamedProgramLocalParameterdvEXT().
void EXTDirectStateAccessAPI::getNamedProgramLocalParameterDV(ProgramName program,
                                                              ProgramTarget target,
                                                              GLuint index,
                                                              GLdouble *params) const
{
    static const char *fnName = "glGetNamedProgramLocalParameterdvEXT";

    beforeCommand(fnName, _api.glGetNamedProgramLocalParameterdv);
    _api.glGetNamedProgramLocalParameterdv(program.ID, toScalar(target), index,
                                           params);
    afterCommand(fnName);
}

// Calls glGetNamedProgramLocalParameterfvEXT().
void EXTDirectStateAccessAPI::getNamedProgramLocalParameterFV(ProgramName program,
                                                              ProgramTarget target,
                                                              GLuint index,
                                                              GLfloat *params) const
{
    static const char *fnName = "glGetNamedProgramLocalParameterfvEXT";

    beforeCommand(fnName, _api.glGetNamedProgramLocalParameterfv);
    _api.glGetNamedProgramLocalParameterfv(program.ID, toScalar(target), index,
                                           params);
    afterCommand(fnName);
}

// Calls glGetNamedProgramStringEXT().
void EXTDirectStateAccessAPI::getNamedProgramString(ProgramName program,
                                                    ProgramTarget target,
                                                    ProgramStringProperty pname,
                                                    void *string) const
{
    static const char *fnName = "glGetNamedProgramStringEXT";

    beforeCommand(fnName, _api.glGetNamedProgramString);
    _api.glGetNamedProgramString(program.ID, toScalar(target), toScalar(pname),
                                 string);
    afterCommand(fnName);
}

// Calls glGetNamedProgramivEXT().
void EXTDirectStateAccessAPI::getNamedProgramIV(ProgramName program,
                                                ProgramTarget target,
                                                ProgramProperty pname,
                                                GLint *params) const
{
    static const char *fnName = "glGetNamedProgramivEXT";

    beforeCommand(fnName, _api.glGetNamedProgramiv);
    _api.glGetNamedProgramiv(program.ID, toScalar(target), toScalar(pname),
                             params);
    afterCommand(fnName);
}

// Calls glGetNamedRenderbufferParameterivEXT().
void EXTDirectStateAccessAPI::getNamedRenderbufferParameterIV(RenderBufferName renderbuffer,
                                                              RenderBufferParameterName pname,
                                                              GLint *params) const
{
    static const char *fnName = "glGetNamedRenderbufferParameterivEXT";

    beforeCommand(fnName, _api.glGetNamedRenderbufferParameteriv);
    _api.glGetNamedRenderbufferParameteriv(renderbuffer.ID, toScalar(pname),
                                           params);
    afterCommand(fnName);
}

// Calls glGetPointerIndexedvEXT().
void EXTDirectStateAccessAPI::getPointerIndexedv(GLenum target, GLuint index,
                                                 void **data) const
{
    static const char *fnName = "glGetPointerIndexedvEXT";

    beforeCommand(fnName, _api.glGetPointerIndexedv);
    _api.glGetPointerIndexedv(target, index, data);
    afterCommand(fnName);
}

// Calls glGetPointeri_vEXT().
void EXTDirectStateAccessAPI::getPointerIV(GLenum pname, GLuint index,
                                           void **params) const
{
    static const char *fnName = "glGetPointeri_vEXT";

    beforeCommand(fnName, _api.glGetPointeri_v);
    _api.glGetPointeri_v(pname, index, params);
    afterCommand(fnName);
}

// Calls glGetTextureImageEXT().
void EXTDirectStateAccessAPI::getTextureImage(TextureName texture,
                                              TextureTarget target, GLint level,
                                              PixelFormat format, PixelType type,
                                              void *pixels) const
{
    static const char *fnName = "glGetTextureImageEXT";

    beforeCommand(fnName, _api.glGetTextureImage);
    _api.glGetTextureImage(texture.ID, toScalar(target), level, toScalar(format),
                           toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glGetTextureLevelParameterfvEXT().
void EXTDirectStateAccessAPI::getTextureLevelParameterFV(TextureName texture,
                                                         TextureTarget target,
                                                         GLint level,
                                                         GetTextureParameter pname,
                                                         GLfloat *params) const
{
    static const char *fnName = "glGetTextureLevelParameterfvEXT";

    beforeCommand(fnName, _api.glGetTextureLevelParameterfv);
    _api.glGetTextureLevelParameterfv(texture.ID, toScalar(target), level,
                                      toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTextureLevelParameterivEXT().
void EXTDirectStateAccessAPI::getTextureLevelParameterIV(TextureName texture,
                                                         TextureTarget target,
                                                         GLint level,
                                                         GetTextureParameter pname,
                                                         GLint *params) const
{
    static const char *fnName = "glGetTextureLevelParameterivEXT";

    beforeCommand(fnName, _api.glGetTextureLevelParameteriv);
    _api.glGetTextureLevelParameteriv(texture.ID, toScalar(target), level,
                                      toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTextureParameterIivEXT().
void EXTDirectStateAccessAPI::getTextureParameterIIV(TextureName texture,
                                                     TextureTarget target,
                                                     GetTextureParameter pname,
                                                     GLint *params) const
{
    static const char *fnName = "glGetTextureParameterIivEXT";

    beforeCommand(fnName, _api.glGetTextureParameterIiv);
    _api.glGetTextureParameterIiv(texture.ID, toScalar(target), toScalar(pname),
                                  params);
    afterCommand(fnName);
}

// Calls glGetTextureParameterIuivEXT().
void EXTDirectStateAccessAPI::getTextureParameterIUIV(TextureName texture,
                                                      TextureTarget target,
                                                      GetTextureParameter pname,
                                                      GLuint *params) const
{
    static const char *fnName = "glGetTextureParameterIuivEXT";

    beforeCommand(fnName, _api.glGetTextureParameterIuiv);
    _api.glGetTextureParameterIuiv(texture.ID, toScalar(target), toScalar(pname),
                                   params);
    afterCommand(fnName);
}

// Calls glGetTextureParameterfvEXT().
void EXTDirectStateAccessAPI::getTextureParameterFV(TextureName texture,
                                                    TextureTarget target,
                                                    GetTextureParameter pname,
                                                    GLfloat *params) const
{
    static const char *fnName = "glGetTextureParameterfvEXT";

    beforeCommand(fnName, _api.glGetTextureParameterfv);
    _api.glGetTextureParameterfv(texture.ID, toScalar(target), toScalar(pname),
                                 params);
    afterCommand(fnName);
}

// Calls glGetTextureParameterivEXT().
void EXTDirectStateAccessAPI::getTextureParameterIV(TextureName texture,
                                                    TextureTarget target,
                                                    GetTextureParameter pname,
                                                    GLint *params) const
{
    static const char *fnName = "glGetTextureParameterivEXT";

    beforeCommand(fnName, _api.glGetTextureParameteriv);
    _api.glGetTextureParameteriv(texture.ID, toScalar(target), toScalar(pname),
                                 params);
    afterCommand(fnName);
}

// Calls glGetVertexArrayIntegeri_vEXT().
void EXTDirectStateAccessAPI::getVertexArrayIntegerIV(VertexArrayName vaobj,
                                                      GLuint index,
                                                      VertexArrayPName pname,
                                                      GLint *param) const
{
    static const char *fnName = "glGetVertexArrayIntegeri_vEXT";

    beforeCommand(fnName, _api.glGetVertexArrayIntegeri_v);
    _api.glGetVertexArrayIntegeri_v(vaobj.ID, index, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetVertexArrayIntegervEXT().
void EXTDirectStateAccessAPI::getVertexArrayIntegerV(VertexArrayName vaobj,
                                                     VertexArrayPName pname,
                                                     GLint *param) const
{
    static const char *fnName = "glGetVertexArrayIntegervEXT";

    beforeCommand(fnName, _api.glGetVertexArrayIntegerv);
    _api.glGetVertexArrayIntegerv(vaobj.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetVertexArrayPointeri_vEXT().
void EXTDirectStateAccessAPI::getVertexArrayPointerIV(VertexArrayName vaobj,
                                                      GLuint index,
                                                      VertexArrayPName pname,
                                                      void **param) const
{
    static const char *fnName = "glGetVertexArrayPointeri_vEXT";

    beforeCommand(fnName, _api.glGetVertexArrayPointeri_v);
    _api.glGetVertexArrayPointeri_v(vaobj.ID, index, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetVertexArrayPointervEXT().
void EXTDirectStateAccessAPI::getVertexArrayPointerV(VertexArrayName vaobj,
                                                     VertexArrayPName pname,
                                                     void **param) const
{
    static const char *fnName = "glGetVertexArrayPointervEXT";

    beforeCommand(fnName, _api.glGetVertexArrayPointerv);
    _api.glGetVertexArrayPointerv(vaobj.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glIsEnabledIndexedEXT().
Boolean EXTDirectStateAccessAPI::isEnabledIndexed(EnableCap target, GLuint index) const
{
    static const char *fnName = "glIsEnabledIndexedEXT";

    beforeCommand(fnName, _api.glIsEnabledIndexed);
    GLboolean result = _api.glIsEnabledIndexed(toScalar(target), index);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMapNamedBufferEXT().
void *EXTDirectStateAccessAPI::mapNamedBuffer(BufferName buffer,
                                              BufferAccessARB access) const
{
    static const char *fnName = "glMapNamedBufferEXT";

    beforeCommand(fnName, _api.glMapNamedBuffer);
    void *result = _api.glMapNamedBuffer(buffer.ID, toScalar(access));
    afterCommand(fnName);

    return result;
}

// Calls glMapNamedBufferRangeEXT().
void *EXTDirectStateAccessAPI::mapNamedBufferRange(BufferName buffer,
                                                   GLintptr offset,
                                                   GLsizeiptr length,
                                                   GLbitfield  /* MapBufferAccessMask */ access) const
{
    static const char *fnName = "glMapNamedBufferRangeEXT";

    beforeCommand(fnName, _api.glMapNamedBufferRange);
    void *result = _api.glMapNamedBufferRange(buffer.ID, offset, length, access);
    afterCommand(fnName);

    return result;
}

// Calls glMatrixFrustumEXT().
void EXTDirectStateAccessAPI::matrixFrustum(MatrixMode mode, GLdouble left,
                                            GLdouble right, GLdouble bottom,
                                            GLdouble top, GLdouble zNear,
                                            GLdouble zFar) const
{
    static const char *fnName = "glMatrixFrustumEXT";

    beforeCommand(fnName, _api.glMatrixFrustum);
    _api.glMatrixFrustum(toScalar(mode), left, right, bottom, top, zNear, zFar);
    afterCommand(fnName);
}

// Calls glMatrixLoadIdentityEXT().
void EXTDirectStateAccessAPI::matrixLoadIdentity(MatrixMode mode) const
{
    static const char *fnName = "glMatrixLoadIdentityEXT";

    beforeCommand(fnName, _api.glMatrixLoadIdentity);
    _api.glMatrixLoadIdentity(toScalar(mode));
    afterCommand(fnName);
}

// Calls glMatrixLoadTransposedEXT().
void EXTDirectStateAccessAPI::matrixLoadTransposeD(MatrixMode mode,
                                                   const GLdouble *m) const
{
    static const char *fnName = "glMatrixLoadTransposedEXT";

    beforeCommand(fnName, _api.glMatrixLoadTransposed);
    _api.glMatrixLoadTransposed(toScalar(mode), m);
    afterCommand(fnName);
}

// Calls glMatrixLoadTransposefEXT().
void EXTDirectStateAccessAPI::matrixLoadTransposeF(MatrixMode mode,
                                                   const GLfloat *m) const
{
    static const char *fnName = "glMatrixLoadTransposefEXT";

    beforeCommand(fnName, _api.glMatrixLoadTransposef);
    _api.glMatrixLoadTransposef(toScalar(mode), m);
    afterCommand(fnName);
}

// Calls glMatrixLoaddEXT().
void EXTDirectStateAccessAPI::matrixLoadD(MatrixMode mode, const GLdouble *m) const
{
    static const char *fnName = "glMatrixLoaddEXT";

    beforeCommand(fnName, _api.glMatrixLoadd);
    _api.glMatrixLoadd(toScalar(mode), m);
    afterCommand(fnName);
}

// Calls glMatrixLoadfEXT().
void EXTDirectStateAccessAPI::matrixLoadF(MatrixMode mode, const GLfloat *m) const
{
    static const char *fnName = "glMatrixLoadfEXT";

    beforeCommand(fnName, _api.glMatrixLoadf);
    _api.glMatrixLoadf(toScalar(mode), m);
    afterCommand(fnName);
}

// Calls glMatrixMultTransposedEXT().
void EXTDirectStateAccessAPI::matrixMultTransposeD(MatrixMode mode,
                                                   const GLdouble *m) const
{
    static const char *fnName = "glMatrixMultTransposedEXT";

    beforeCommand(fnName, _api.glMatrixMultTransposed);
    _api.glMatrixMultTransposed(toScalar(mode), m);
    afterCommand(fnName);
}

// Calls glMatrixMultTransposefEXT().
void EXTDirectStateAccessAPI::matrixMultTransposeF(MatrixMode mode,
                                                   const GLfloat *m) const
{
    static const char *fnName = "glMatrixMultTransposefEXT";

    beforeCommand(fnName, _api.glMatrixMultTransposef);
    _api.glMatrixMultTransposef(toScalar(mode), m);
    afterCommand(fnName);
}

// Calls glMatrixMultdEXT().
void EXTDirectStateAccessAPI::matrixMultD(MatrixMode mode, const GLdouble *m) const
{
    static const char *fnName = "glMatrixMultdEXT";

    beforeCommand(fnName, _api.glMatrixMultd);
    _api.glMatrixMultd(toScalar(mode), m);
    afterCommand(fnName);
}

// Calls glMatrixMultfEXT().
void EXTDirectStateAccessAPI::matrixMultF(MatrixMode mode, const GLfloat *m) const
{
    static const char *fnName = "glMatrixMultfEXT";

    beforeCommand(fnName, _api.glMatrixMultf);
    _api.glMatrixMultf(toScalar(mode), m);
    afterCommand(fnName);
}

// Calls glMatrixOrthoEXT().
void EXTDirectStateAccessAPI::matrixOrtho(MatrixMode mode, GLdouble left,
                                          GLdouble right, GLdouble bottom,
                                          GLdouble top, GLdouble zNear,
                                          GLdouble zFar) const
{
    static const char *fnName = "glMatrixOrthoEXT";

    beforeCommand(fnName, _api.glMatrixOrtho);
    _api.glMatrixOrtho(toScalar(mode), left, right, bottom, top, zNear, zFar);
    afterCommand(fnName);
}

// Calls glMatrixPopEXT().
void EXTDirectStateAccessAPI::matrixPop(MatrixMode mode) const
{
    static const char *fnName = "glMatrixPopEXT";

    beforeCommand(fnName, _api.glMatrixPop);
    _api.glMatrixPop(toScalar(mode));
    afterCommand(fnName);
}

// Calls glMatrixPushEXT().
void EXTDirectStateAccessAPI::matrixPush(MatrixMode mode) const
{
    static const char *fnName = "glMatrixPushEXT";

    beforeCommand(fnName, _api.glMatrixPush);
    _api.glMatrixPush(toScalar(mode));
    afterCommand(fnName);
}

// Calls glMatrixRotatedEXT().
void EXTDirectStateAccessAPI::matrixRotateD(MatrixMode mode, GLdouble angle,
                                            GLdouble x, GLdouble y, GLdouble z) const
{
    static const char *fnName = "glMatrixRotatedEXT";

    beforeCommand(fnName, _api.glMatrixRotated);
    _api.glMatrixRotated(toScalar(mode), angle, x, y, z);
    afterCommand(fnName);
}

// Calls glMatrixRotatefEXT().
void EXTDirectStateAccessAPI::matrixRotateF(MatrixMode mode, GLfloat angle,
                                            GLfloat x, GLfloat y, GLfloat z) const
{
    static const char *fnName = "glMatrixRotatefEXT";

    beforeCommand(fnName, _api.glMatrixRotatef);
    _api.glMatrixRotatef(toScalar(mode), angle, x, y, z);
    afterCommand(fnName);
}

// Calls glMatrixScaledEXT().
void EXTDirectStateAccessAPI::matrixScaleD(MatrixMode mode, GLdouble x,
                                           GLdouble y, GLdouble z) const
{
    static const char *fnName = "glMatrixScaledEXT";

    beforeCommand(fnName, _api.glMatrixScaled);
    _api.glMatrixScaled(toScalar(mode), x, y, z);
    afterCommand(fnName);
}

// Calls glMatrixScalefEXT().
void EXTDirectStateAccessAPI::matrixScaleF(MatrixMode mode, GLfloat x, GLfloat y,
                                           GLfloat z) const
{
    static const char *fnName = "glMatrixScalefEXT";

    beforeCommand(fnName, _api.glMatrixScalef);
    _api.glMatrixScalef(toScalar(mode), x, y, z);
    afterCommand(fnName);
}

// Calls glMatrixTranslatedEXT().
void EXTDirectStateAccessAPI::matrixTranslateD(MatrixMode mode, GLdouble x,
                                               GLdouble y, GLdouble z) const
{
    static const char *fnName = "glMatrixTranslatedEXT";

    beforeCommand(fnName, _api.glMatrixTranslated);
    _api.glMatrixTranslated(toScalar(mode), x, y, z);
    afterCommand(fnName);
}

// Calls glMatrixTranslatefEXT().
void EXTDirectStateAccessAPI::matrixTranslateF(MatrixMode mode, GLfloat x,
                                               GLfloat y, GLfloat z) const
{
    static const char *fnName = "glMatrixTranslatefEXT";

    beforeCommand(fnName, _api.glMatrixTranslatef);
    _api.glMatrixTranslatef(toScalar(mode), x, y, z);
    afterCommand(fnName);
}

// Calls glMultiTexBufferEXT().
void EXTDirectStateAccessAPI::multiTexBuffer(TextureUnit texunit,
                                             TextureTarget target,
                                             InternalFormat internalformat,
                                             BufferName buffer) const
{
    static const char *fnName = "glMultiTexBufferEXT";

    beforeCommand(fnName, _api.glMultiTexBuffer);
    _api.glMultiTexBuffer(toScalar(texunit), toScalar(target),
                          toScalar(internalformat), buffer.ID);
    afterCommand(fnName);
}

// Calls glMultiTexCoordPointerEXT().
void EXTDirectStateAccessAPI::multiTexCoordPointer(TextureUnit texunit,
                                                   GLint size,
                                                   TexCoordPointerType type,
                                                   GLsizei stride,
                                                   const void *pointer) const
{
    static const char *fnName = "glMultiTexCoordPointerEXT";

    beforeCommand(fnName, _api.glMultiTexCoordPointer);
    _api.glMultiTexCoordPointer(toScalar(texunit), size, toScalar(type), stride,
                                pointer);
    afterCommand(fnName);
}

// Calls glMultiTexEnvfEXT().
void EXTDirectStateAccessAPI::multiTexEnvF(TextureUnit texunit, GLenum target,
                                           GLenum pname, GLfloat param) const
{
    static const char *fnName = "glMultiTexEnvfEXT";

    beforeCommand(fnName, _api.glMultiTexEnvf);
    _api.glMultiTexEnvf(toScalar(texunit), target, pname, param);
    afterCommand(fnName);
}

// Calls glMultiTexEnvfvEXT().
void EXTDirectStateAccessAPI::multiTexEnvFV(TextureUnit texunit, GLenum target,
                                            GLenum pname, const GLfloat *params) const
{
    static const char *fnName = "glMultiTexEnvfvEXT";

    beforeCommand(fnName, _api.glMultiTexEnvfv);
    _api.glMultiTexEnvfv(toScalar(texunit), target, pname, params);
    afterCommand(fnName);
}

// Calls glMultiTexEnviEXT().
void EXTDirectStateAccessAPI::multiTexEnvI(TextureUnit texunit, GLenum target,
                                           GLenum pname, GLint param) const
{
    static const char *fnName = "glMultiTexEnviEXT";

    beforeCommand(fnName, _api.glMultiTexEnvi);
    _api.glMultiTexEnvi(toScalar(texunit), target, pname, param);
    afterCommand(fnName);
}

// Calls glMultiTexEnvivEXT().
void EXTDirectStateAccessAPI::multiTexEnvIV(TextureUnit texunit, GLenum target,
                                            GLenum pname, const GLint *params) const
{
    static const char *fnName = "glMultiTexEnvivEXT";

    beforeCommand(fnName, _api.glMultiTexEnviv);
    _api.glMultiTexEnviv(toScalar(texunit), target, pname, params);
    afterCommand(fnName);
}

// Calls glMultiTexGendEXT().
void EXTDirectStateAccessAPI::multiTexGenD(TextureUnit texunit, GLenum coord,
                                           TextureGenParameter pname,
                                           GLdouble param) const
{
    static const char *fnName = "glMultiTexGendEXT";

    beforeCommand(fnName, _api.glMultiTexGend);
    _api.glMultiTexGend(toScalar(texunit), coord, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glMultiTexGendvEXT().
void EXTDirectStateAccessAPI::multiTexGenDV(TextureUnit texunit, GLenum coord,
                                            TextureGenParameter pname,
                                            const GLdouble *params) const
{
    static const char *fnName = "glMultiTexGendvEXT";

    beforeCommand(fnName, _api.glMultiTexGendv);
    _api.glMultiTexGendv(toScalar(texunit), coord, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMultiTexGenfEXT().
void EXTDirectStateAccessAPI::multiTexGenF(TextureUnit texunit, GLenum coord,
                                           TextureGenParameter pname,
                                           GLfloat param) const
{
    static const char *fnName = "glMultiTexGenfEXT";

    beforeCommand(fnName, _api.glMultiTexGenf);
    _api.glMultiTexGenf(toScalar(texunit), coord, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glMultiTexGenfvEXT().
void EXTDirectStateAccessAPI::multiTexGenFV(TextureUnit texunit, GLenum coord,
                                            TextureGenParameter pname,
                                            const GLfloat *params) const
{
    static const char *fnName = "glMultiTexGenfvEXT";

    beforeCommand(fnName, _api.glMultiTexGenfv);
    _api.glMultiTexGenfv(toScalar(texunit), coord, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMultiTexGeniEXT().
void EXTDirectStateAccessAPI::multiTexGenI(TextureUnit texunit, GLenum coord,
                                           TextureGenParameter pname,
                                           GLint param) const
{
    static const char *fnName = "glMultiTexGeniEXT";

    beforeCommand(fnName, _api.glMultiTexGeni);
    _api.glMultiTexGeni(toScalar(texunit), coord, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glMultiTexGenivEXT().
void EXTDirectStateAccessAPI::multiTexGenIV(TextureUnit texunit, GLenum coord,
                                            TextureGenParameter pname,
                                            const GLint *params) const
{
    static const char *fnName = "glMultiTexGenivEXT";

    beforeCommand(fnName, _api.glMultiTexGeniv);
    _api.glMultiTexGeniv(toScalar(texunit), coord, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMultiTexImage1DEXT().
void EXTDirectStateAccessAPI::multiTexImage1D(TextureUnit texunit,
                                              TextureTarget target, GLint level,
                                              InternalFormat internalformat,
                                              GLsizei width, GLint border,
                                              PixelFormat format, PixelType type,
                                              const void *pixels) const
{
    static const char *fnName = "glMultiTexImage1DEXT";

    beforeCommand(fnName, _api.glMultiTexImage1D);
    _api.glMultiTexImage1D(toScalar(texunit), toScalar(target), level,
                           toScalar(internalformat), width, border,
                           toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glMultiTexImage2DEXT().
void EXTDirectStateAccessAPI::multiTexImage2D(TextureUnit texunit,
                                              TextureTarget target, GLint level,
                                              InternalFormat internalformat,
                                              GLsizei width, GLsizei height,
                                              GLint border, PixelFormat format,
                                              PixelType type, const void *pixels) const
{
    static const char *fnName = "glMultiTexImage2DEXT";

    beforeCommand(fnName, _api.glMultiTexImage2D);
    _api.glMultiTexImage2D(toScalar(texunit), toScalar(target), level,
                           toScalar(internalformat), width, height, border,
                           toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glMultiTexImage3DEXT().
void EXTDirectStateAccessAPI::multiTexImage3D(TextureUnit texunit,
                                              TextureTarget target, GLint level,
                                              InternalFormat internalformat,
                                              GLsizei width, GLsizei height,
                                              GLsizei depth, GLint border,
                                              PixelFormat format, PixelType type,
                                              const void *pixels) const
{
    static const char *fnName = "glMultiTexImage3DEXT";

    beforeCommand(fnName, _api.glMultiTexImage3D);
    _api.glMultiTexImage3D(toScalar(texunit), toScalar(target), level,
                           toScalar(internalformat), width, height, depth,
                           border, toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glMultiTexParameterIivEXT().
void EXTDirectStateAccessAPI::multiTexParameterIIV(TextureUnit texunit,
                                                   TextureTarget target,
                                                   TextureParameterName pname,
                                                   const GLint *params) const
{
    static const char *fnName = "glMultiTexParameterIivEXT";

    beforeCommand(fnName, _api.glMultiTexParameterIiv);
    _api.glMultiTexParameterIiv(toScalar(texunit), toScalar(target),
                                toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMultiTexParameterIuivEXT().
void EXTDirectStateAccessAPI::multiTexParameterIUIV(TextureUnit texunit,
                                                    TextureTarget target,
                                                    TextureParameterName pname,
                                                    const GLuint *params) const
{
    static const char *fnName = "glMultiTexParameterIuivEXT";

    beforeCommand(fnName, _api.glMultiTexParameterIuiv);
    _api.glMultiTexParameterIuiv(toScalar(texunit), toScalar(target),
                                 toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMultiTexParameterfEXT().
void EXTDirectStateAccessAPI::multiTexParameterF(TextureUnit texunit,
                                                 TextureTarget target,
                                                 TextureParameterName pname,
                                                 GLfloat param) const
{
    static const char *fnName = "glMultiTexParameterfEXT";

    beforeCommand(fnName, _api.glMultiTexParameterf);
    _api.glMultiTexParameterf(toScalar(texunit), toScalar(target),
                              toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glMultiTexParameterfvEXT().
void EXTDirectStateAccessAPI::multiTexParameterFV(TextureUnit texunit,
                                                  TextureTarget target,
                                                  TextureParameterName pname,
                                                  const GLfloat *params) const
{
    static const char *fnName = "glMultiTexParameterfvEXT";

    beforeCommand(fnName, _api.glMultiTexParameterfv);
    _api.glMultiTexParameterfv(toScalar(texunit), toScalar(target),
                               toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMultiTexParameteriEXT().
void EXTDirectStateAccessAPI::multiTexParameterI(TextureUnit texunit,
                                                 TextureTarget target,
                                                 TextureParameterName pname,
                                                 GLint param) const
{
    static const char *fnName = "glMultiTexParameteriEXT";

    beforeCommand(fnName, _api.glMultiTexParameteri);
    _api.glMultiTexParameteri(toScalar(texunit), toScalar(target),
                              toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glMultiTexParameterivEXT().
void EXTDirectStateAccessAPI::multiTexParameterIV(TextureUnit texunit,
                                                  TextureTarget target,
                                                  TextureParameterName pname,
                                                  const GLint *params) const
{
    static const char *fnName = "glMultiTexParameterivEXT";

    beforeCommand(fnName, _api.glMultiTexParameteriv);
    _api.glMultiTexParameteriv(toScalar(texunit), toScalar(target),
                               toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMultiTexRenderbufferEXT().
void EXTDirectStateAccessAPI::multiTexRenderbuffer(TextureUnit texunit,
                                                   TextureTarget target,
                                                   RenderBufferName renderbuffer) const
{
    static const char *fnName = "glMultiTexRenderbufferEXT";

    beforeCommand(fnName, _api.glMultiTexRenderbuffer);
    _api.glMultiTexRenderbuffer(toScalar(texunit), toScalar(target),
                                renderbuffer.ID);
    afterCommand(fnName);
}

// Calls glMultiTexSubImage1DEXT().
void EXTDirectStateAccessAPI::multiTexSubImage1D(TextureUnit texunit,
                                                 TextureTarget target,
                                                 GLint level, GLint xoffset,
                                                 GLsizei width,
                                                 PixelFormat format,
                                                 PixelType type,
                                                 const void *pixels) const
{
    static const char *fnName = "glMultiTexSubImage1DEXT";

    beforeCommand(fnName, _api.glMultiTexSubImage1D);
    _api.glMultiTexSubImage1D(toScalar(texunit), toScalar(target), level,
                              xoffset, width, toScalar(format), toScalar(type),
                              pixels);
    afterCommand(fnName);
}

// Calls glMultiTexSubImage2DEXT().
void EXTDirectStateAccessAPI::multiTexSubImage2D(TextureUnit texunit,
                                                 TextureTarget target,
                                                 GLint level, GLint xoffset,
                                                 GLint yoffset, GLsizei width,
                                                 GLsizei height,
                                                 PixelFormat format,
                                                 PixelType type,
                                                 const void *pixels) const
{
    static const char *fnName = "glMultiTexSubImage2DEXT";

    beforeCommand(fnName, _api.glMultiTexSubImage2D);
    _api.glMultiTexSubImage2D(toScalar(texunit), toScalar(target), level,
                              xoffset, yoffset, width, height, toScalar(format),
                              toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glMultiTexSubImage3DEXT().
void EXTDirectStateAccessAPI::multiTexSubImage3D(TextureUnit texunit,
                                                 TextureTarget target,
                                                 GLint level, GLint xoffset,
                                                 GLint yoffset, GLint zoffset,
                                                 GLsizei width, GLsizei height,
                                                 GLsizei depth,
                                                 PixelFormat format,
                                                 PixelType type,
                                                 const void *pixels) const
{
    static const char *fnName = "glMultiTexSubImage3DEXT";

    beforeCommand(fnName, _api.glMultiTexSubImage3D);
    _api.glMultiTexSubImage3D(toScalar(texunit), toScalar(target), level,
                              xoffset, yoffset, zoffset, width, height, depth,
                              toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glNamedBufferDataEXT().
void EXTDirectStateAccessAPI::namedBufferData(BufferName buffer, GLsizeiptr size,
                                              const void *data,
                                              VertexBufferObjectUsage usage) const
{
    static const char *fnName = "glNamedBufferDataEXT";

    beforeCommand(fnName, _api.glNamedBufferData);
    _api.glNamedBufferData(buffer.ID, size, data, toScalar(usage));
    afterCommand(fnName);
}

// Calls glNamedBufferStorageEXT().
void EXTDirectStateAccessAPI::namedBufferStorage(BufferName buffer,
                                                 GLsizeiptr size,
                                                 const void *data,
                                                 GLbitfield  /* BufferStorageMask */ flags) const
{
    static const char *fnName = "glNamedBufferStorageEXT";

    beforeCommand(fnName, _api.glNamedBufferStorage);
    _api.glNamedBufferStorage(buffer.ID, size, data, flags);
    afterCommand(fnName);
}

// Calls glNamedBufferSubDataEXT().
void EXTDirectStateAccessAPI::namedBufferSubData(BufferName buffer,
                                                 GLintptr offset,
                                                 GLsizeiptr size,
                                                 const void *data) const
{
    static const char *fnName = "glNamedBufferSubDataEXT";

    beforeCommand(fnName, _api.glNamedBufferSubData);
    _api.glNamedBufferSubData(buffer.ID, offset, size, data);
    afterCommand(fnName);
}

// Calls glNamedCopyBufferSubDataEXT().
void EXTDirectStateAccessAPI::namedCopyBufferSubData(BufferName readBuffer,
                                                     BufferName writeBuffer,
                                                     GLintptr readOffset,
                                                     GLintptr writeOffset,
                                                     GLsizeiptr size) const
{
    static const char *fnName = "glNamedCopyBufferSubDataEXT";

    beforeCommand(fnName, _api.glNamedCopyBufferSubData);
    _api.glNamedCopyBufferSubData(readBuffer.ID, writeBuffer.ID, readOffset,
                                  writeOffset, size);
    afterCommand(fnName);
}

// Calls glNamedFramebufferParameteriEXT().
void EXTDirectStateAccessAPI::namedFramebufferParameterI(FrameBufferName framebuffer,
                                                         FramebufferParameterName pname,
                                                         GLint param) const
{
    static const char *fnName = "glNamedFramebufferParameteriEXT";

    beforeCommand(fnName, _api.glNamedFramebufferParameteri);
    _api.glNamedFramebufferParameteri(framebuffer.ID, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glNamedFramebufferRenderbufferEXT().
void EXTDirectStateAccessAPI::namedFramebufferRenderbuffer(FrameBufferName framebuffer,
                                                           FramebufferAttachment attachment,
                                                           RenderBufferTarget renderbuffertarget,
                                                           RenderBufferName renderbuffer) const
{
    static const char *fnName = "glNamedFramebufferRenderbufferEXT";

    beforeCommand(fnName, _api.glNamedFramebufferRenderbuffer);
    _api.glNamedFramebufferRenderbuffer(framebuffer.ID, toScalar(attachment),
                                        toScalar(renderbuffertarget),
                                        renderbuffer.ID);
    afterCommand(fnName);
}

// Calls glNamedFramebufferTexture1DEXT().
void EXTDirectStateAccessAPI::namedFramebufferTexture1D(FrameBufferName framebuffer,
                                                        FramebufferAttachment attachment,
                                                        TextureTarget textarget,
                                                        TextureName texture,
                                                        GLint level) const
{
    static const char *fnName = "glNamedFramebufferTexture1DEXT";

    beforeCommand(fnName, _api.glNamedFramebufferTexture1D);
    _api.glNamedFramebufferTexture1D(framebuffer.ID, toScalar(attachment),
                                     toScalar(textarget), texture.ID, level);
    afterCommand(fnName);
}

// Calls glNamedFramebufferTexture2DEXT().
void EXTDirectStateAccessAPI::namedFramebufferTexture2D(FrameBufferName framebuffer,
                                                        FramebufferAttachment attachment,
                                                        TextureTarget textarget,
                                                        TextureName texture,
                                                        GLint level) const
{
    static const char *fnName = "glNamedFramebufferTexture2DEXT";

    beforeCommand(fnName, _api.glNamedFramebufferTexture2D);
    _api.glNamedFramebufferTexture2D(framebuffer.ID, toScalar(attachment),
                                     toScalar(textarget), texture.ID, level);
    afterCommand(fnName);
}

// Calls glNamedFramebufferTexture3DEXT().
void EXTDirectStateAccessAPI::namedFramebufferTexture3D(FrameBufferName framebuffer,
                                                        FramebufferAttachment attachment,
                                                        TextureTarget textarget,
                                                        TextureName texture,
                                                        GLint level,
                                                        GLint zoffset) const
{
    static const char *fnName = "glNamedFramebufferTexture3DEXT";

    beforeCommand(fnName, _api.glNamedFramebufferTexture3D);
    _api.glNamedFramebufferTexture3D(framebuffer.ID, toScalar(attachment),
                                     toScalar(textarget), texture.ID, level,
                                     zoffset);
    afterCommand(fnName);
}

// Calls glNamedFramebufferTextureEXT().
void EXTDirectStateAccessAPI::namedFramebufferTexture(FrameBufferName framebuffer,
                                                      FramebufferAttachment attachment,
                                                      TextureName texture,
                                                      GLint level) const
{
    static const char *fnName = "glNamedFramebufferTextureEXT";

    beforeCommand(fnName, _api.glNamedFramebufferTexture);
    _api.glNamedFramebufferTexture(framebuffer.ID, toScalar(attachment),
                                   texture.ID, level);
    afterCommand(fnName);
}

// Calls glNamedFramebufferTextureFaceEXT().
void EXTDirectStateAccessAPI::namedFramebufferTextureFace(FrameBufferName framebuffer,
                                                          FramebufferAttachment attachment,
                                                          TextureName texture,
                                                          GLint level,
                                                          TextureTarget face) const
{
    static const char *fnName = "glNamedFramebufferTextureFaceEXT";

    beforeCommand(fnName, _api.glNamedFramebufferTextureFace);
    _api.glNamedFramebufferTextureFace(framebuffer.ID, toScalar(attachment),
                                       texture.ID, level, toScalar(face));
    afterCommand(fnName);
}

// Calls glNamedFramebufferTextureLayerEXT().
void EXTDirectStateAccessAPI::namedFramebufferTextureLayer(FrameBufferName framebuffer,
                                                           FramebufferAttachment attachment,
                                                           TextureName texture,
                                                           GLint level,
                                                           GLint layer) const
{
    static const char *fnName = "glNamedFramebufferTextureLayerEXT";

    beforeCommand(fnName, _api.glNamedFramebufferTextureLayer);
    _api.glNamedFramebufferTextureLayer(framebuffer.ID, toScalar(attachment),
                                        texture.ID, level, layer);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameter4dEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameter4D(ProgramName program,
                                                           ProgramTarget target,
                                                           GLuint index,
                                                           GLdouble x,
                                                           GLdouble y,
                                                           GLdouble z,
                                                           GLdouble w) const
{
    static const char *fnName = "glNamedProgramLocalParameter4dEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameter4d);
    _api.glNamedProgramLocalParameter4d(program.ID, toScalar(target), index, x,
                                        y, z, w);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameter4dvEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameter4DV(ProgramName program,
                                                            ProgramTarget target,
                                                            GLuint index,
                                                            const GLdouble *params) const
{
    static const char *fnName = "glNamedProgramLocalParameter4dvEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameter4dv);
    _api.glNamedProgramLocalParameter4dv(program.ID, toScalar(target), index,
                                         params);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameter4fEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameter4F(ProgramName program,
                                                           ProgramTarget target,
                                                           GLuint index,
                                                           GLfloat x, GLfloat y,
                                                           GLfloat z, GLfloat w) const
{
    static const char *fnName = "glNamedProgramLocalParameter4fEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameter4f);
    _api.glNamedProgramLocalParameter4f(program.ID, toScalar(target), index, x,
                                        y, z, w);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameter4fvEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameter4FV(ProgramName program,
                                                            ProgramTarget target,
                                                            GLuint index,
                                                            const GLfloat *params) const
{
    static const char *fnName = "glNamedProgramLocalParameter4fvEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameter4fv);
    _api.glNamedProgramLocalParameter4fv(program.ID, toScalar(target), index,
                                         params);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameterI4iEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameterI4I(ProgramName program,
                                                            ProgramTarget target,
                                                            GLuint index,
                                                            GLint x, GLint y,
                                                            GLint z, GLint w) const
{
    static const char *fnName = "glNamedProgramLocalParameterI4iEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameterI4i);
    _api.glNamedProgramLocalParameterI4i(program.ID, toScalar(target), index, x,
                                         y, z, w);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameterI4ivEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameterI4IV(ProgramName program,
                                                             ProgramTarget target,
                                                             GLuint index,
                                                             const GLint *params) const
{
    static const char *fnName = "glNamedProgramLocalParameterI4ivEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameterI4iv);
    _api.glNamedProgramLocalParameterI4iv(program.ID, toScalar(target), index,
                                          params);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameterI4uiEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameterI4UI(ProgramName program,
                                                             ProgramTarget target,
                                                             GLuint index,
                                                             GLuint x, GLuint y,
                                                             GLuint z, GLuint w) const
{
    static const char *fnName = "glNamedProgramLocalParameterI4uiEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameterI4ui);
    _api.glNamedProgramLocalParameterI4ui(program.ID, toScalar(target), index, x,
                                          y, z, w);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameterI4uivEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameterI4UIV(ProgramName program,
                                                              ProgramTarget target,
                                                              GLuint index,
                                                              const GLuint *params) const
{
    static const char *fnName = "glNamedProgramLocalParameterI4uivEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameterI4uiv);
    _api.glNamedProgramLocalParameterI4uiv(program.ID, toScalar(target), index,
                                           params);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParameters4fvEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParameters4FV(ProgramName program,
                                                             ProgramTarget target,
                                                             GLuint index,
                                                             GLsizei count,
                                                             const GLfloat *params) const
{
    static const char *fnName = "glNamedProgramLocalParameters4fvEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParameters4fv);
    _api.glNamedProgramLocalParameters4fv(program.ID, toScalar(target), index,
                                          count, params);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParametersI4ivEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParametersI4IV(ProgramName program,
                                                              ProgramTarget target,
                                                              GLuint index,
                                                              GLsizei count,
                                                              const GLint *params) const
{
    static const char *fnName = "glNamedProgramLocalParametersI4ivEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParametersI4iv);
    _api.glNamedProgramLocalParametersI4iv(program.ID, toScalar(target), index,
                                           count, params);
    afterCommand(fnName);
}

// Calls glNamedProgramLocalParametersI4uivEXT().
void EXTDirectStateAccessAPI::namedProgramLocalParametersI4UIV(ProgramName program,
                                                               ProgramTarget target,
                                                               GLuint index,
                                                               GLsizei count,
                                                               const GLuint *params) const
{
    static const char *fnName = "glNamedProgramLocalParametersI4uivEXT";

    beforeCommand(fnName, _api.glNamedProgramLocalParametersI4uiv);
    _api.glNamedProgramLocalParametersI4uiv(program.ID, toScalar(target), index,
                                            count, params);
    afterCommand(fnName);
}

// Calls glNamedProgramStringEXT().
void EXTDirectStateAccessAPI::namedProgramString(ProgramName program,
                                                 ProgramTarget target,
                                                 ProgramFormat format,
                                                 GLsizei len, const void *string) const
{
    static const char *fnName = "glNamedProgramStringEXT";

    beforeCommand(fnName, _api.glNamedProgramString);
    _api.glNamedProgramString(program.ID, toScalar(target), toScalar(format),
                              len, string);
    afterCommand(fnName);
}

// Calls glNamedRenderbufferStorageEXT().
void EXTDirectStateAccessAPI::namedRenderbufferStorage(RenderBufferName renderbuffer,
                                                       InternalFormat internalformat,
                                                       GLsizei width,
                                                       GLsizei height) const
{
    static const char *fnName = "glNamedRenderbufferStorageEXT";

    beforeCommand(fnName, _api.glNamedRenderbufferStorage);
    _api.glNamedRenderbufferStorage(renderbuffer.ID, toScalar(internalformat),
                                    width, height);
    afterCommand(fnName);
}

// Calls glNamedRenderbufferStorageMultisampleCoverageEXT().
void EXTDirectStateAccessAPI::namedRenderbufferStorageMultisampleCoverage(RenderBufferName renderbuffer,
                                                                          GLsizei coverageSamples,
                                                                          GLsizei colorSamples,
                                                                          InternalFormat internalformat,
                                                                          GLsizei width,
                                                                          GLsizei height) const
{
    static const char *fnName = "glNamedRenderbufferStorageMultisampleCoverageEXT";

    beforeCommand(fnName, _api.glNamedRenderbufferStorageMultisampleCoverage);
    _api.glNamedRenderbufferStorageMultisampleCoverage(renderbuffer.ID,
                                                       coverageSamples,
                                                       colorSamples,
                                                       toScalar(internalformat),
                                                       width, height);
    afterCommand(fnName);
}

// Calls glNamedRenderbufferStorageMultisampleEXT().
void EXTDirectStateAccessAPI::namedRenderbufferStorageMultisample(RenderBufferName renderbuffer,
                                                                  GLsizei samples,
                                                                  InternalFormat internalformat,
                                                                  GLsizei width,
                                                                  GLsizei height) const
{
    static const char *fnName = "glNamedRenderbufferStorageMultisampleEXT";

    beforeCommand(fnName, _api.glNamedRenderbufferStorageMultisample);
    _api.glNamedRenderbufferStorageMultisample(renderbuffer.ID, samples,
                                               toScalar(internalformat), width,
                                               height);
    afterCommand(fnName);
}

// Calls glProgramUniform1dEXT().
void EXTDirectStateAccessAPI::programUniform1D(ProgramName program,
                                               GLint location, GLdouble x) const
{
    static const char *fnName = "glProgramUniform1dEXT";

    beforeCommand(fnName, _api.glProgramUniform1d);
    _api.glProgramUniform1d(program.ID, location, x);
    afterCommand(fnName);
}

// Calls glProgramUniform1dvEXT().
void EXTDirectStateAccessAPI::programUniform1DV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLdouble *value) const
{
    static const char *fnName = "glProgramUniform1dvEXT";

    beforeCommand(fnName, _api.glProgramUniform1dv);
    _api.glProgramUniform1dv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform1fEXT().
void EXTDirectStateAccessAPI::programUniform1F(ProgramName program,
                                               GLint location, GLfloat v0) const
{
    static const char *fnName = "glProgramUniform1fEXT";

    beforeCommand(fnName, _api.glProgramUniform1f);
    _api.glProgramUniform1f(program.ID, location, v0);
    afterCommand(fnName);
}

// Calls glProgramUniform1fvEXT().
void EXTDirectStateAccessAPI::programUniform1FV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLfloat *value) const
{
    static const char *fnName = "glProgramUniform1fvEXT";

    beforeCommand(fnName, _api.glProgramUniform1fv);
    _api.glProgramUniform1fv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform1iEXT().
void EXTDirectStateAccessAPI::programUniform1I(ProgramName program,
                                               GLint location, GLint v0) const
{
    static const char *fnName = "glProgramUniform1iEXT";

    beforeCommand(fnName, _api.glProgramUniform1i);
    _api.glProgramUniform1i(program.ID, location, v0);
    afterCommand(fnName);
}

// Calls glProgramUniform1ivEXT().
void EXTDirectStateAccessAPI::programUniform1IV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLint *value) const
{
    static const char *fnName = "glProgramUniform1ivEXT";

    beforeCommand(fnName, _api.glProgramUniform1iv);
    _api.glProgramUniform1iv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform1uiEXT().
void EXTDirectStateAccessAPI::programUniform1UI(ProgramName program,
                                                GLint location, GLuint v0) const
{
    static const char *fnName = "glProgramUniform1uiEXT";

    beforeCommand(fnName, _api.glProgramUniform1ui);
    _api.glProgramUniform1ui(program.ID, location, v0);
    afterCommand(fnName);
}

// Calls glProgramUniform1uivEXT().
void EXTDirectStateAccessAPI::programUniform1UIV(ProgramName program,
                                                 GLint location, GLsizei count,
                                                 const GLuint *value) const
{
    static const char *fnName = "glProgramUniform1uivEXT";

    beforeCommand(fnName, _api.glProgramUniform1uiv);
    _api.glProgramUniform1uiv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2dEXT().
void EXTDirectStateAccessAPI::programUniform2D(ProgramName program,
                                               GLint location, GLdouble x,
                                               GLdouble y) const
{
    static const char *fnName = "glProgramUniform2dEXT";

    beforeCommand(fnName, _api.glProgramUniform2d);
    _api.glProgramUniform2d(program.ID, location, x, y);
    afterCommand(fnName);
}

// Calls glProgramUniform2dvEXT().
void EXTDirectStateAccessAPI::programUniform2DV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLdouble *value) const
{
    static const char *fnName = "glProgramUniform2dvEXT";

    beforeCommand(fnName, _api.glProgramUniform2dv);
    _api.glProgramUniform2dv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2fEXT().
void EXTDirectStateAccessAPI::programUniform2F(ProgramName program,
                                               GLint location, GLfloat v0,
                                               GLfloat v1) const
{
    static const char *fnName = "glProgramUniform2fEXT";

    beforeCommand(fnName, _api.glProgramUniform2f);
    _api.glProgramUniform2f(program.ID, location, v0, v1);
    afterCommand(fnName);
}

// Calls glProgramUniform2fvEXT().
void EXTDirectStateAccessAPI::programUniform2FV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLfloat *value) const
{
    static const char *fnName = "glProgramUniform2fvEXT";

    beforeCommand(fnName, _api.glProgramUniform2fv);
    _api.glProgramUniform2fv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2iEXT().
void EXTDirectStateAccessAPI::programUniform2I(ProgramName program,
                                               GLint location, GLint v0,
                                               GLint v1) const
{
    static const char *fnName = "glProgramUniform2iEXT";

    beforeCommand(fnName, _api.glProgramUniform2i);
    _api.glProgramUniform2i(program.ID, location, v0, v1);
    afterCommand(fnName);
}

// Calls glProgramUniform2ivEXT().
void EXTDirectStateAccessAPI::programUniform2IV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLint *value) const
{
    static const char *fnName = "glProgramUniform2ivEXT";

    beforeCommand(fnName, _api.glProgramUniform2iv);
    _api.glProgramUniform2iv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform2uiEXT().
void EXTDirectStateAccessAPI::programUniform2UI(ProgramName program,
                                                GLint location, GLuint v0,
                                                GLuint v1) const
{
    static const char *fnName = "glProgramUniform2uiEXT";

    beforeCommand(fnName, _api.glProgramUniform2ui);
    _api.glProgramUniform2ui(program.ID, location, v0, v1);
    afterCommand(fnName);
}

// Calls glProgramUniform2uivEXT().
void EXTDirectStateAccessAPI::programUniform2UIV(ProgramName program,
                                                 GLint location, GLsizei count,
                                                 const GLuint *value) const
{
    static const char *fnName = "glProgramUniform2uivEXT";

    beforeCommand(fnName, _api.glProgramUniform2uiv);
    _api.glProgramUniform2uiv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3dEXT().
void EXTDirectStateAccessAPI::programUniform3D(ProgramName program,
                                               GLint location, GLdouble x,
                                               GLdouble y, GLdouble z) const
{
    static const char *fnName = "glProgramUniform3dEXT";

    beforeCommand(fnName, _api.glProgramUniform3d);
    _api.glProgramUniform3d(program.ID, location, x, y, z);
    afterCommand(fnName);
}

// Calls glProgramUniform3dvEXT().
void EXTDirectStateAccessAPI::programUniform3DV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLdouble *value) const
{
    static const char *fnName = "glProgramUniform3dvEXT";

    beforeCommand(fnName, _api.glProgramUniform3dv);
    _api.glProgramUniform3dv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3fEXT().
void EXTDirectStateAccessAPI::programUniform3F(ProgramName program,
                                               GLint location, GLfloat v0,
                                               GLfloat v1, GLfloat v2) const
{
    static const char *fnName = "glProgramUniform3fEXT";

    beforeCommand(fnName, _api.glProgramUniform3f);
    _api.glProgramUniform3f(program.ID, location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glProgramUniform3fvEXT().
void EXTDirectStateAccessAPI::programUniform3FV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLfloat *value) const
{
    static const char *fnName = "glProgramUniform3fvEXT";

    beforeCommand(fnName, _api.glProgramUniform3fv);
    _api.glProgramUniform3fv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3iEXT().
void EXTDirectStateAccessAPI::programUniform3I(ProgramName program,
                                               GLint location, GLint v0,
                                               GLint v1, GLint v2) const
{
    static const char *fnName = "glProgramUniform3iEXT";

    beforeCommand(fnName, _api.glProgramUniform3i);
    _api.glProgramUniform3i(program.ID, location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glProgramUniform3ivEXT().
void EXTDirectStateAccessAPI::programUniform3IV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLint *value) const
{
    static const char *fnName = "glProgramUniform3ivEXT";

    beforeCommand(fnName, _api.glProgramUniform3iv);
    _api.glProgramUniform3iv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform3uiEXT().
void EXTDirectStateAccessAPI::programUniform3UI(ProgramName program,
                                                GLint location, GLuint v0,
                                                GLuint v1, GLuint v2) const
{
    static const char *fnName = "glProgramUniform3uiEXT";

    beforeCommand(fnName, _api.glProgramUniform3ui);
    _api.glProgramUniform3ui(program.ID, location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glProgramUniform3uivEXT().
void EXTDirectStateAccessAPI::programUniform3UIV(ProgramName program,
                                                 GLint location, GLsizei count,
                                                 const GLuint *value) const
{
    static const char *fnName = "glProgramUniform3uivEXT";

    beforeCommand(fnName, _api.glProgramUniform3uiv);
    _api.glProgramUniform3uiv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4dEXT().
void EXTDirectStateAccessAPI::programUniform4D(ProgramName program,
                                               GLint location, GLdouble x,
                                               GLdouble y, GLdouble z,
                                               GLdouble w) const
{
    static const char *fnName = "glProgramUniform4dEXT";

    beforeCommand(fnName, _api.glProgramUniform4d);
    _api.glProgramUniform4d(program.ID, location, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramUniform4dvEXT().
void EXTDirectStateAccessAPI::programUniform4DV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLdouble *value) const
{
    static const char *fnName = "glProgramUniform4dvEXT";

    beforeCommand(fnName, _api.glProgramUniform4dv);
    _api.glProgramUniform4dv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4fEXT().
void EXTDirectStateAccessAPI::programUniform4F(ProgramName program,
                                               GLint location, GLfloat v0,
                                               GLfloat v1, GLfloat v2,
                                               GLfloat v3) const
{
    static const char *fnName = "glProgramUniform4fEXT";

    beforeCommand(fnName, _api.glProgramUniform4f);
    _api.glProgramUniform4f(program.ID, location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glProgramUniform4fvEXT().
void EXTDirectStateAccessAPI::programUniform4FV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLfloat *value) const
{
    static const char *fnName = "glProgramUniform4fvEXT";

    beforeCommand(fnName, _api.glProgramUniform4fv);
    _api.glProgramUniform4fv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4iEXT().
void EXTDirectStateAccessAPI::programUniform4I(ProgramName program,
                                               GLint location, GLint v0,
                                               GLint v1, GLint v2, GLint v3) const
{
    static const char *fnName = "glProgramUniform4iEXT";

    beforeCommand(fnName, _api.glProgramUniform4i);
    _api.glProgramUniform4i(program.ID, location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glProgramUniform4ivEXT().
void EXTDirectStateAccessAPI::programUniform4IV(ProgramName program,
                                                GLint location, GLsizei count,
                                                const GLint *value) const
{
    static const char *fnName = "glProgramUniform4ivEXT";

    beforeCommand(fnName, _api.glProgramUniform4iv);
    _api.glProgramUniform4iv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniform4uiEXT().
void EXTDirectStateAccessAPI::programUniform4UI(ProgramName program,
                                                GLint location, GLuint v0,
                                                GLuint v1, GLuint v2, GLuint v3) const
{
    static const char *fnName = "glProgramUniform4uiEXT";

    beforeCommand(fnName, _api.glProgramUniform4ui);
    _api.glProgramUniform4ui(program.ID, location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glProgramUniform4uivEXT().
void EXTDirectStateAccessAPI::programUniform4UIV(ProgramName program,
                                                 GLint location, GLsizei count,
                                                 const GLuint *value) const
{
    static const char *fnName = "glProgramUniform4uivEXT";

    beforeCommand(fnName, _api.glProgramUniform4uiv);
    _api.glProgramUniform4uiv(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix2DV(ProgramName program,
                                                      GLint location,
                                                      GLsizei count,
                                                      Boolean transpose,
                                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix2dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix2dv);
    _api.glProgramUniformMatrix2dv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix2FV(ProgramName program,
                                                      GLint location,
                                                      GLsizei count,
                                                      Boolean transpose,
                                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix2fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix2fv);
    _api.glProgramUniformMatrix2fv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2x3dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix2x3DV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix2x3dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix2x3dv);
    _api.glProgramUniformMatrix2x3dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2x3fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix2x3FV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix2x3fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix2x3fv);
    _api.glProgramUniformMatrix2x3fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2x4dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix2x4DV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix2x4dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix2x4dv);
    _api.glProgramUniformMatrix2x4dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix2x4fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix2x4FV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix2x4fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix2x4fv);
    _api.glProgramUniformMatrix2x4fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix3DV(ProgramName program,
                                                      GLint location,
                                                      GLsizei count,
                                                      Boolean transpose,
                                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix3dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix3dv);
    _api.glProgramUniformMatrix3dv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix3FV(ProgramName program,
                                                      GLint location,
                                                      GLsizei count,
                                                      Boolean transpose,
                                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix3fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix3fv);
    _api.glProgramUniformMatrix3fv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3x2dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix3x2DV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix3x2dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix3x2dv);
    _api.glProgramUniformMatrix3x2dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3x2fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix3x2FV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix3x2fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix3x2fv);
    _api.glProgramUniformMatrix3x2fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3x4dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix3x4DV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix3x4dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix3x4dv);
    _api.glProgramUniformMatrix3x4dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix3x4fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix3x4FV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix3x4fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix3x4fv);
    _api.glProgramUniformMatrix3x4fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix4DV(ProgramName program,
                                                      GLint location,
                                                      GLsizei count,
                                                      Boolean transpose,
                                                      const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix4dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix4dv);
    _api.glProgramUniformMatrix4dv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix4FV(ProgramName program,
                                                      GLint location,
                                                      GLsizei count,
                                                      Boolean transpose,
                                                      const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix4fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix4fv);
    _api.glProgramUniformMatrix4fv(program.ID, location, count,
                                   toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4x2dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix4x2DV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix4x2dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix4x2dv);
    _api.glProgramUniformMatrix4x2dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4x2fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix4x2FV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix4x2fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix4x2fv);
    _api.glProgramUniformMatrix4x2fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4x3dvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix4x3DV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLdouble *value) const
{
    static const char *fnName = "glProgramUniformMatrix4x3dvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix4x3dv);
    _api.glProgramUniformMatrix4x3dv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glProgramUniformMatrix4x3fvEXT().
void EXTDirectStateAccessAPI::programUniformMatrix4x3FV(ProgramName program,
                                                        GLint location,
                                                        GLsizei count,
                                                        Boolean transpose,
                                                        const GLfloat *value) const
{
    static const char *fnName = "glProgramUniformMatrix4x3fvEXT";

    beforeCommand(fnName, _api.glProgramUniformMatrix4x3fv);
    _api.glProgramUniformMatrix4x3fv(program.ID, location, count,
                                     toScalar(transpose), value);
    afterCommand(fnName);
}

// Calls glPushClientAttribDefaultEXT().
void EXTDirectStateAccessAPI::pushClientAttribDefault(GLbitfield mask) const
{
    static const char *fnName = "glPushClientAttribDefaultEXT";

    beforeCommand(fnName, _api.glPushClientAttribDefault);
    _api.glPushClientAttribDefault(mask);
    afterCommand(fnName);
}

// Calls glTextureBufferEXT().
void EXTDirectStateAccessAPI::textureBuffer(TextureName texture,
                                            TextureTarget target,
                                            SizedInternalFormat internalformat,
                                            BufferName buffer) const
{
    static const char *fnName = "glTextureBufferEXT";

    beforeCommand(fnName, _api.glTextureBuffer);
    _api.glTextureBuffer(texture.ID, toScalar(target), toScalar(internalformat),
                         buffer.ID);
    afterCommand(fnName);
}

// Calls glTextureBufferRangeEXT().
void EXTDirectStateAccessAPI::textureBufferRange(TextureName texture,
                                                 TextureTarget target,
                                                 SizedInternalFormat internalformat,
                                                 BufferName buffer,
                                                 GLintptr offset,
                                                 GLsizeiptr size) const
{
    static const char *fnName = "glTextureBufferRangeEXT";

    beforeCommand(fnName, _api.glTextureBufferRange);
    _api.glTextureBufferRange(texture.ID, toScalar(target),
                              toScalar(internalformat), buffer.ID, offset, size);
    afterCommand(fnName);
}

// Calls glTextureImage1DEXT().
void EXTDirectStateAccessAPI::textureImage1D(TextureName texture,
                                             TextureTarget target, GLint level,
                                             InternalFormat internalformat,
                                             GLsizei width, GLint border,
                                             PixelFormat format, PixelType type,
                                             const void *pixels) const
{
    static const char *fnName = "glTextureImage1DEXT";

    beforeCommand(fnName, _api.glTextureImage1D);
    _api.glTextureImage1D(texture.ID, toScalar(target), level,
                          toScalar(internalformat), width, border,
                          toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTextureImage2DEXT().
void EXTDirectStateAccessAPI::textureImage2D(TextureName texture,
                                             TextureTarget target, GLint level,
                                             InternalFormat internalformat,
                                             GLsizei width, GLsizei height,
                                             GLint border, PixelFormat format,
                                             PixelType type, const void *pixels) const
{
    static const char *fnName = "glTextureImage2DEXT";

    beforeCommand(fnName, _api.glTextureImage2D);
    _api.glTextureImage2D(texture.ID, toScalar(target), level,
                          toScalar(internalformat), width, height, border,
                          toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTextureImage3DEXT().
void EXTDirectStateAccessAPI::textureImage3D(TextureName texture,
                                             TextureTarget target, GLint level,
                                             InternalFormat internalformat,
                                             GLsizei width, GLsizei height,
                                             GLsizei depth, GLint border,
                                             PixelFormat format, PixelType type,
                                             const void *pixels) const
{
    static const char *fnName = "glTextureImage3DEXT";

    beforeCommand(fnName, _api.glTextureImage3D);
    _api.glTextureImage3D(texture.ID, toScalar(target), level,
                          toScalar(internalformat), width, height, depth, border,
                          toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTexturePageCommitmentEXT().
void EXTDirectStateAccessAPI::texturePageCommitment(TextureName texture,
                                                    GLint level, GLint xoffset,
                                                    GLint yoffset, GLint zoffset,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLsizei depth,
                                                    Boolean commit) const
{
    static const char *fnName = "glTexturePageCommitmentEXT";

    beforeCommand(fnName, _api.glTexturePageCommitment);
    _api.glTexturePageCommitment(texture.ID, level, xoffset, yoffset, zoffset,
                                 width, height, depth, toScalar(commit));
    afterCommand(fnName);
}

// Calls glTextureParameterIivEXT().
void EXTDirectStateAccessAPI::textureParameterIIV(TextureName texture,
                                                  TextureTarget target,
                                                  TextureParameterName pname,
                                                  const GLint *params) const
{
    static const char *fnName = "glTextureParameterIivEXT";

    beforeCommand(fnName, _api.glTextureParameterIiv);
    _api.glTextureParameterIiv(texture.ID, toScalar(target), toScalar(pname),
                               params);
    afterCommand(fnName);
}

// Calls glTextureParameterIuivEXT().
void EXTDirectStateAccessAPI::textureParameterIUIV(TextureName texture,
                                                   TextureTarget target,
                                                   TextureParameterName pname,
                                                   const GLuint *params) const
{
    static const char *fnName = "glTextureParameterIuivEXT";

    beforeCommand(fnName, _api.glTextureParameterIuiv);
    _api.glTextureParameterIuiv(texture.ID, toScalar(target), toScalar(pname),
                                params);
    afterCommand(fnName);
}

// Calls glTextureParameterfEXT().
void EXTDirectStateAccessAPI::textureParameterF(TextureName texture,
                                                TextureTarget target,
                                                TextureParameterName pname,
                                                GLfloat param) const
{
    static const char *fnName = "glTextureParameterfEXT";

    beforeCommand(fnName, _api.glTextureParameterf);
    _api.glTextureParameterf(texture.ID, toScalar(target), toScalar(pname),
                             param);
    afterCommand(fnName);
}

// Calls glTextureParameterfvEXT().
void EXTDirectStateAccessAPI::textureParameterFV(TextureName texture,
                                                 TextureTarget target,
                                                 TextureParameterName pname,
                                                 const GLfloat *params) const
{
    static const char *fnName = "glTextureParameterfvEXT";

    beforeCommand(fnName, _api.glTextureParameterfv);
    _api.glTextureParameterfv(texture.ID, toScalar(target), toScalar(pname),
                              params);
    afterCommand(fnName);
}

// Calls glTextureParameteriEXT().
void EXTDirectStateAccessAPI::textureParameterI(TextureName texture,
                                                TextureTarget target,
                                                TextureParameterName pname,
                                                GLint param) const
{
    static const char *fnName = "glTextureParameteriEXT";

    beforeCommand(fnName, _api.glTextureParameteri);
    _api.glTextureParameteri(texture.ID, toScalar(target), toScalar(pname),
                             param);
    afterCommand(fnName);
}

// Calls glTextureParameterivEXT().
void EXTDirectStateAccessAPI::textureParameterIV(TextureName texture,
                                                 TextureTarget target,
                                                 TextureParameterName pname,
                                                 const GLint *params) const
{
    static const char *fnName = "glTextureParameterivEXT";

    beforeCommand(fnName, _api.glTextureParameteriv);
    _api.glTextureParameteriv(texture.ID, toScalar(target), toScalar(pname),
                              params);
    afterCommand(fnName);
}

// Calls glTextureRenderbufferEXT().
void EXTDirectStateAccessAPI::textureRenderbuffer(TextureName texture,
                                                  TextureTarget target,
                                                  RenderBufferName renderbuffer) const
{
    static const char *fnName = "glTextureRenderbufferEXT";

    beforeCommand(fnName, _api.glTextureRenderbuffer);
    _api.glTextureRenderbuffer(texture.ID, toScalar(target), renderbuffer.ID);
    afterCommand(fnName);
}

// Calls glTextureStorage1DEXT().
void EXTDirectStateAccessAPI::textureStorage1D(TextureName texture,
                                               GLenum target, GLsizei levels,
                                               SizedInternalFormat internalformat,
                                               GLsizei width) const
{
    static const char *fnName = "glTextureStorage1DEXT";

    beforeCommand(fnName, _api.glTextureStorage1D);
    _api.glTextureStorage1D(texture.ID, target, levels, toScalar(internalformat),
                            width);
    afterCommand(fnName);
}

// Calls glTextureStorage2DEXT().
void EXTDirectStateAccessAPI::textureStorage2D(TextureName texture,
                                               GLenum target, GLsizei levels,
                                               SizedInternalFormat internalformat,
                                               GLsizei width, GLsizei height) const
{
    static const char *fnName = "glTextureStorage2DEXT";

    beforeCommand(fnName, _api.glTextureStorage2D);
    _api.glTextureStorage2D(texture.ID, target, levels, toScalar(internalformat),
                            width, height);
    afterCommand(fnName);
}

// Calls glTextureStorage2DMultisampleEXT().
void EXTDirectStateAccessAPI::textureStorage2DMultisample(TextureName texture,
                                                          TextureTarget target,
                                                          GLsizei samples,
                                                          SizedInternalFormat internalformat,
                                                          GLsizei width,
                                                          GLsizei height,
                                                          Boolean fixedsamplelocations) const
{
    static const char *fnName = "glTextureStorage2DMultisampleEXT";

    beforeCommand(fnName, _api.glTextureStorage2DMultisample);
    _api.glTextureStorage2DMultisample(texture.ID, toScalar(target), samples,
                                       toScalar(internalformat), width, height,
                                       toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

// Calls glTextureStorage3DEXT().
void EXTDirectStateAccessAPI::textureStorage3D(TextureName texture,
                                               GLenum target, GLsizei levels,
                                               SizedInternalFormat internalformat,
                                               GLsizei width, GLsizei height,
                                               GLsizei depth) const
{
    static const char *fnName = "glTextureStorage3DEXT";

    beforeCommand(fnName, _api.glTextureStorage3D);
    _api.glTextureStorage3D(texture.ID, target, levels, toScalar(internalformat),
                            width, height, depth);
    afterCommand(fnName);
}

// Calls glTextureStorage3DMultisampleEXT().
void EXTDirectStateAccessAPI::textureStorage3DMultisample(TextureName texture,
                                                          GLenum target,
                                                          GLsizei samples,
                                                          SizedInternalFormat internalformat,
                                                          GLsizei width,
                                                          GLsizei height,
                                                          GLsizei depth,
                                                          Boolean fixedsamplelocations) const
{
    static const char *fnName = "glTextureStorage3DMultisampleEXT";

    beforeCommand(fnName, _api.glTextureStorage3DMultisample);
    _api.glTextureStorage3DMultisample(texture.ID, target, samples,
                                       toScalar(internalformat), width, height,
                                       depth, toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

// Calls glTextureSubImage1DEXT().
void EXTDirectStateAccessAPI::textureSubImage1D(TextureName texture,
                                                TextureTarget target,
                                                GLint level, GLint xoffset,
                                                GLsizei width,
                                                PixelFormat format,
                                                PixelType type,
                                                const void *pixels) const
{
    static const char *fnName = "glTextureSubImage1DEXT";

    beforeCommand(fnName, _api.glTextureSubImage1D);
    _api.glTextureSubImage1D(texture.ID, toScalar(target), level, xoffset, width,
                             toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTextureSubImage2DEXT().
void EXTDirectStateAccessAPI::textureSubImage2D(TextureName texture,
                                                TextureTarget target,
                                                GLint level, GLint xoffset,
                                                GLint yoffset, GLsizei width,
                                                GLsizei height,
                                                PixelFormat format,
                                                PixelType type,
                                                const void *pixels) const
{
    static const char *fnName = "glTextureSubImage2DEXT";

    beforeCommand(fnName, _api.glTextureSubImage2D);
    _api.glTextureSubImage2D(texture.ID, toScalar(target), level, xoffset,
                             yoffset, width, height, toScalar(format),
                             toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTextureSubImage3DEXT().
void EXTDirectStateAccessAPI::textureSubImage3D(TextureName texture,
                                                TextureTarget target,
                                                GLint level, GLint xoffset,
                                                GLint yoffset, GLint zoffset,
                                                GLsizei width, GLsizei height,
                                                GLsizei depth,
                                                PixelFormat format,
                                                PixelType type,
                                                const void *pixels) const
{
    static const char *fnName = "glTextureSubImage3DEXT";

    beforeCommand(fnName, _api.glTextureSubImage3D);
    _api.glTextureSubImage3D(texture.ID, toScalar(target), level, xoffset,
                             yoffset, zoffset, width, height, depth,
                             toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glUnmapNamedBufferEXT().
Boolean EXTDirectStateAccessAPI::unmapNamedBuffer(BufferName buffer) const
{
    static const char *fnName = "glUnmapNamedBufferEXT";

    beforeCommand(fnName, _api.glUnmapNamedBuffer);
    GLboolean result = _api.glUnmapNamedBuffer(buffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glVertexArrayBindVertexBufferEXT().
void EXTDirectStateAccessAPI::vertexArrayBindVertexBuffer(VertexArrayName vaobj,
                                                          GLuint bindingindex,
                                                          BufferName buffer,
                                                          GLintptr offset,
                                                          GLsizei stride) const
{
    static const char *fnName = "glVertexArrayBindVertexBufferEXT";

    beforeCommand(fnName, _api.glVertexArrayBindVertexBuffer);
    _api.glVertexArrayBindVertexBuffer(vaobj.ID, bindingindex, buffer.ID, offset,
                                       stride);
    afterCommand(fnName);
}

// Calls glVertexArrayColorOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayColorOffset(VertexArrayName vaobj,
                                                     BufferName buffer,
                                                     GLint size,
                                                     ColorPointerType type,
                                                     GLsizei stride,
                                                     GLintptr offset) const
{
    static const char *fnName = "glVertexArrayColorOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayColorOffset);
    _api.glVertexArrayColorOffset(vaobj.ID, buffer.ID, size, toScalar(type),
                                  stride, offset);
    afterCommand(fnName);
}

// Calls glVertexArrayEdgeFlagOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayEdgeFlagOffset(VertexArrayName vaobj,
                                                        BufferName buffer,
                                                        GLsizei stride,
                                                        GLintptr offset) const
{
    static const char *fnName = "glVertexArrayEdgeFlagOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayEdgeFlagOffset);
    _api.glVertexArrayEdgeFlagOffset(vaobj.ID, buffer.ID, stride, offset);
    afterCommand(fnName);
}

// Calls glVertexArrayFogCoordOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayFogCoordOffset(VertexArrayName vaobj,
                                                        BufferName buffer,
                                                        FogCoordinatePointerType type,
                                                        GLsizei stride,
                                                        GLintptr offset) const
{
    static const char *fnName = "glVertexArrayFogCoordOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayFogCoordOffset);
    _api.glVertexArrayFogCoordOffset(vaobj.ID, buffer.ID, toScalar(type), stride,
                                     offset);
    afterCommand(fnName);
}

// Calls glVertexArrayIndexOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayIndexOffset(VertexArrayName vaobj,
                                                     BufferName buffer,
                                                     IndexPointerType type,
                                                     GLsizei stride,
                                                     GLintptr offset) const
{
    static const char *fnName = "glVertexArrayIndexOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayIndexOffset);
    _api.glVertexArrayIndexOffset(vaobj.ID, buffer.ID, toScalar(type), stride,
                                  offset);
    afterCommand(fnName);
}

// Calls glVertexArrayMultiTexCoordOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayMultiTexCoordOffset(VertexArrayName vaobj,
                                                             BufferName buffer,
                                                             GLenum texunit,
                                                             GLint size,
                                                             TexCoordPointerType type,
                                                             GLsizei stride,
                                                             GLintptr offset) const
{
    static const char *fnName = "glVertexArrayMultiTexCoordOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayMultiTexCoordOffset);
    _api.glVertexArrayMultiTexCoordOffset(vaobj.ID, buffer.ID, texunit, size,
                                          toScalar(type), stride, offset);
    afterCommand(fnName);
}

// Calls glVertexArrayNormalOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayNormalOffset(VertexArrayName vaobj,
                                                      BufferName buffer,
                                                      NormalPointerType type,
                                                      GLsizei stride,
                                                      GLintptr offset) const
{
    static const char *fnName = "glVertexArrayNormalOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayNormalOffset);
    _api.glVertexArrayNormalOffset(vaobj.ID, buffer.ID, toScalar(type), stride,
                                   offset);
    afterCommand(fnName);
}

// Calls glVertexArraySecondaryColorOffsetEXT().
void EXTDirectStateAccessAPI::vertexArraySecondaryColorOffset(VertexArrayName vaobj,
                                                              BufferName buffer,
                                                              GLint size,
                                                              ColorPointerType type,
                                                              GLsizei stride,
                                                              GLintptr offset) const
{
    static const char *fnName = "glVertexArraySecondaryColorOffsetEXT";

    beforeCommand(fnName, _api.glVertexArraySecondaryColorOffset);
    _api.glVertexArraySecondaryColorOffset(vaobj.ID, buffer.ID, size,
                                           toScalar(type), stride, offset);
    afterCommand(fnName);
}

// Calls glVertexArrayTexCoordOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayTexCoordOffset(VertexArrayName vaobj,
                                                        BufferName buffer,
                                                        GLint size,
                                                        TexCoordPointerType type,
                                                        GLsizei stride,
                                                        GLintptr offset) const
{
    static const char *fnName = "glVertexArrayTexCoordOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayTexCoordOffset);
    _api.glVertexArrayTexCoordOffset(vaobj.ID, buffer.ID, size, toScalar(type),
                                     stride, offset);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexAttribBindingEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexAttribBinding(VertexArrayName vaobj,
                                                             GLuint attribindex,
                                                             GLuint bindingindex) const
{
    static const char *fnName = "glVertexArrayVertexAttribBindingEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexAttribBinding);
    _api.glVertexArrayVertexAttribBinding(vaobj.ID, attribindex, bindingindex);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexAttribDivisorEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexAttribDivisor(VertexArrayName vaobj,
                                                             GLuint index,
                                                             GLuint divisor) const
{
    static const char *fnName = "glVertexArrayVertexAttribDivisorEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexAttribDivisor);
    _api.glVertexArrayVertexAttribDivisor(vaobj.ID, index, divisor);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexAttribFormatEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexAttribFormat(VertexArrayName vaobj,
                                                            GLuint attribindex,
                                                            GLint size,
                                                            VertexAttribType type,
                                                            Boolean normalized,
                                                            GLuint relativeoffset) const
{
    static const char *fnName = "glVertexArrayVertexAttribFormatEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexAttribFormat);
    _api.glVertexArrayVertexAttribFormat(vaobj.ID, attribindex, size,
                                         toScalar(type), toScalar(normalized),
                                         relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexAttribIFormatEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexAttribIFormat(VertexArrayName vaobj,
                                                             GLuint attribindex,
                                                             GLint size,
                                                             VertexAttribIType type,
                                                             GLuint relativeoffset) const
{
    static const char *fnName = "glVertexArrayVertexAttribIFormatEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexAttribIFormat);
    _api.glVertexArrayVertexAttribIFormat(vaobj.ID, attribindex, size,
                                          toScalar(type), relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexAttribIOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexAttribIOffset(VertexArrayName vaobj,
                                                             BufferName buffer,
                                                             GLuint index,
                                                             GLint size,
                                                             VertexAttribType type,
                                                             GLsizei stride,
                                                             GLintptr offset) const
{
    static const char *fnName = "glVertexArrayVertexAttribIOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexAttribIOffset);
    _api.glVertexArrayVertexAttribIOffset(vaobj.ID, buffer.ID, index, size,
                                          toScalar(type), stride, offset);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexAttribLFormatEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexAttribLFormat(VertexArrayName vaobj,
                                                             GLuint attribindex,
                                                             GLint size,
                                                             VertexAttribLType type,
                                                             GLuint relativeoffset) const
{
    static const char *fnName = "glVertexArrayVertexAttribLFormatEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexAttribLFormat);
    _api.glVertexArrayVertexAttribLFormat(vaobj.ID, attribindex, size,
                                          toScalar(type), relativeoffset);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexAttribLOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexAttribLOffset(VertexArrayName vaobj,
                                                             BufferName buffer,
                                                             GLuint index,
                                                             GLint size,
                                                             VertexAttribLType type,
                                                             GLsizei stride,
                                                             GLintptr offset) const
{
    static const char *fnName = "glVertexArrayVertexAttribLOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexAttribLOffset);
    _api.glVertexArrayVertexAttribLOffset(vaobj.ID, buffer.ID, index, size,
                                          toScalar(type), stride, offset);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexAttribOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexAttribOffset(VertexArrayName vaobj,
                                                            BufferName buffer,
                                                            GLuint index,
                                                            GLint size,
                                                            VertexAttribPointerType type,
                                                            Boolean normalized,
                                                            GLsizei stride,
                                                            GLintptr offset) const
{
    static const char *fnName = "glVertexArrayVertexAttribOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexAttribOffset);
    _api.glVertexArrayVertexAttribOffset(vaobj.ID, buffer.ID, index, size,
                                         toScalar(type), toScalar(normalized),
                                         stride, offset);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexBindingDivisorEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexBindingDivisor(VertexArrayName vaobj,
                                                              GLuint bindingindex,
                                                              GLuint divisor) const
{
    static const char *fnName = "glVertexArrayVertexBindingDivisorEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexBindingDivisor);
    _api.glVertexArrayVertexBindingDivisor(vaobj.ID, bindingindex, divisor);
    afterCommand(fnName);
}

// Calls glVertexArrayVertexOffsetEXT().
void EXTDirectStateAccessAPI::vertexArrayVertexOffset(VertexArrayName vaobj,
                                                      BufferName buffer,
                                                      GLint size,
                                                      VertexPointerType type,
                                                      GLsizei stride,
                                                      GLintptr offset) const
{
    static const char *fnName = "glVertexArrayVertexOffsetEXT";

    beforeCommand(fnName, _api.glVertexArrayVertexOffset);
    _api.glVertexArrayVertexOffset(vaobj.ID, buffer.ID, size, toScalar(type),
                                   stride, offset);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTDrawBUFFERS2API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_draw_buffers2 extension.
EXTDrawBUFFERS2API::EXTDrawBUFFERS2API() :
    BaseExtension("GL_EXT_draw_buffers2")
{
}

// Grant read-only access to the underlying function pointers.
const EXTDrawBUFFERS2 &EXTDrawBUFFERS2API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_draw_buffers2 entry points.
void EXTDrawBUFFERS2API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glColorMaskIndexedEXT().
void EXTDrawBUFFERS2API::colorMaskIndexed(GLuint index, Boolean r, Boolean g,
                                          Boolean b, Boolean a) const
{
    static const char *fnName = "glColorMaskIndexedEXT";

    beforeCommand(fnName, _api.glColorMaskIndexed);
    _api.glColorMaskIndexed(index, toScalar(r), toScalar(g), toScalar(b),
                            toScalar(a));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTDrawInstancedAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_draw_instanced extension.
EXTDrawInstancedAPI::EXTDrawInstancedAPI() :
    BaseExtension("GL_EXT_draw_instanced")
{
}

// Grant read-only access to the underlying function pointers.
const EXTDrawInstanced &EXTDrawInstancedAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_draw_instanced entry points.
void EXTDrawInstancedAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawArraysInstancedEXT().
void EXTDrawInstancedAPI::drawArraysInstanced(PrimitiveType mode, GLint start,
                                              GLsizei count, GLsizei primcount) const
{
    static const char *fnName = "glDrawArraysInstancedEXT";

    beforeCommand(fnName, _api.glDrawArraysInstanced);
    _api.glDrawArraysInstanced(toScalar(mode), start, count, primcount);
    afterCommand(fnName);
}

// Calls glDrawElementsInstancedEXT().
void EXTDrawInstancedAPI::drawElementsInstanced(PrimitiveType mode,
                                                GLsizei count,
                                                DrawElementsType type,
                                                const void *indices,
                                                GLsizei primcount) const
{
    static const char *fnName = "glDrawElementsInstancedEXT";

    beforeCommand(fnName, _api.glDrawElementsInstanced);
    _api.glDrawElementsInstanced(toScalar(mode), count, toScalar(type), indices,
                                 primcount);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTDrawRangeElementsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_draw_range_elements extension.
EXTDrawRangeElementsAPI::EXTDrawRangeElementsAPI() :
    BaseExtension("GL_EXT_draw_range_elements")
{
}

// Grant read-only access to the underlying function pointers.
const EXTDrawRangeElements &EXTDrawRangeElementsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_draw_range_elements entry points.
void EXTDrawRangeElementsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawRangeElementsEXT().
void EXTDrawRangeElementsAPI::drawRangeElements(PrimitiveType mode, GLuint start,
                                                GLuint end, GLsizei count,
                                                DrawElementsType type,
                                                const void *indices) const
{
    static const char *fnName = "glDrawRangeElementsEXT";

    beforeCommand(fnName, _api.glDrawRangeElements);
    _api.glDrawRangeElements(toScalar(mode), start, end, count, toScalar(type),
                             indices);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTExternalBufferAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_external_buffer extension.
EXTExternalBufferAPI::EXTExternalBufferAPI() :
    BaseExtension("GL_EXT_external_buffer")
{
}

// Grant read-only access to the underlying function pointers.
const EXTExternalBuffer &EXTExternalBufferAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_external_buffer entry points.
void EXTExternalBufferAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBufferStorageExternalEXT().
void EXTExternalBufferAPI::bufferStorageExternal(GLenum target, GLintptr offset,
                                                 GLsizeiptr size,
                                                 GLeglClientBufferEXT clientBuffer,
                                                 GLbitfield  /* BufferStorageMask */ flags) const
{
    static const char *fnName = "glBufferStorageExternalEXT";

    beforeCommand(fnName, _api.glBufferStorageExternal);
    _api.glBufferStorageExternal(target, offset, size, clientBuffer, flags);
    afterCommand(fnName);
}

// Calls glNamedBufferStorageExternalEXT().
void EXTExternalBufferAPI::namedBufferStorageExternal(BufferName buffer,
                                                      GLintptr offset,
                                                      GLsizeiptr size,
                                                      GLeglClientBufferEXT clientBuffer,
                                                      GLbitfield  /* BufferStorageMask */ flags) const
{
    static const char *fnName = "glNamedBufferStorageExternalEXT";

    beforeCommand(fnName, _api.glNamedBufferStorageExternal);
    _api.glNamedBufferStorageExternal(buffer.ID, offset, size, clientBuffer,
                                      flags);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTFogCoordAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_fog_coord extension.
EXTFogCoordAPI::EXTFogCoordAPI() :
    BaseExtension("GL_EXT_fog_coord")
{
}

// Grant read-only access to the underlying function pointers.
const EXTFogCoord &EXTFogCoordAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_fog_coord entry points.
void EXTFogCoordAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFogCoordPointerEXT().
void EXTFogCoordAPI::fogCoordPointer(FogPointerTypeEXT type, GLsizei stride,
                                     const void *pointer) const
{
    static const char *fnName = "glFogCoordPointerEXT";

    beforeCommand(fnName, _api.glFogCoordPointer);
    _api.glFogCoordPointer(toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glFogCoorddEXT().
void EXTFogCoordAPI::fogCoordD(GLdouble coord) const
{
    static const char *fnName = "glFogCoorddEXT";

    beforeCommand(fnName, _api.glFogCoordd);
    _api.glFogCoordd(coord);
    afterCommand(fnName);
}

// Calls glFogCoorddvEXT().
void EXTFogCoordAPI::fogCoordDV(const GLdouble *coord) const
{
    static const char *fnName = "glFogCoorddvEXT";

    beforeCommand(fnName, _api.glFogCoorddv);
    _api.glFogCoorddv(coord);
    afterCommand(fnName);
}

// Calls glFogCoordfEXT().
void EXTFogCoordAPI::fogCoordF(GLfloat coord) const
{
    static const char *fnName = "glFogCoordfEXT";

    beforeCommand(fnName, _api.glFogCoordf);
    _api.glFogCoordf(coord);
    afterCommand(fnName);
}

// Calls glFogCoordfvEXT().
void EXTFogCoordAPI::fogCoordFV(const GLfloat *coord) const
{
    static const char *fnName = "glFogCoordfvEXT";

    beforeCommand(fnName, _api.glFogCoordfv);
    _api.glFogCoordfv(coord);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTFramebufferBlitAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_framebuffer_blit extension.
EXTFramebufferBlitAPI::EXTFramebufferBlitAPI() :
    BaseExtension("GL_EXT_framebuffer_blit")
{
}

// Grant read-only access to the underlying function pointers.
const EXTFramebufferBlit &EXTFramebufferBlitAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_framebuffer_blit entry points.
void EXTFramebufferBlitAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlitFramebufferEXT().
void EXTFramebufferBlitAPI::blitFramebuffer(GLint srcX0, GLint srcY0,
                                            GLint srcX1, GLint srcY1,
                                            GLint dstX0, GLint dstY0,
                                            GLint dstX1, GLint dstY1,
                                            GLbitfield  /* ClearBufferMask */ mask,
                                            BlitFramebufferFilter filter) const
{
    static const char *fnName = "glBlitFramebufferEXT";

    beforeCommand(fnName, _api.glBlitFramebuffer);
    _api.glBlitFramebuffer(srcX0, srcY0, srcX1, srcY1, dstX0, dstY0, dstX1,
                           dstY1, mask, toScalar(filter));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTFramebufferMultisampleAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_framebuffer_multisample extension.
EXTFramebufferMultisampleAPI::EXTFramebufferMultisampleAPI() :
    BaseExtension("GL_EXT_framebuffer_multisample")
{
}

// Grant read-only access to the underlying function pointers.
const EXTFramebufferMultisample &EXTFramebufferMultisampleAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_framebuffer_multisample entry points.
void EXTFramebufferMultisampleAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glRenderbufferStorageMultisampleEXT().
void EXTFramebufferMultisampleAPI::renderbufferStorageMultisample(RenderBufferTarget target,
                                                                  GLsizei samples,
                                                                  InternalFormat internalformat,
                                                                  GLsizei width,
                                                                  GLsizei height) const
{
    static const char *fnName = "glRenderbufferStorageMultisampleEXT";

    beforeCommand(fnName, _api.glRenderbufferStorageMultisample);
    _api.glRenderbufferStorageMultisample(toScalar(target), samples,
                                          toScalar(internalformat), width,
                                          height);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTFramebufferObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_framebuffer_object extension.
EXTFramebufferObjectAPI::EXTFramebufferObjectAPI() :
    BaseExtension("GL_EXT_framebuffer_object")
{
}

// Grant read-only access to the underlying function pointers.
const EXTFramebufferObject &EXTFramebufferObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_framebuffer_object entry points.
void EXTFramebufferObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindFramebufferEXT().
void EXTFramebufferObjectAPI::bindFramebuffer(FramebufferTarget target,
                                              FrameBufferName framebuffer) const
{
    static const char *fnName = "glBindFramebufferEXT";

    beforeCommand(fnName, _api.glBindFramebuffer);
    _api.glBindFramebuffer(toScalar(target), framebuffer.ID);
    afterCommand(fnName);
}

// Calls glBindRenderbufferEXT().
void EXTFramebufferObjectAPI::bindRenderbuffer(RenderBufferTarget target,
                                               RenderBufferName renderbuffer) const
{
    static const char *fnName = "glBindRenderbufferEXT";

    beforeCommand(fnName, _api.glBindRenderbuffer);
    _api.glBindRenderbuffer(toScalar(target), renderbuffer.ID);
    afterCommand(fnName);
}

// Calls glCheckFramebufferStatusEXT().
FramebufferStatus EXTFramebufferObjectAPI::checkFramebufferStatus(FramebufferTarget target) const
{
    static const char *fnName = "glCheckFramebufferStatusEXT";

    beforeCommand(fnName, _api.glCheckFramebufferStatus);
    GLenum result = _api.glCheckFramebufferStatus(toScalar(target));
    afterCommand(fnName);

    return static_cast<FramebufferStatus>(result);
}

// Calls glDeleteFramebuffersEXT().
void EXTFramebufferObjectAPI::deleteFramebuffers(GLsizei n,
                                                 const FrameBufferName *framebuffers) const
{
    static const char *fnName = "glDeleteFramebuffersEXT";

    beforeCommand(fnName, _api.glDeleteFramebuffers);
    _api.glDeleteFramebuffers(n, reinterpret_cast<const GLuint *>(framebuffers));
    afterCommand(fnName);
}

// Calls glDeleteRenderbuffersEXT().
void EXTFramebufferObjectAPI::deleteRenderbuffers(GLsizei n,
                                                  const RenderBufferName *renderbuffers) const
{
    static const char *fnName = "glDeleteRenderbuffersEXT";

    beforeCommand(fnName, _api.glDeleteRenderbuffers);
    _api.glDeleteRenderbuffers(n,
                               reinterpret_cast<const GLuint *>(renderbuffers));
    afterCommand(fnName);
}

// Calls glFramebufferRenderbufferEXT().
void EXTFramebufferObjectAPI::framebufferRenderbuffer(FramebufferTarget target,
                                                      FramebufferAttachment attachment,
                                                      RenderBufferTarget renderbuffertarget,
                                                      RenderBufferName renderbuffer) const
{
    static const char *fnName = "glFramebufferRenderbufferEXT";

    beforeCommand(fnName, _api.glFramebufferRenderbuffer);
    _api.glFramebufferRenderbuffer(toScalar(target), toScalar(attachment),
                                   toScalar(renderbuffertarget), renderbuffer.ID);
    afterCommand(fnName);
}

// Calls glFramebufferTexture1DEXT().
void EXTFramebufferObjectAPI::framebufferTexture1D(FramebufferTarget target,
                                                   FramebufferAttachment attachment,
                                                   TextureTarget textarget,
                                                   TextureName texture,
                                                   GLint level) const
{
    static const char *fnName = "glFramebufferTexture1DEXT";

    beforeCommand(fnName, _api.glFramebufferTexture1D);
    _api.glFramebufferTexture1D(toScalar(target), toScalar(attachment),
                                toScalar(textarget), texture.ID, level);
    afterCommand(fnName);
}

// Calls glFramebufferTexture2DEXT().
void EXTFramebufferObjectAPI::framebufferTexture2D(FramebufferTarget target,
                                                   FramebufferAttachment attachment,
                                                   TextureTarget textarget,
                                                   TextureName texture,
                                                   GLint level) const
{
    static const char *fnName = "glFramebufferTexture2DEXT";

    beforeCommand(fnName, _api.glFramebufferTexture2D);
    _api.glFramebufferTexture2D(toScalar(target), toScalar(attachment),
                                toScalar(textarget), texture.ID, level);
    afterCommand(fnName);
}

// Calls glFramebufferTexture3DEXT().
void EXTFramebufferObjectAPI::framebufferTexture3D(FramebufferTarget target,
                                                   FramebufferAttachment attachment,
                                                   TextureTarget textarget,
                                                   TextureName texture,
                                                   GLint level, GLint zoffset) const
{
    static const char *fnName = "glFramebufferTexture3DEXT";

    beforeCommand(fnName, _api.glFramebufferTexture3D);
    _api.glFramebufferTexture3D(toScalar(target), toScalar(attachment),
                                toScalar(textarget), texture.ID, level, zoffset);
    afterCommand(fnName);
}

// Calls glGenFramebuffersEXT().
void EXTFramebufferObjectAPI::genFramebuffers(GLsizei n,
                                              FrameBufferName *framebuffers) const
{
    static const char *fnName = "glGenFramebuffersEXT";

    beforeCommand(fnName, _api.glGenFramebuffers);
    _api.glGenFramebuffers(n, reinterpret_cast<GLuint *>(framebuffers));
    afterCommand(fnName);
}

// Calls glGenRenderbuffersEXT().
void EXTFramebufferObjectAPI::genRenderbuffers(GLsizei n,
                                               RenderBufferName *renderbuffers) const
{
    static const char *fnName = "glGenRenderbuffersEXT";

    beforeCommand(fnName, _api.glGenRenderbuffers);
    _api.glGenRenderbuffers(n, reinterpret_cast<GLuint *>(renderbuffers));
    afterCommand(fnName);
}

// Calls glGenerateMipmapEXT().
void EXTFramebufferObjectAPI::generateMipmap(TextureTarget target) const
{
    static const char *fnName = "glGenerateMipmapEXT";

    beforeCommand(fnName, _api.glGenerateMipmap);
    _api.glGenerateMipmap(toScalar(target));
    afterCommand(fnName);
}

// Calls glGetFramebufferAttachmentParameterivEXT().
void EXTFramebufferObjectAPI::getFramebufferAttachmentParameterIV(FramebufferTarget target,
                                                                  FramebufferAttachment attachment,
                                                                  FramebufferAttachmentParameterName pname,
                                                                  GLint *params) const
{
    static const char *fnName = "glGetFramebufferAttachmentParameterivEXT";

    beforeCommand(fnName, _api.glGetFramebufferAttachmentParameteriv);
    _api.glGetFramebufferAttachmentParameteriv(toScalar(target),
                                               toScalar(attachment),
                                               toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetRenderbufferParameterivEXT().
void EXTFramebufferObjectAPI::getRenderbufferParameterIV(RenderBufferTarget target,
                                                         RenderBufferParameterName pname,
                                                         GLint *params) const
{
    static const char *fnName = "glGetRenderbufferParameterivEXT";

    beforeCommand(fnName, _api.glGetRenderbufferParameteriv);
    _api.glGetRenderbufferParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsFramebufferEXT().
Boolean EXTFramebufferObjectAPI::isFramebuffer(FrameBufferName framebuffer) const
{
    static const char *fnName = "glIsFramebufferEXT";

    beforeCommand(fnName, _api.glIsFramebuffer);
    GLboolean result = _api.glIsFramebuffer(framebuffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsRenderbufferEXT().
Boolean EXTFramebufferObjectAPI::isRenderbuffer(RenderBufferName renderbuffer) const
{
    static const char *fnName = "glIsRenderbufferEXT";

    beforeCommand(fnName, _api.glIsRenderbuffer);
    GLboolean result = _api.glIsRenderbuffer(renderbuffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glRenderbufferStorageEXT().
void EXTFramebufferObjectAPI::renderbufferStorage(RenderBufferTarget target,
                                                  InternalFormat internalformat,
                                                  GLsizei width, GLsizei height) const
{
    static const char *fnName = "glRenderbufferStorageEXT";

    beforeCommand(fnName, _api.glRenderbufferStorage);
    _api.glRenderbufferStorage(toScalar(target), toScalar(internalformat), width,
                               height);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTGeometrySHADER4API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_geometry_shader4 extension.
EXTGeometrySHADER4API::EXTGeometrySHADER4API() :
    BaseExtension("GL_EXT_geometry_shader4")
{
}

// Grant read-only access to the underlying function pointers.
const EXTGeometrySHADER4 &EXTGeometrySHADER4API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_geometry_shader4 entry points.
void EXTGeometrySHADER4API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glProgramParameteriEXT().
void EXTGeometrySHADER4API::programParameterI(ProgramName program,
                                              ProgramParameterPName pname,
                                              GLint value) const
{
    static const char *fnName = "glProgramParameteriEXT";

    beforeCommand(fnName, _api.glProgramParameteri);
    _api.glProgramParameteri(program.ID, toScalar(pname), value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTGPUProgramParametersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_gpu_program_parameters extension.
EXTGPUProgramParametersAPI::EXTGPUProgramParametersAPI() :
    BaseExtension("GL_EXT_gpu_program_parameters")
{
}

// Grant read-only access to the underlying function pointers.
const EXTGPUProgramParameters &EXTGPUProgramParametersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_gpu_program_parameters entry points.
void EXTGPUProgramParametersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glProgramEnvParameters4fvEXT().
void EXTGPUProgramParametersAPI::programEnvParameters4FV(ProgramTarget target,
                                                         GLuint index,
                                                         GLsizei count,
                                                         const GLfloat *params) const
{
    static const char *fnName = "glProgramEnvParameters4fvEXT";

    beforeCommand(fnName, _api.glProgramEnvParameters4fv);
    _api.glProgramEnvParameters4fv(toScalar(target), index, count, params);
    afterCommand(fnName);
}

// Calls glProgramLocalParameters4fvEXT().
void EXTGPUProgramParametersAPI::programLocalParameters4FV(ProgramTarget target,
                                                           GLuint index,
                                                           GLsizei count,
                                                           const GLfloat *params) const
{
    static const char *fnName = "glProgramLocalParameters4fvEXT";

    beforeCommand(fnName, _api.glProgramLocalParameters4fv);
    _api.glProgramLocalParameters4fv(toScalar(target), index, count, params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTGPUSHADER4API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_gpu_shader4 extension.
EXTGPUSHADER4API::EXTGPUSHADER4API() :
    BaseExtension("GL_EXT_gpu_shader4")
{
}

// Grant read-only access to the underlying function pointers.
const EXTGPUSHADER4 &EXTGPUSHADER4API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_gpu_shader4 entry points.
void EXTGPUSHADER4API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindFragDataLocationEXT().
void EXTGPUSHADER4API::bindFragDataLocation(ProgramName program, GLuint color,
                                            const GLchar *name) const
{
    static const char *fnName = "glBindFragDataLocationEXT";

    beforeCommand(fnName, _api.glBindFragDataLocation);
    _api.glBindFragDataLocation(program.ID, color, name);
    afterCommand(fnName);
}

// Calls glGetFragDataLocationEXT().
GLint EXTGPUSHADER4API::getFragDataLocation(ProgramName program,
                                            const GLchar *name) const
{
    static const char *fnName = "glGetFragDataLocationEXT";

    beforeCommand(fnName, _api.glGetFragDataLocation);
    GLint result = _api.glGetFragDataLocation(program.ID, name);
    afterCommand(fnName);

    return result;
}

// Calls glGetUniformuivEXT().
void EXTGPUSHADER4API::getUniformUIV(ProgramName program, GLint location,
                                     GLuint *params) const
{
    static const char *fnName = "glGetUniformuivEXT";

    beforeCommand(fnName, _api.glGetUniformuiv);
    _api.glGetUniformuiv(program.ID, location, params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribIivEXT().
void EXTGPUSHADER4API::getVertexAttribIIV(GLuint index, VertexAttribEnum pname,
                                          GLint *params) const
{
    static const char *fnName = "glGetVertexAttribIivEXT";

    beforeCommand(fnName, _api.glGetVertexAttribIiv);
    _api.glGetVertexAttribIiv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribIuivEXT().
void EXTGPUSHADER4API::getVertexAttribIUIV(GLuint index, VertexAttribEnum pname,
                                           GLuint *params) const
{
    static const char *fnName = "glGetVertexAttribIuivEXT";

    beforeCommand(fnName, _api.glGetVertexAttribIuiv);
    _api.glGetVertexAttribIuiv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glUniform1uiEXT().
void EXTGPUSHADER4API::uniform1UI(GLint location, GLuint v0) const
{
    static const char *fnName = "glUniform1uiEXT";

    beforeCommand(fnName, _api.glUniform1ui);
    _api.glUniform1ui(location, v0);
    afterCommand(fnName);
}

// Calls glUniform1uivEXT().
void EXTGPUSHADER4API::uniform1UIV(GLint location, GLsizei count,
                                   const GLuint *value) const
{
    static const char *fnName = "glUniform1uivEXT";

    beforeCommand(fnName, _api.glUniform1uiv);
    _api.glUniform1uiv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform2uiEXT().
void EXTGPUSHADER4API::uniform2UI(GLint location, GLuint v0, GLuint v1) const
{
    static const char *fnName = "glUniform2uiEXT";

    beforeCommand(fnName, _api.glUniform2ui);
    _api.glUniform2ui(location, v0, v1);
    afterCommand(fnName);
}

// Calls glUniform2uivEXT().
void EXTGPUSHADER4API::uniform2UIV(GLint location, GLsizei count,
                                   const GLuint *value) const
{
    static const char *fnName = "glUniform2uivEXT";

    beforeCommand(fnName, _api.glUniform2uiv);
    _api.glUniform2uiv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform3uiEXT().
void EXTGPUSHADER4API::uniform3UI(GLint location, GLuint v0, GLuint v1,
                                  GLuint v2) const
{
    static const char *fnName = "glUniform3uiEXT";

    beforeCommand(fnName, _api.glUniform3ui);
    _api.glUniform3ui(location, v0, v1, v2);
    afterCommand(fnName);
}

// Calls glUniform3uivEXT().
void EXTGPUSHADER4API::uniform3UIV(GLint location, GLsizei count,
                                   const GLuint *value) const
{
    static const char *fnName = "glUniform3uivEXT";

    beforeCommand(fnName, _api.glUniform3uiv);
    _api.glUniform3uiv(location, count, value);
    afterCommand(fnName);
}

// Calls glUniform4uiEXT().
void EXTGPUSHADER4API::uniform4UI(GLint location, GLuint v0, GLuint v1,
                                  GLuint v2, GLuint v3) const
{
    static const char *fnName = "glUniform4uiEXT";

    beforeCommand(fnName, _api.glUniform4ui);
    _api.glUniform4ui(location, v0, v1, v2, v3);
    afterCommand(fnName);
}

// Calls glUniform4uivEXT().
void EXTGPUSHADER4API::uniform4UIV(GLint location, GLsizei count,
                                   const GLuint *value) const
{
    static const char *fnName = "glUniform4uivEXT";

    beforeCommand(fnName, _api.glUniform4uiv);
    _api.glUniform4uiv(location, count, value);
    afterCommand(fnName);
}

// Calls glVertexAttribI1iEXT().
void EXTGPUSHADER4API::vertexAttribI1I(GLuint index, GLint x) const
{
    static const char *fnName = "glVertexAttribI1iEXT";

    beforeCommand(fnName, _api.glVertexAttribI1i);
    _api.glVertexAttribI1i(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribI1ivEXT().
void EXTGPUSHADER4API::vertexAttribI1IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttribI1ivEXT";

    beforeCommand(fnName, _api.glVertexAttribI1iv);
    _api.glVertexAttribI1iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI1uiEXT().
void EXTGPUSHADER4API::vertexAttribI1UI(GLuint index, GLuint x) const
{
    static const char *fnName = "glVertexAttribI1uiEXT";

    beforeCommand(fnName, _api.glVertexAttribI1ui);
    _api.glVertexAttribI1ui(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribI1uivEXT().
void EXTGPUSHADER4API::vertexAttribI1UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttribI1uivEXT";

    beforeCommand(fnName, _api.glVertexAttribI1uiv);
    _api.glVertexAttribI1uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI2iEXT().
void EXTGPUSHADER4API::vertexAttribI2I(GLuint index, GLint x, GLint y) const
{
    static const char *fnName = "glVertexAttribI2iEXT";

    beforeCommand(fnName, _api.glVertexAttribI2i);
    _api.glVertexAttribI2i(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttribI2ivEXT().
void EXTGPUSHADER4API::vertexAttribI2IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttribI2ivEXT";

    beforeCommand(fnName, _api.glVertexAttribI2iv);
    _api.glVertexAttribI2iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI2uiEXT().
void EXTGPUSHADER4API::vertexAttribI2UI(GLuint index, GLuint x, GLuint y) const
{
    static const char *fnName = "glVertexAttribI2uiEXT";

    beforeCommand(fnName, _api.glVertexAttribI2ui);
    _api.glVertexAttribI2ui(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttribI2uivEXT().
void EXTGPUSHADER4API::vertexAttribI2UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttribI2uivEXT";

    beforeCommand(fnName, _api.glVertexAttribI2uiv);
    _api.glVertexAttribI2uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI3iEXT().
void EXTGPUSHADER4API::vertexAttribI3I(GLuint index, GLint x, GLint y, GLint z) const
{
    static const char *fnName = "glVertexAttribI3iEXT";

    beforeCommand(fnName, _api.glVertexAttribI3i);
    _api.glVertexAttribI3i(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttribI3ivEXT().
void EXTGPUSHADER4API::vertexAttribI3IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttribI3ivEXT";

    beforeCommand(fnName, _api.glVertexAttribI3iv);
    _api.glVertexAttribI3iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI3uiEXT().
void EXTGPUSHADER4API::vertexAttribI3UI(GLuint index, GLuint x, GLuint y,
                                        GLuint z) const
{
    static const char *fnName = "glVertexAttribI3uiEXT";

    beforeCommand(fnName, _api.glVertexAttribI3ui);
    _api.glVertexAttribI3ui(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttribI3uivEXT().
void EXTGPUSHADER4API::vertexAttribI3UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttribI3uivEXT";

    beforeCommand(fnName, _api.glVertexAttribI3uiv);
    _api.glVertexAttribI3uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4bvEXT().
void EXTGPUSHADER4API::vertexAttribI4BV(GLuint index, const GLbyte *v) const
{
    static const char *fnName = "glVertexAttribI4bvEXT";

    beforeCommand(fnName, _api.glVertexAttribI4bv);
    _api.glVertexAttribI4bv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4iEXT().
void EXTGPUSHADER4API::vertexAttribI4I(GLuint index, GLint x, GLint y, GLint z,
                                       GLint w) const
{
    static const char *fnName = "glVertexAttribI4iEXT";

    beforeCommand(fnName, _api.glVertexAttribI4i);
    _api.glVertexAttribI4i(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttribI4ivEXT().
void EXTGPUSHADER4API::vertexAttribI4IV(GLuint index, const GLint *v) const
{
    static const char *fnName = "glVertexAttribI4ivEXT";

    beforeCommand(fnName, _api.glVertexAttribI4iv);
    _api.glVertexAttribI4iv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4svEXT().
void EXTGPUSHADER4API::vertexAttribI4SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttribI4svEXT";

    beforeCommand(fnName, _api.glVertexAttribI4sv);
    _api.glVertexAttribI4sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4ubvEXT().
void EXTGPUSHADER4API::vertexAttribI4UBV(GLuint index, const GLubyte *v) const
{
    static const char *fnName = "glVertexAttribI4ubvEXT";

    beforeCommand(fnName, _api.glVertexAttribI4ubv);
    _api.glVertexAttribI4ubv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4uiEXT().
void EXTGPUSHADER4API::vertexAttribI4UI(GLuint index, GLuint x, GLuint y,
                                        GLuint z, GLuint w) const
{
    static const char *fnName = "glVertexAttribI4uiEXT";

    beforeCommand(fnName, _api.glVertexAttribI4ui);
    _api.glVertexAttribI4ui(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttribI4uivEXT().
void EXTGPUSHADER4API::vertexAttribI4UIV(GLuint index, const GLuint *v) const
{
    static const char *fnName = "glVertexAttribI4uivEXT";

    beforeCommand(fnName, _api.glVertexAttribI4uiv);
    _api.glVertexAttribI4uiv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribI4usvEXT().
void EXTGPUSHADER4API::vertexAttribI4USV(GLuint index, const GLushort *v) const
{
    static const char *fnName = "glVertexAttribI4usvEXT";

    beforeCommand(fnName, _api.glVertexAttribI4usv);
    _api.glVertexAttribI4usv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribIPointerEXT().
void EXTGPUSHADER4API::vertexAttribIPointer(GLuint index, GLint size,
                                            VertexAttribIType type,
                                            GLsizei stride, const void *pointer) const
{
    static const char *fnName = "glVertexAttribIPointerEXT";

    beforeCommand(fnName, _api.glVertexAttribIPointer);
    _api.glVertexAttribIPointer(index, size, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTHistogramAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_histogram extension.
EXTHistogramAPI::EXTHistogramAPI() :
    BaseExtension("GL_EXT_histogram")
{
}

// Grant read-only access to the underlying function pointers.
const EXTHistogram &EXTHistogramAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_histogram entry points.
void EXTHistogramAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetHistogramEXT().
void EXTHistogramAPI::getHistogram(HistogramTargetEXT target, Boolean reset,
                                   PixelFormat format, PixelType type,
                                   void *values) const
{
    static const char *fnName = "glGetHistogramEXT";

    beforeCommand(fnName, _api.glGetHistogram);
    _api.glGetHistogram(toScalar(target), toScalar(reset), toScalar(format),
                        toScalar(type), values);
    afterCommand(fnName);
}

// Calls glGetHistogramParameterfvEXT().
void EXTHistogramAPI::getHistogramParameterFV(HistogramTargetEXT target,
                                              GetHistogramParameterPNameEXT pname,
                                              GLfloat *params) const
{
    static const char *fnName = "glGetHistogramParameterfvEXT";

    beforeCommand(fnName, _api.glGetHistogramParameterfv);
    _api.glGetHistogramParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetHistogramParameterivEXT().
void EXTHistogramAPI::getHistogramParameterIV(HistogramTargetEXT target,
                                              GetHistogramParameterPNameEXT pname,
                                              GLint *params) const
{
    static const char *fnName = "glGetHistogramParameterivEXT";

    beforeCommand(fnName, _api.glGetHistogramParameteriv);
    _api.glGetHistogramParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMinmaxEXT().
void EXTHistogramAPI::getMinmax(MinmaxTargetEXT target, Boolean reset,
                                PixelFormat format, PixelType type, void *values) const
{
    static const char *fnName = "glGetMinmaxEXT";

    beforeCommand(fnName, _api.glGetMinmax);
    _api.glGetMinmax(toScalar(target), toScalar(reset), toScalar(format),
                     toScalar(type), values);
    afterCommand(fnName);
}

// Calls glGetMinmaxParameterfvEXT().
void EXTHistogramAPI::getMinmaxParameterFV(MinmaxTargetEXT target,
                                           GetMinmaxParameterPNameEXT pname,
                                           GLfloat *params) const
{
    static const char *fnName = "glGetMinmaxParameterfvEXT";

    beforeCommand(fnName, _api.glGetMinmaxParameterfv);
    _api.glGetMinmaxParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMinmaxParameterivEXT().
void EXTHistogramAPI::getMinmaxParameterIV(MinmaxTargetEXT target,
                                           GetMinmaxParameterPNameEXT pname,
                                           GLint *params) const
{
    static const char *fnName = "glGetMinmaxParameterivEXT";

    beforeCommand(fnName, _api.glGetMinmaxParameteriv);
    _api.glGetMinmaxParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glHistogramEXT().
void EXTHistogramAPI::histogram(HistogramTargetEXT target, GLsizei width,
                                InternalFormat internalformat, Boolean sink) const
{
    static const char *fnName = "glHistogramEXT";

    beforeCommand(fnName, _api.glHistogram);
    _api.glHistogram(toScalar(target), width, toScalar(internalformat),
                     toScalar(sink));
    afterCommand(fnName);
}

// Calls glMinmaxEXT().
void EXTHistogramAPI::minmax(MinmaxTargetEXT target,
                             InternalFormat internalformat, Boolean sink) const
{
    static const char *fnName = "glMinmaxEXT";

    beforeCommand(fnName, _api.glMinmax);
    _api.glMinmax(toScalar(target), toScalar(internalformat), toScalar(sink));
    afterCommand(fnName);
}

// Calls glResetHistogramEXT().
void EXTHistogramAPI::resetHistogram(HistogramTargetEXT target) const
{
    static const char *fnName = "glResetHistogramEXT";

    beforeCommand(fnName, _api.glResetHistogram);
    _api.glResetHistogram(toScalar(target));
    afterCommand(fnName);
}

// Calls glResetMinmaxEXT().
void EXTHistogramAPI::resetMinmax(MinmaxTargetEXT target) const
{
    static const char *fnName = "glResetMinmaxEXT";

    beforeCommand(fnName, _api.glResetMinmax);
    _api.glResetMinmax(toScalar(target));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTIndexFuncAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_index_func extension.
EXTIndexFuncAPI::EXTIndexFuncAPI() :
    BaseExtension("GL_EXT_index_func")
{
}

// Grant read-only access to the underlying function pointers.
const EXTIndexFunc &EXTIndexFuncAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_index_func entry points.
void EXTIndexFuncAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glIndexFuncEXT().
void EXTIndexFuncAPI::indexFunc(IndexFunctionEXT func, GLclampf ref) const
{
    static const char *fnName = "glIndexFuncEXT";

    beforeCommand(fnName, _api.glIndexFunc);
    _api.glIndexFunc(toScalar(func), ref);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTIndexMaterialAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_index_material extension.
EXTIndexMaterialAPI::EXTIndexMaterialAPI() :
    BaseExtension("GL_EXT_index_material")
{
}

// Grant read-only access to the underlying function pointers.
const EXTIndexMaterial &EXTIndexMaterialAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_index_material entry points.
void EXTIndexMaterialAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glIndexMaterialEXT().
void EXTIndexMaterialAPI::indexMaterial(MaterialFace face, GLenum mode) const
{
    static const char *fnName = "glIndexMaterialEXT";

    beforeCommand(fnName, _api.glIndexMaterial);
    _api.glIndexMaterial(toScalar(face), mode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTLightTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_light_texture extension.
EXTLightTextureAPI::EXTLightTextureAPI() :
    BaseExtension("GL_EXT_light_texture")
{
}

// Grant read-only access to the underlying function pointers.
const EXTLightTexture &EXTLightTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_light_texture entry points.
void EXTLightTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glApplyTextureEXT().
void EXTLightTextureAPI::applyTexture(LightTextureModeEXT mode) const
{
    static const char *fnName = "glApplyTextureEXT";

    beforeCommand(fnName, _api.glApplyTexture);
    _api.glApplyTexture(toScalar(mode));
    afterCommand(fnName);
}

// Calls glTextureLightEXT().
void EXTLightTextureAPI::textureLight(LightTexturePNameEXT pname) const
{
    static const char *fnName = "glTextureLightEXT";

    beforeCommand(fnName, _api.glTextureLight);
    _api.glTextureLight(toScalar(pname));
    afterCommand(fnName);
}

// Calls glTextureMaterialEXT().
void EXTLightTextureAPI::textureMaterial(MaterialFace face, GLenum mode) const
{
    static const char *fnName = "glTextureMaterialEXT";

    beforeCommand(fnName, _api.glTextureMaterial);
    _api.glTextureMaterial(toScalar(face), mode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTMemoryObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_memory_object extension.
EXTMemoryObjectAPI::EXTMemoryObjectAPI() :
    BaseExtension("GL_EXT_memory_object")
{
}

// Grant read-only access to the underlying function pointers.
const EXTMemoryObject &EXTMemoryObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_memory_object entry points.
void EXTMemoryObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBufferStorageMemEXT().
void EXTMemoryObjectAPI::bufferStorageMem(BufferTarget target,
                                          GLsizeiptr size, GLuint memory,
                                          GLuint64 offset) const
{
    static const char *fnName = "glBufferStorageMemEXT";

    beforeCommand(fnName, _api.glBufferStorageMem);
    _api.glBufferStorageMem(toScalar(target), size, memory, offset);
    afterCommand(fnName);
}

// Calls glCreateMemoryObjectsEXT().
void EXTMemoryObjectAPI::createMemoryObjects(GLsizei n, GLuint *memoryObjects) const
{
    static const char *fnName = "glCreateMemoryObjectsEXT";

    beforeCommand(fnName, _api.glCreateMemoryObjects);
    _api.glCreateMemoryObjects(n, memoryObjects);
    afterCommand(fnName);
}

// Calls glDeleteMemoryObjectsEXT().
void EXTMemoryObjectAPI::deleteMemoryObjects(GLsizei n,
                                             const GLuint *memoryObjects) const
{
    static const char *fnName = "glDeleteMemoryObjectsEXT";

    beforeCommand(fnName, _api.glDeleteMemoryObjects);
    _api.glDeleteMemoryObjects(n, memoryObjects);
    afterCommand(fnName);
}

// Calls glGetMemoryObjectParameterivEXT().
void EXTMemoryObjectAPI::getMemoryObjectParameterIV(GLuint memoryObject,
                                                    MemoryObjectParameterName pname,
                                                    GLint *params) const
{
    static const char *fnName = "glGetMemoryObjectParameterivEXT";

    beforeCommand(fnName, _api.glGetMemoryObjectParameteriv);
    _api.glGetMemoryObjectParameteriv(memoryObject, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetUnsignedBytei_vEXT().
void EXTMemoryObjectAPI::getUnsignedByteIV(GLenum target, GLuint index,
                                           GLubyte *data) const
{
    static const char *fnName = "glGetUnsignedBytei_vEXT";

    beforeCommand(fnName, _api.glGetUnsignedBytei_v);
    _api.glGetUnsignedBytei_v(target, index, data);
    afterCommand(fnName);
}

// Calls glGetUnsignedBytevEXT().
void EXTMemoryObjectAPI::getUnsignedByteV(GetPName pname, GLubyte *data) const
{
    static const char *fnName = "glGetUnsignedBytevEXT";

    beforeCommand(fnName, _api.glGetUnsignedBytev);
    _api.glGetUnsignedBytev(toScalar(pname), data);
    afterCommand(fnName);
}

// Calls glIsMemoryObjectEXT().
Boolean EXTMemoryObjectAPI::isMemoryObject(GLuint memoryObject) const
{
    static const char *fnName = "glIsMemoryObjectEXT";

    beforeCommand(fnName, _api.glIsMemoryObject);
    GLboolean result = _api.glIsMemoryObject(memoryObject);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMemoryObjectParameterivEXT().
void EXTMemoryObjectAPI::memoryObjectParameterIV(GLuint memoryObject,
                                                 MemoryObjectParameterName pname,
                                                 const GLint *params) const
{
    static const char *fnName = "glMemoryObjectParameterivEXT";

    beforeCommand(fnName, _api.glMemoryObjectParameteriv);
    _api.glMemoryObjectParameteriv(memoryObject, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glNamedBufferStorageMemEXT().
void EXTMemoryObjectAPI::namedBufferStorageMem(BufferName buffer,
                                               GLsizeiptr size, GLuint memory,
                                               GLuint64 offset) const
{
    static const char *fnName = "glNamedBufferStorageMemEXT";

    beforeCommand(fnName, _api.glNamedBufferStorageMem);
    _api.glNamedBufferStorageMem(buffer.ID, size, memory, offset);
    afterCommand(fnName);
}

// Calls glTexStorageMem1DEXT().
void EXTMemoryObjectAPI::texStorageMem1D(TextureTarget target, GLsizei levels,
                                         SizedInternalFormat internalFormat,
                                         GLsizei width, GLuint memory,
                                         GLuint64 offset) const
{
    static const char *fnName = "glTexStorageMem1DEXT";

    beforeCommand(fnName, _api.glTexStorageMem1D);
    _api.glTexStorageMem1D(toScalar(target), levels, toScalar(internalFormat),
                           width, memory, offset);
    afterCommand(fnName);
}

// Calls glTexStorageMem2DEXT().
void EXTMemoryObjectAPI::texStorageMem2D(TextureTarget target, GLsizei levels,
                                         SizedInternalFormat internalFormat,
                                         GLsizei width, GLsizei height,
                                         GLuint memory, GLuint64 offset) const
{
    static const char *fnName = "glTexStorageMem2DEXT";

    beforeCommand(fnName, _api.glTexStorageMem2D);
    _api.glTexStorageMem2D(toScalar(target), levels, toScalar(internalFormat),
                           width, height, memory, offset);
    afterCommand(fnName);
}

// Calls glTexStorageMem2DMultisampleEXT().
void EXTMemoryObjectAPI::texStorageMem2DMultisample(TextureTarget target,
                                                    GLsizei samples,
                                                    SizedInternalFormat internalFormat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    Boolean fixedSampleLocations,
                                                    GLuint memory,
                                                    GLuint64 offset) const
{
    static const char *fnName = "glTexStorageMem2DMultisampleEXT";

    beforeCommand(fnName, _api.glTexStorageMem2DMultisample);
    _api.glTexStorageMem2DMultisample(toScalar(target), samples,
                                      toScalar(internalFormat), width, height,
                                      toScalar(fixedSampleLocations), memory,
                                      offset);
    afterCommand(fnName);
}

// Calls glTexStorageMem3DEXT().
void EXTMemoryObjectAPI::texStorageMem3D(TextureTarget target, GLsizei levels,
                                         SizedInternalFormat internalFormat,
                                         GLsizei width, GLsizei height,
                                         GLsizei depth, GLuint memory,
                                         GLuint64 offset) const
{
    static const char *fnName = "glTexStorageMem3DEXT";

    beforeCommand(fnName, _api.glTexStorageMem3D);
    _api.glTexStorageMem3D(toScalar(target), levels, toScalar(internalFormat),
                           width, height, depth, memory, offset);
    afterCommand(fnName);
}

// Calls glTexStorageMem3DMultisampleEXT().
void EXTMemoryObjectAPI::texStorageMem3DMultisample(TextureTarget target,
                                                    GLsizei samples,
                                                    SizedInternalFormat internalFormat,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLsizei depth,
                                                    Boolean fixedSampleLocations,
                                                    GLuint memory,
                                                    GLuint64 offset) const
{
    static const char *fnName = "glTexStorageMem3DMultisampleEXT";

    beforeCommand(fnName, _api.glTexStorageMem3DMultisample);
    _api.glTexStorageMem3DMultisample(toScalar(target), samples,
                                      toScalar(internalFormat), width, height,
                                      depth, toScalar(fixedSampleLocations),
                                      memory, offset);
    afterCommand(fnName);
}

// Calls glTextureStorageMem1DEXT().
void EXTMemoryObjectAPI::textureStorageMem1D(TextureName texture, GLsizei levels,
                                             SizedInternalFormat internalFormat,
                                             GLsizei width, GLuint memory,
                                             GLuint64 offset) const
{
    static const char *fnName = "glTextureStorageMem1DEXT";

    beforeCommand(fnName, _api.glTextureStorageMem1D);
    _api.glTextureStorageMem1D(texture.ID, levels, toScalar(internalFormat),
                               width, memory, offset);
    afterCommand(fnName);
}

// Calls glTextureStorageMem2DEXT().
void EXTMemoryObjectAPI::textureStorageMem2D(TextureName texture, GLsizei levels,
                                             SizedInternalFormat internalFormat,
                                             GLsizei width, GLsizei height,
                                             GLuint memory, GLuint64 offset) const
{
    static const char *fnName = "glTextureStorageMem2DEXT";

    beforeCommand(fnName, _api.glTextureStorageMem2D);
    _api.glTextureStorageMem2D(texture.ID, levels, toScalar(internalFormat),
                               width, height, memory, offset);
    afterCommand(fnName);
}

// Calls glTextureStorageMem2DMultisampleEXT().
void EXTMemoryObjectAPI::textureStorageMem2DMultisample(TextureName texture,
                                                        GLsizei samples,
                                                        SizedInternalFormat internalFormat,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        Boolean fixedSampleLocations,
                                                        GLuint memory,
                                                        GLuint64 offset) const
{
    static const char *fnName = "glTextureStorageMem2DMultisampleEXT";

    beforeCommand(fnName, _api.glTextureStorageMem2DMultisample);
    _api.glTextureStorageMem2DMultisample(texture.ID, samples,
                                          toScalar(internalFormat), width,
                                          height, toScalar(fixedSampleLocations),
                                          memory, offset);
    afterCommand(fnName);
}

// Calls glTextureStorageMem3DEXT().
void EXTMemoryObjectAPI::textureStorageMem3D(TextureName texture, GLsizei levels,
                                             SizedInternalFormat internalFormat,
                                             GLsizei width, GLsizei height,
                                             GLsizei depth, GLuint memory,
                                             GLuint64 offset) const
{
    static const char *fnName = "glTextureStorageMem3DEXT";

    beforeCommand(fnName, _api.glTextureStorageMem3D);
    _api.glTextureStorageMem3D(texture.ID, levels, toScalar(internalFormat),
                               width, height, depth, memory, offset);
    afterCommand(fnName);
}

// Calls glTextureStorageMem3DMultisampleEXT().
void EXTMemoryObjectAPI::textureStorageMem3DMultisample(TextureName texture,
                                                        GLsizei samples,
                                                        SizedInternalFormat internalFormat,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        GLsizei depth,
                                                        Boolean fixedSampleLocations,
                                                        GLuint memory,
                                                        GLuint64 offset) const
{
    static const char *fnName = "glTextureStorageMem3DMultisampleEXT";

    beforeCommand(fnName, _api.glTextureStorageMem3DMultisample);
    _api.glTextureStorageMem3DMultisample(texture.ID, samples,
                                          toScalar(internalFormat), width,
                                          height, depth,
                                          toScalar(fixedSampleLocations), memory,
                                          offset);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTMemoryObjectFdAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_memory_object_fd extension.
EXTMemoryObjectFdAPI::EXTMemoryObjectFdAPI() :
    BaseExtension("GL_EXT_memory_object_fd")
{
}

// Grant read-only access to the underlying function pointers.
const EXTMemoryObjectFd &EXTMemoryObjectFdAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_memory_object_fd entry points.
void EXTMemoryObjectFdAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glImportMemoryFdEXT().
void EXTMemoryObjectFdAPI::importMemoryFd(GLuint memory, GLuint64 size,
                                          ExternalHandleType handleType,
                                          GLint fd) const
{
    static const char *fnName = "glImportMemoryFdEXT";

    beforeCommand(fnName, _api.glImportMemoryFd);
    _api.glImportMemoryFd(memory, size, toScalar(handleType), fd);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTMemoryObjectWIN32API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_memory_object_win32 extension.
EXTMemoryObjectWIN32API::EXTMemoryObjectWIN32API() :
    BaseExtension("GL_EXT_memory_object_win32")
{
}

// Grant read-only access to the underlying function pointers.
const EXTMemoryObjectWIN32 &EXTMemoryObjectWIN32API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_memory_object_win32 entry points.
void EXTMemoryObjectWIN32API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glImportMemoryWin32HandleEXT().
void EXTMemoryObjectWIN32API::importMemoryWIN32Handle(GLuint memory,
                                                      GLuint64 size,
                                                      ExternalHandleType handleType,
                                                      void *handle) const
{
    static const char *fnName = "glImportMemoryWin32HandleEXT";

    beforeCommand(fnName, _api.glImportMemoryWin32Handle);
    _api.glImportMemoryWin32Handle(memory, size, toScalar(handleType), handle);
    afterCommand(fnName);
}

// Calls glImportMemoryWin32NameEXT().
void EXTMemoryObjectWIN32API::importMemoryWIN32Name(GLuint memory, GLuint64 size,
                                                    ExternalHandleType handleType,
                                                    const void *name) const
{
    static const char *fnName = "glImportMemoryWin32NameEXT";

    beforeCommand(fnName, _api.glImportMemoryWin32Name);
    _api.glImportMemoryWin32Name(memory, size, toScalar(handleType), name);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTMultiDrawArraysAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_multi_draw_arrays extension.
EXTMultiDrawArraysAPI::EXTMultiDrawArraysAPI() :
    BaseExtension("GL_EXT_multi_draw_arrays")
{
}

// Grant read-only access to the underlying function pointers.
const EXTMultiDrawArrays &EXTMultiDrawArraysAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_multi_draw_arrays entry points.
void EXTMultiDrawArraysAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMultiDrawArraysEXT().
void EXTMultiDrawArraysAPI::multiDrawArrays(PrimitiveType mode,
                                            const GLint *first,
                                            const GLsizei *count,
                                            GLsizei primcount) const
{
    static const char *fnName = "glMultiDrawArraysEXT";

    beforeCommand(fnName, _api.glMultiDrawArrays);
    _api.glMultiDrawArrays(toScalar(mode), first, count, primcount);
    afterCommand(fnName);
}

// Calls glMultiDrawElementsEXT().
void EXTMultiDrawArraysAPI::multiDrawElements(PrimitiveType mode,
                                              const GLsizei *count,
                                              DrawElementsType type,
                                              const void *const*indices,
                                              GLsizei primcount) const
{
    static const char *fnName = "glMultiDrawElementsEXT";

    beforeCommand(fnName, _api.glMultiDrawElements);
    _api.glMultiDrawElements(toScalar(mode), count, toScalar(type), indices,
                             primcount);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTMultisampleAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_multisample extension.
EXTMultisampleAPI::EXTMultisampleAPI() :
    BaseExtension("GL_EXT_multisample")
{
}

// Grant read-only access to the underlying function pointers.
const EXTMultisample &EXTMultisampleAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_multisample entry points.
void EXTMultisampleAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glSampleMaskEXT().
void EXTMultisampleAPI::sampleMask(GLclampf value, Boolean invert) const
{
    static const char *fnName = "glSampleMaskEXT";

    beforeCommand(fnName, _api.glSampleMask);
    _api.glSampleMask(value, toScalar(invert));
    afterCommand(fnName);
}

// Calls glSamplePatternEXT().
void EXTMultisampleAPI::samplePattern(SamplePatternEXT pattern) const
{
    static const char *fnName = "glSamplePatternEXT";

    beforeCommand(fnName, _api.glSamplePattern);
    _api.glSamplePattern(toScalar(pattern));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTPalettedTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_paletted_texture extension.
EXTPalettedTextureAPI::EXTPalettedTextureAPI() :
    BaseExtension("GL_EXT_paletted_texture")
{
}

// Grant read-only access to the underlying function pointers.
const EXTPalettedTexture &EXTPalettedTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_paletted_texture entry points.
void EXTPalettedTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glColorTableEXT().
void EXTPalettedTextureAPI::colorTable(GLenum target,
                                       InternalFormat internalFormat,
                                       GLsizei width, PixelFormat format,
                                       PixelType type, const void *table) const
{
    static const char *fnName = "glColorTableEXT";

    beforeCommand(fnName, _api.glColorTable);
    _api.glColorTable(target, toScalar(internalFormat), width, toScalar(format),
                      toScalar(type), table);
    afterCommand(fnName);
}

// Calls glGetColorTableEXT().
void EXTPalettedTextureAPI::getColorTable(GLenum target, PixelFormat format,
                                          PixelType type, void *data) const
{
    static const char *fnName = "glGetColorTableEXT";

    beforeCommand(fnName, _api.glGetColorTable);
    _api.glGetColorTable(target, toScalar(format), toScalar(type), data);
    afterCommand(fnName);
}

// Calls glGetColorTableParameterfvEXT().
void EXTPalettedTextureAPI::getColorTableParameterFV(GLenum target,
                                                     GetColorTableParameterPNameSGI pname,
                                                     GLfloat *params) const
{
    static const char *fnName = "glGetColorTableParameterfvEXT";

    beforeCommand(fnName, _api.glGetColorTableParameterfv);
    _api.glGetColorTableParameterfv(target, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetColorTableParameterivEXT().
void EXTPalettedTextureAPI::getColorTableParameterIV(GLenum target,
                                                     GetColorTableParameterPNameSGI pname,
                                                     GLint *params) const
{
    static const char *fnName = "glGetColorTableParameterivEXT";

    beforeCommand(fnName, _api.glGetColorTableParameteriv);
    _api.glGetColorTableParameteriv(target, toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTPixelTransformAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_pixel_transform extension.
EXTPixelTransformAPI::EXTPixelTransformAPI() :
    BaseExtension("GL_EXT_pixel_transform")
{
}

// Grant read-only access to the underlying function pointers.
const EXTPixelTransform &EXTPixelTransformAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_pixel_transform entry points.
void EXTPixelTransformAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetPixelTransformParameterfvEXT().
void EXTPixelTransformAPI::getPixelTransformParameterFV(GLenum target,
                                                        GLenum pname,
                                                        GLfloat *params) const
{
    static const char *fnName = "glGetPixelTransformParameterfvEXT";

    beforeCommand(fnName, _api.glGetPixelTransformParameterfv);
    _api.glGetPixelTransformParameterfv(target, pname, params);
    afterCommand(fnName);
}

// Calls glGetPixelTransformParameterivEXT().
void EXTPixelTransformAPI::getPixelTransformParameterIV(GLenum target,
                                                        GLenum pname,
                                                        GLint *params) const
{
    static const char *fnName = "glGetPixelTransformParameterivEXT";

    beforeCommand(fnName, _api.glGetPixelTransformParameteriv);
    _api.glGetPixelTransformParameteriv(target, pname, params);
    afterCommand(fnName);
}

// Calls glPixelTransformParameterfEXT().
void EXTPixelTransformAPI::pixelTransformParameterF(PixelTransformTargetEXT target,
                                                    PixelTransformPNameEXT pname,
                                                    GLfloat param) const
{
    static const char *fnName = "glPixelTransformParameterfEXT";

    beforeCommand(fnName, _api.glPixelTransformParameterf);
    _api.glPixelTransformParameterf(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPixelTransformParameterfvEXT().
void EXTPixelTransformAPI::pixelTransformParameterFV(PixelTransformTargetEXT target,
                                                     PixelTransformPNameEXT pname,
                                                     const GLfloat *params) const
{
    static const char *fnName = "glPixelTransformParameterfvEXT";

    beforeCommand(fnName, _api.glPixelTransformParameterfv);
    _api.glPixelTransformParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glPixelTransformParameteriEXT().
void EXTPixelTransformAPI::pixelTransformParameterI(PixelTransformTargetEXT target,
                                                    PixelTransformPNameEXT pname,
                                                    GLint param) const
{
    static const char *fnName = "glPixelTransformParameteriEXT";

    beforeCommand(fnName, _api.glPixelTransformParameteri);
    _api.glPixelTransformParameteri(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPixelTransformParameterivEXT().
void EXTPixelTransformAPI::pixelTransformParameterIV(PixelTransformTargetEXT target,
                                                     PixelTransformPNameEXT pname,
                                                     const GLint *params) const
{
    static const char *fnName = "glPixelTransformParameterivEXT";

    beforeCommand(fnName, _api.glPixelTransformParameteriv);
    _api.glPixelTransformParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTPointParametersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_point_parameters extension.
EXTPointParametersAPI::EXTPointParametersAPI() :
    BaseExtension("GL_EXT_point_parameters")
{
}

// Grant read-only access to the underlying function pointers.
const EXTPointParameters &EXTPointParametersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_point_parameters entry points.
void EXTPointParametersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPointParameterfEXT().
void EXTPointParametersAPI::pointParameterF(PointParameterNameARB pname,
                                            GLfloat param) const
{
    static const char *fnName = "glPointParameterfEXT";

    beforeCommand(fnName, _api.glPointParameterf);
    _api.glPointParameterf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPointParameterfvEXT().
void EXTPointParametersAPI::pointParameterFV(PointParameterNameARB pname,
                                             const GLfloat *params) const
{
    static const char *fnName = "glPointParameterfvEXT";

    beforeCommand(fnName, _api.glPointParameterfv);
    _api.glPointParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTPolygonOffsetAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_polygon_offset extension.
EXTPolygonOffsetAPI::EXTPolygonOffsetAPI() :
    BaseExtension("GL_EXT_polygon_offset")
{
}

// Grant read-only access to the underlying function pointers.
const EXTPolygonOffset &EXTPolygonOffsetAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_polygon_offset entry points.
void EXTPolygonOffsetAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPolygonOffsetEXT().
void EXTPolygonOffsetAPI::polygonOffset(GLfloat factor, GLfloat bias) const
{
    static const char *fnName = "glPolygonOffsetEXT";

    beforeCommand(fnName, _api.glPolygonOffset);
    _api.glPolygonOffset(factor, bias);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTPolygonOffsetClampAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_polygon_offset_clamp extension.
EXTPolygonOffsetClampAPI::EXTPolygonOffsetClampAPI() :
    BaseExtension("GL_EXT_polygon_offset_clamp")
{
}

// Grant read-only access to the underlying function pointers.
const EXTPolygonOffsetClamp &EXTPolygonOffsetClampAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_polygon_offset_clamp entry points.
void EXTPolygonOffsetClampAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPolygonOffsetClampEXT().
void EXTPolygonOffsetClampAPI::polygonOffsetClamp(GLfloat factor, GLfloat units,
                                                  GLfloat clamp) const
{
    static const char *fnName = "glPolygonOffsetClampEXT";

    beforeCommand(fnName, _api.glPolygonOffsetClamp);
    _api.glPolygonOffsetClamp(factor, units, clamp);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTProvokingVertexAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_provoking_vertex extension.
EXTProvokingVertexAPI::EXTProvokingVertexAPI() :
    BaseExtension("GL_EXT_provoking_vertex")
{
}

// Grant read-only access to the underlying function pointers.
const EXTProvokingVertex &EXTProvokingVertexAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_provoking_vertex entry points.
void EXTProvokingVertexAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glProvokingVertexEXT().
void EXTProvokingVertexAPI::provokingVertex(VertexProvokingMode mode) const
{
    static const char *fnName = "glProvokingVertexEXT";

    beforeCommand(fnName, _api.glProvokingVertex);
    _api.glProvokingVertex(toScalar(mode));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTRasterMultisampleAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_raster_multisample extension.
EXTRasterMultisampleAPI::EXTRasterMultisampleAPI() :
    BaseExtension("GL_EXT_raster_multisample")
{
}

// Grant read-only access to the underlying function pointers.
const EXTRasterMultisample &EXTRasterMultisampleAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_raster_multisample entry points.
void EXTRasterMultisampleAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glRasterSamplesEXT().
void EXTRasterMultisampleAPI::rasterSamples(GLuint samples,
                                            Boolean fixedsamplelocations) const
{
    static const char *fnName = "glRasterSamplesEXT";

    beforeCommand(fnName, _api.glRasterSamples);
    _api.glRasterSamples(samples, toScalar(fixedsamplelocations));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTSecondaryColorAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_secondary_color extension.
EXTSecondaryColorAPI::EXTSecondaryColorAPI() :
    BaseExtension("GL_EXT_secondary_color")
{
}

// Grant read-only access to the underlying function pointers.
const EXTSecondaryColor &EXTSecondaryColorAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_secondary_color entry points.
void EXTSecondaryColorAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glSecondaryColor3bEXT().
void EXTSecondaryColorAPI::secondaryColor3B(GLbyte red, GLbyte green,
                                            GLbyte blue) const
{
    static const char *fnName = "glSecondaryColor3bEXT";

    beforeCommand(fnName, _api.glSecondaryColor3b);
    _api.glSecondaryColor3b(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3bvEXT().
void EXTSecondaryColorAPI::secondaryColor3BV(const GLbyte *v) const
{
    static const char *fnName = "glSecondaryColor3bvEXT";

    beforeCommand(fnName, _api.glSecondaryColor3bv);
    _api.glSecondaryColor3bv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColor3dEXT().
void EXTSecondaryColorAPI::secondaryColor3D(GLdouble red, GLdouble green,
                                            GLdouble blue) const
{
    static const char *fnName = "glSecondaryColor3dEXT";

    beforeCommand(fnName, _api.glSecondaryColor3d);
    _api.glSecondaryColor3d(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3dvEXT().
void EXTSecondaryColorAPI::secondaryColor3DV(const GLdouble *v) const
{
    static const char *fnName = "glSecondaryColor3dvEXT";

    beforeCommand(fnName, _api.glSecondaryColor3dv);
    _api.glSecondaryColor3dv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColor3fEXT().
void EXTSecondaryColorAPI::secondaryColor3F(GLfloat red, GLfloat green,
                                            GLfloat blue) const
{
    static const char *fnName = "glSecondaryColor3fEXT";

    beforeCommand(fnName, _api.glSecondaryColor3f);
    _api.glSecondaryColor3f(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3fvEXT().
void EXTSecondaryColorAPI::secondaryColor3FV(const GLfloat *v) const
{
    static const char *fnName = "glSecondaryColor3fvEXT";

    beforeCommand(fnName, _api.glSecondaryColor3fv);
    _api.glSecondaryColor3fv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColor3iEXT().
void EXTSecondaryColorAPI::secondaryColor3I(GLint red, GLint green, GLint blue) const
{
    static const char *fnName = "glSecondaryColor3iEXT";

    beforeCommand(fnName, _api.glSecondaryColor3i);
    _api.glSecondaryColor3i(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3ivEXT().
void EXTSecondaryColorAPI::secondaryColor3IV(const GLint *v) const
{
    static const char *fnName = "glSecondaryColor3ivEXT";

    beforeCommand(fnName, _api.glSecondaryColor3iv);
    _api.glSecondaryColor3iv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColor3sEXT().
void EXTSecondaryColorAPI::secondaryColor3S(GLshort red, GLshort green,
                                            GLshort blue) const
{
    static const char *fnName = "glSecondaryColor3sEXT";

    beforeCommand(fnName, _api.glSecondaryColor3s);
    _api.glSecondaryColor3s(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3svEXT().
void EXTSecondaryColorAPI::secondaryColor3SV(const GLshort *v) const
{
    static const char *fnName = "glSecondaryColor3svEXT";

    beforeCommand(fnName, _api.glSecondaryColor3sv);
    _api.glSecondaryColor3sv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColor3ubEXT().
void EXTSecondaryColorAPI::secondaryColor3UB(GLubyte red, GLubyte green,
                                             GLubyte blue) const
{
    static const char *fnName = "glSecondaryColor3ubEXT";

    beforeCommand(fnName, _api.glSecondaryColor3ub);
    _api.glSecondaryColor3ub(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3ubvEXT().
void EXTSecondaryColorAPI::secondaryColor3UBV(const GLubyte *v) const
{
    static const char *fnName = "glSecondaryColor3ubvEXT";

    beforeCommand(fnName, _api.glSecondaryColor3ubv);
    _api.glSecondaryColor3ubv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColor3uiEXT().
void EXTSecondaryColorAPI::secondaryColor3UI(GLuint red, GLuint green,
                                             GLuint blue) const
{
    static const char *fnName = "glSecondaryColor3uiEXT";

    beforeCommand(fnName, _api.glSecondaryColor3ui);
    _api.glSecondaryColor3ui(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3uivEXT().
void EXTSecondaryColorAPI::secondaryColor3UIV(const GLuint *v) const
{
    static const char *fnName = "glSecondaryColor3uivEXT";

    beforeCommand(fnName, _api.glSecondaryColor3uiv);
    _api.glSecondaryColor3uiv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColor3usEXT().
void EXTSecondaryColorAPI::secondaryColor3US(GLushort red, GLushort green,
                                             GLushort blue) const
{
    static const char *fnName = "glSecondaryColor3usEXT";

    beforeCommand(fnName, _api.glSecondaryColor3us);
    _api.glSecondaryColor3us(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3usvEXT().
void EXTSecondaryColorAPI::secondaryColor3USV(const GLushort *v) const
{
    static const char *fnName = "glSecondaryColor3usvEXT";

    beforeCommand(fnName, _api.glSecondaryColor3usv);
    _api.glSecondaryColor3usv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColorPointerEXT().
void EXTSecondaryColorAPI::secondaryColorPointer(GLint size,
                                                 ColorPointerType type,
                                                 GLsizei stride,
                                                 const void *pointer) const
{
    static const char *fnName = "glSecondaryColorPointerEXT";

    beforeCommand(fnName, _api.glSecondaryColorPointer);
    _api.glSecondaryColorPointer(size, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTSemaphoreAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_semaphore extension.
EXTSemaphoreAPI::EXTSemaphoreAPI() :
    BaseExtension("GL_EXT_semaphore")
{
}

// Grant read-only access to the underlying function pointers.
const EXTSemaphore &EXTSemaphoreAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_semaphore entry points.
void EXTSemaphoreAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDeleteSemaphoresEXT().
void EXTSemaphoreAPI::deleteSemaphores(GLsizei n, const GLuint *semaphores) const
{
    static const char *fnName = "glDeleteSemaphoresEXT";

    beforeCommand(fnName, _api.glDeleteSemaphores);
    _api.glDeleteSemaphores(n, semaphores);
    afterCommand(fnName);
}

// Calls glGenSemaphoresEXT().
void EXTSemaphoreAPI::genSemaphores(GLsizei n, GLuint *semaphores) const
{
    static const char *fnName = "glGenSemaphoresEXT";

    beforeCommand(fnName, _api.glGenSemaphores);
    _api.glGenSemaphores(n, semaphores);
    afterCommand(fnName);
}

// Calls glGetSemaphoreParameterui64vEXT().
void EXTSemaphoreAPI::getSemaphoreParameterUI64(GLuint semaphore,
                                                SemaphoreParameterName pname,
                                                GLuint64 *params) const
{
    static const char *fnName = "glGetSemaphoreParameterui64vEXT";

    beforeCommand(fnName, _api.glGetSemaphoreParameterui64v);
    _api.glGetSemaphoreParameterui64v(semaphore, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsSemaphoreEXT().
Boolean EXTSemaphoreAPI::isSemaphore(GLuint semaphore) const
{
    static const char *fnName = "glIsSemaphoreEXT";

    beforeCommand(fnName, _api.glIsSemaphore);
    GLboolean result = _api.glIsSemaphore(semaphore);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glSemaphoreParameterui64vEXT().
void EXTSemaphoreAPI::semaphoreParameterUI64(GLuint semaphore,
                                             SemaphoreParameterName pname,
                                             const GLuint64 *params) const
{
    static const char *fnName = "glSemaphoreParameterui64vEXT";

    beforeCommand(fnName, _api.glSemaphoreParameterui64v);
    _api.glSemaphoreParameterui64v(semaphore, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glSignalSemaphoreEXT().
void EXTSemaphoreAPI::signalSemaphore(GLuint semaphore, GLuint numBufferBarriers,
                                      const BufferName *buffers,
                                      GLuint numTextureBarriers,
                                      const TextureName *textures,
                                      const TextureLayout *dstLayouts) const
{
    static const char *fnName = "glSignalSemaphoreEXT";

    beforeCommand(fnName, _api.glSignalSemaphore);
    _api.glSignalSemaphore(semaphore, numBufferBarriers,
                           reinterpret_cast<const GLuint *>(buffers),
                           numTextureBarriers,
                           reinterpret_cast<const GLuint *>(textures),
                           toScalarPtr(dstLayouts));
    afterCommand(fnName);
}

// Calls glWaitSemaphoreEXT().
void EXTSemaphoreAPI::waitSemaphore(GLuint semaphore, GLuint numBufferBarriers,
                                    const BufferName *buffers,
                                    GLuint numTextureBarriers,
                                    const TextureName *textures,
                                    const TextureLayout *srcLayouts) const
{
    static const char *fnName = "glWaitSemaphoreEXT";

    beforeCommand(fnName, _api.glWaitSemaphore);
    _api.glWaitSemaphore(semaphore, numBufferBarriers,
                         reinterpret_cast<const GLuint *>(buffers),
                         numTextureBarriers,
                         reinterpret_cast<const GLuint *>(textures),
                         toScalarPtr(srcLayouts));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTSemaphoreFdAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_semaphore_fd extension.
EXTSemaphoreFdAPI::EXTSemaphoreFdAPI() :
    BaseExtension("GL_EXT_semaphore_fd")
{
}

// Grant read-only access to the underlying function pointers.
const EXTSemaphoreFd &EXTSemaphoreFdAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_semaphore_fd entry points.
void EXTSemaphoreFdAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glImportSemaphoreFdEXT().
void EXTSemaphoreFdAPI::importSemaphoreFd(GLuint semaphore,
                                          ExternalHandleType handleType,
                                          GLint fd) const
{
    static const char *fnName = "glImportSemaphoreFdEXT";

    beforeCommand(fnName, _api.glImportSemaphoreFd);
    _api.glImportSemaphoreFd(semaphore, toScalar(handleType), fd);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTSemaphoreWIN32API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_semaphore_win32 extension.
EXTSemaphoreWIN32API::EXTSemaphoreWIN32API() :
    BaseExtension("GL_EXT_semaphore_win32")
{
}

// Grant read-only access to the underlying function pointers.
const EXTSemaphoreWIN32 &EXTSemaphoreWIN32API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_semaphore_win32 entry points.
void EXTSemaphoreWIN32API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glImportSemaphoreWin32HandleEXT().
void EXTSemaphoreWIN32API::importSemaphoreWIN32Handle(GLuint semaphore,
                                                      ExternalHandleType handleType,
                                                      void *handle) const
{
    static const char *fnName = "glImportSemaphoreWin32HandleEXT";

    beforeCommand(fnName, _api.glImportSemaphoreWin32Handle);
    _api.glImportSemaphoreWin32Handle(semaphore, toScalar(handleType), handle);
    afterCommand(fnName);
}

// Calls glImportSemaphoreWin32NameEXT().
void EXTSemaphoreWIN32API::importSemaphoreWIN32Name(GLuint semaphore,
                                                    ExternalHandleType handleType,
                                                    const void *name) const
{
    static const char *fnName = "glImportSemaphoreWin32NameEXT";

    beforeCommand(fnName, _api.glImportSemaphoreWin32Name);
    _api.glImportSemaphoreWin32Name(semaphore, toScalar(handleType), name);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTSeparateShaderObjectsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_separate_shader_objects extension.
EXTSeparateShaderObjectsAPI::EXTSeparateShaderObjectsAPI() :
    BaseExtension("GL_EXT_separate_shader_objects")
{
}

// Grant read-only access to the underlying function pointers.
const EXTSeparateShaderObjects &EXTSeparateShaderObjectsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_separate_shader_objects entry points.
void EXTSeparateShaderObjectsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glActiveProgramEXT().
void EXTSeparateShaderObjectsAPI::activeProgram(ProgramName program) const
{
    static const char *fnName = "glActiveProgramEXT";

    beforeCommand(fnName, _api.glActiveProgram);
    _api.glActiveProgram(program.ID);
    afterCommand(fnName);
}

// Calls glCreateShaderProgramEXT().
ProgramName EXTSeparateShaderObjectsAPI::createShaderProgram(ShaderType type,
                                                             const GLchar *string) const
{
    static const char *fnName = "glCreateShaderProgramEXT";

    beforeCommand(fnName, _api.glCreateShaderProgram);
    GLuint result = _api.glCreateShaderProgram(toScalar(type), string);
    afterCommand(fnName);

    return ProgramName(result);
}

// Calls glUseShaderProgramEXT().
void EXTSeparateShaderObjectsAPI::useShaderProgram(GLenum type,
                                                   ProgramName program) const
{
    static const char *fnName = "glUseShaderProgramEXT";

    beforeCommand(fnName, _api.glUseShaderProgram);
    _api.glUseShaderProgram(type, program.ID);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTShaderFramebufferFetchNonCoherentAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_shader_framebuffer_fetch_non_coherent extension.
EXTShaderFramebufferFetchNonCoherentAPI::EXTShaderFramebufferFetchNonCoherentAPI() :
    BaseExtension("GL_EXT_shader_framebuffer_fetch_non_coherent")
{
}

// Grant read-only access to the underlying function pointers.
const EXTShaderFramebufferFetchNonCoherent &EXTShaderFramebufferFetchNonCoherentAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_shader_framebuffer_fetch_non_coherent entry points.
void EXTShaderFramebufferFetchNonCoherentAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFramebufferFetchBarrierEXT().
void EXTShaderFramebufferFetchNonCoherentAPI::framebufferFetchBarrier() const
{
    static const char *fnName = "glFramebufferFetchBarrierEXT";

    beforeCommand(fnName, _api.glFramebufferFetchBarrier);
    _api.glFramebufferFetchBarrier();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTShaderImageLoadStoreAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_shader_image_load_store extension.
EXTShaderImageLoadStoreAPI::EXTShaderImageLoadStoreAPI() :
    BaseExtension("GL_EXT_shader_image_load_store")
{
}

// Grant read-only access to the underlying function pointers.
const EXTShaderImageLoadStore &EXTShaderImageLoadStoreAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_shader_image_load_store entry points.
void EXTShaderImageLoadStoreAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindImageTextureEXT().
void EXTShaderImageLoadStoreAPI::bindImageTexture(GLuint index,
                                                  TextureName texture,
                                                  GLint level, Boolean layered,
                                                  GLint layer,
                                                  BufferAccessARB access,
                                                  GLint format) const
{
    static const char *fnName = "glBindImageTextureEXT";

    beforeCommand(fnName, _api.glBindImageTexture);
    _api.glBindImageTexture(index, texture.ID, level, toScalar(layered), layer,
                            toScalar(access), format);
    afterCommand(fnName);
}

// Calls glMemoryBarrierEXT().
void EXTShaderImageLoadStoreAPI::memoryBarrier(GLbitfield  /* MemoryBarrierMask */ barriers) const
{
    static const char *fnName = "glMemoryBarrierEXT";

    beforeCommand(fnName, _api.glMemoryBarrier);
    _api.glMemoryBarrier(barriers);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTStencilClearTagAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_stencil_clear_tag extension.
EXTStencilClearTagAPI::EXTStencilClearTagAPI() :
    BaseExtension("GL_EXT_stencil_clear_tag")
{
}

// Grant read-only access to the underlying function pointers.
const EXTStencilClearTag &EXTStencilClearTagAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_stencil_clear_tag entry points.
void EXTStencilClearTagAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glStencilClearTagEXT().
void EXTStencilClearTagAPI::stencilClearTag(GLsizei stencilTagBits,
                                            GLuint stencilClearTag) const
{
    static const char *fnName = "glStencilClearTagEXT";

    beforeCommand(fnName, _api.glStencilClearTag);
    _api.glStencilClearTag(stencilTagBits, stencilClearTag);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTStencilTwoSideAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_stencil_two_side extension.
EXTStencilTwoSideAPI::EXTStencilTwoSideAPI() :
    BaseExtension("GL_EXT_stencil_two_side")
{
}

// Grant read-only access to the underlying function pointers.
const EXTStencilTwoSide &EXTStencilTwoSideAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_stencil_two_side entry points.
void EXTStencilTwoSideAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glActiveStencilFaceEXT().
void EXTStencilTwoSideAPI::activeStencilFace(StencilFaceDirection face) const
{
    static const char *fnName = "glActiveStencilFaceEXT";

    beforeCommand(fnName, _api.glActiveStencilFace);
    _api.glActiveStencilFace(toScalar(face));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTSubtextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_subtexture extension.
EXTSubtextureAPI::EXTSubtextureAPI() :
    BaseExtension("GL_EXT_subtexture")
{
}

// Grant read-only access to the underlying function pointers.
const EXTSubtexture &EXTSubtextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_subtexture entry points.
void EXTSubtextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexSubImage1DEXT().
void EXTSubtextureAPI::texSubImage1D(TextureTarget target, GLint level,
                                     GLint xoffset, GLsizei width,
                                     PixelFormat format, PixelType type,
                                     const void *pixels) const
{
    static const char *fnName = "glTexSubImage1DEXT";

    beforeCommand(fnName, _api.glTexSubImage1D);
    _api.glTexSubImage1D(toScalar(target), level, xoffset, width,
                         toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTexSubImage2DEXT().
void EXTSubtextureAPI::texSubImage2D(TextureTarget target, GLint level,
                                     GLint xoffset, GLint yoffset, GLsizei width,
                                     GLsizei height, PixelFormat format,
                                     PixelType type, const void *pixels) const
{
    static const char *fnName = "glTexSubImage2DEXT";

    beforeCommand(fnName, _api.glTexSubImage2D);
    _api.glTexSubImage2D(toScalar(target), level, xoffset, yoffset, width,
                         height, toScalar(format), toScalar(type), pixels);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTEXTURE3DAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_texture3D extension.
EXTTEXTURE3DAPI::EXTTEXTURE3DAPI() :
    BaseExtension("GL_EXT_texture3D")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTEXTURE3D &EXTTEXTURE3DAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_texture3D entry points.
void EXTTEXTURE3DAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexImage3DEXT().
void EXTTEXTURE3DAPI::texImage3D(TextureTarget target, GLint level,
                                 InternalFormat internalformat, GLsizei width,
                                 GLsizei height, GLsizei depth, GLint border,
                                 PixelFormat format, PixelType type,
                                 const void *pixels) const
{
    static const char *fnName = "glTexImage3DEXT";

    beforeCommand(fnName, _api.glTexImage3D);
    _api.glTexImage3D(toScalar(target), level, toScalar(internalformat), width,
                      height, depth, border, toScalar(format), toScalar(type),
                      pixels);
    afterCommand(fnName);
}

// Calls glTexSubImage3DEXT().
void EXTTEXTURE3DAPI::texSubImage3D(TextureTarget target, GLint level,
                                    GLint xoffset, GLint yoffset, GLint zoffset,
                                    GLsizei width, GLsizei height, GLsizei depth,
                                    PixelFormat format, PixelType type,
                                    const void *pixels) const
{
    static const char *fnName = "glTexSubImage3DEXT";

    beforeCommand(fnName, _api.glTexSubImage3D);
    _api.glTexSubImage3D(toScalar(target), level, xoffset, yoffset, zoffset,
                         width, height, depth, toScalar(format), toScalar(type),
                         pixels);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTextureArrayAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_texture_array extension.
EXTTextureArrayAPI::EXTTextureArrayAPI() :
    BaseExtension("GL_EXT_texture_array")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTextureArray &EXTTextureArrayAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_texture_array entry points.
void EXTTextureArrayAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFramebufferTextureLayerEXT().
void EXTTextureArrayAPI::framebufferTextureLayer(FramebufferTarget target,
                                                 FramebufferAttachment attachment,
                                                 TextureName texture,
                                                 GLint level, GLint layer) const
{
    static const char *fnName = "glFramebufferTextureLayerEXT";

    beforeCommand(fnName, _api.glFramebufferTextureLayer);
    _api.glFramebufferTextureLayer(toScalar(target), toScalar(attachment),
                                   texture.ID, level, layer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTextureBufferObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_texture_buffer_object extension.
EXTTextureBufferObjectAPI::EXTTextureBufferObjectAPI() :
    BaseExtension("GL_EXT_texture_buffer_object")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTextureBufferObject &EXTTextureBufferObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_texture_buffer_object entry points.
void EXTTextureBufferObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexBufferEXT().
void EXTTextureBufferObjectAPI::texBuffer(TextureTarget target,
                                          SizedInternalFormat internalformat,
                                          BufferName buffer) const
{
    static const char *fnName = "glTexBufferEXT";

    beforeCommand(fnName, _api.glTexBuffer);
    _api.glTexBuffer(toScalar(target), toScalar(internalformat), buffer.ID);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTextureIntegerAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_texture_integer extension.
EXTTextureIntegerAPI::EXTTextureIntegerAPI() :
    BaseExtension("GL_EXT_texture_integer")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTextureInteger &EXTTextureIntegerAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_texture_integer entry points.
void EXTTextureIntegerAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glClearColorIiEXT().
void EXTTextureIntegerAPI::clearColorII(GLint red, GLint green, GLint blue,
                                        GLint alpha) const
{
    static const char *fnName = "glClearColorIiEXT";

    beforeCommand(fnName, _api.glClearColorIi);
    _api.glClearColorIi(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glClearColorIuiEXT().
void EXTTextureIntegerAPI::clearColorIUI(GLuint red, GLuint green, GLuint blue,
                                         GLuint alpha) const
{
    static const char *fnName = "glClearColorIuiEXT";

    beforeCommand(fnName, _api.glClearColorIui);
    _api.glClearColorIui(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glGetTexParameterIivEXT().
void EXTTextureIntegerAPI::getTexParameterIIV(TextureTarget target,
                                              GetTextureParameter pname,
                                              GLint *params) const
{
    static const char *fnName = "glGetTexParameterIivEXT";

    beforeCommand(fnName, _api.glGetTexParameterIiv);
    _api.glGetTexParameterIiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTexParameterIuivEXT().
void EXTTextureIntegerAPI::getTexParameterIUIV(TextureTarget target,
                                               GetTextureParameter pname,
                                               GLuint *params) const
{
    static const char *fnName = "glGetTexParameterIuivEXT";

    beforeCommand(fnName, _api.glGetTexParameterIuiv);
    _api.glGetTexParameterIuiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTexParameterIivEXT().
void EXTTextureIntegerAPI::texParameterIIV(TextureTarget target,
                                           TextureParameterName pname,
                                           const GLint *params) const
{
    static const char *fnName = "glTexParameterIivEXT";

    beforeCommand(fnName, _api.glTexParameterIiv);
    _api.glTexParameterIiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTexParameterIuivEXT().
void EXTTextureIntegerAPI::texParameterIUIV(TextureTarget target,
                                            TextureParameterName pname,
                                            const GLuint *params) const
{
    static const char *fnName = "glTexParameterIuivEXT";

    beforeCommand(fnName, _api.glTexParameterIuiv);
    _api.glTexParameterIuiv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTextureObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_texture_object extension.
EXTTextureObjectAPI::EXTTextureObjectAPI() :
    BaseExtension("GL_EXT_texture_object")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTextureObject &EXTTextureObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_texture_object entry points.
void EXTTextureObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAreTexturesResidentEXT().
Boolean EXTTextureObjectAPI::areTexturesResident(GLsizei n,
                                                 const TextureName *textures,
                                                 Boolean *residences) const
{
    static const char *fnName = "glAreTexturesResidentEXT";

    beforeCommand(fnName, _api.glAreTexturesResident);
    GLboolean result = _api.glAreTexturesResident(n,
                                                  reinterpret_cast<const GLuint *>(textures),
                                                  toScalarPtr(residences));
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glBindTextureEXT().
void EXTTextureObjectAPI::bindTexture(TextureTarget target, TextureName texture) const
{
    static const char *fnName = "glBindTextureEXT";

    beforeCommand(fnName, _api.glBindTexture);
    _api.glBindTexture(toScalar(target), texture.ID);
    afterCommand(fnName);
}

// Calls glDeleteTexturesEXT().
void EXTTextureObjectAPI::deleteTextures(GLsizei n, const TextureName *textures) const
{
    static const char *fnName = "glDeleteTexturesEXT";

    beforeCommand(fnName, _api.glDeleteTextures);
    _api.glDeleteTextures(n, reinterpret_cast<const GLuint *>(textures));
    afterCommand(fnName);
}

// Calls glGenTexturesEXT().
void EXTTextureObjectAPI::genTextures(GLsizei n, TextureName *textures) const
{
    static const char *fnName = "glGenTexturesEXT";

    beforeCommand(fnName, _api.glGenTextures);
    _api.glGenTextures(n, reinterpret_cast<GLuint *>(textures));
    afterCommand(fnName);
}

// Calls glIsTextureEXT().
Boolean EXTTextureObjectAPI::isTexture(TextureName texture) const
{
    static const char *fnName = "glIsTextureEXT";

    beforeCommand(fnName, _api.glIsTexture);
    GLboolean result = _api.glIsTexture(texture.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glPrioritizeTexturesEXT().
void EXTTextureObjectAPI::prioritizeTextures(GLsizei n,
                                             const TextureName *textures,
                                             const GLclampf *priorities) const
{
    static const char *fnName = "glPrioritizeTexturesEXT";

    beforeCommand(fnName, _api.glPrioritizeTextures);
    _api.glPrioritizeTextures(n, reinterpret_cast<const GLuint *>(textures),
                              priorities);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTexturePerturbNormalAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_texture_perturb_normal extension.
EXTTexturePerturbNormalAPI::EXTTexturePerturbNormalAPI() :
    BaseExtension("GL_EXT_texture_perturb_normal")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTexturePerturbNormal &EXTTexturePerturbNormalAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_texture_perturb_normal entry points.
void EXTTexturePerturbNormalAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTextureNormalEXT().
void EXTTexturePerturbNormalAPI::textureNormal(TextureNormalModeEXT mode) const
{
    static const char *fnName = "glTextureNormalEXT";

    beforeCommand(fnName, _api.glTextureNormal);
    _api.glTextureNormal(toScalar(mode));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTextureStorageAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_texture_storage extension.
EXTTextureStorageAPI::EXTTextureStorageAPI() :
    BaseExtension("GL_EXT_texture_storage")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTextureStorage &EXTTextureStorageAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_texture_storage entry points.
void EXTTextureStorageAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexStorage1DEXT().
void EXTTextureStorageAPI::texStorage1D(TextureTarget target, GLsizei levels,
                                        SizedInternalFormat internalformat,
                                        GLsizei width) const
{
    static const char *fnName = "glTexStorage1DEXT";

    beforeCommand(fnName, _api.glTexStorage1D);
    _api.glTexStorage1D(toScalar(target), levels, toScalar(internalformat),
                        width);
    afterCommand(fnName);
}

// Calls glTexStorage2DEXT().
void EXTTextureStorageAPI::texStorage2D(TextureTarget target, GLsizei levels,
                                        SizedInternalFormat internalformat,
                                        GLsizei width, GLsizei height) const
{
    static const char *fnName = "glTexStorage2DEXT";

    beforeCommand(fnName, _api.glTexStorage2D);
    _api.glTexStorage2D(toScalar(target), levels, toScalar(internalformat),
                        width, height);
    afterCommand(fnName);
}

// Calls glTexStorage3DEXT().
void EXTTextureStorageAPI::texStorage3D(TextureTarget target, GLsizei levels,
                                        SizedInternalFormat internalformat,
                                        GLsizei width, GLsizei height,
                                        GLsizei depth) const
{
    static const char *fnName = "glTexStorage3DEXT";

    beforeCommand(fnName, _api.glTexStorage3D);
    _api.glTexStorage3D(toScalar(target), levels, toScalar(internalformat),
                        width, height, depth);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTimerQueryAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_timer_query extension.
EXTTimerQueryAPI::EXTTimerQueryAPI() :
    BaseExtension("GL_EXT_timer_query")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTimerQuery &EXTTimerQueryAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_timer_query entry points.
void EXTTimerQueryAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetQueryObjecti64vEXT().
void EXTTimerQueryAPI::getQueryObjectI64V(QueryName id,
                                          QueryObjectParameterName pname,
                                          GLint64 *params) const
{
    static const char *fnName = "glGetQueryObjecti64vEXT";

    beforeCommand(fnName, _api.glGetQueryObjecti64v);
    _api.glGetQueryObjecti64v(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetQueryObjectui64vEXT().
void EXTTimerQueryAPI::getQueryObjectUI64(QueryName id,
                                          QueryObjectParameterName pname,
                                          GLuint64 *params) const
{
    static const char *fnName = "glGetQueryObjectui64vEXT";

    beforeCommand(fnName, _api.glGetQueryObjectui64v);
    _api.glGetQueryObjectui64v(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTTransformFeedbackAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_transform_feedback extension.
EXTTransformFeedbackAPI::EXTTransformFeedbackAPI() :
    BaseExtension("GL_EXT_transform_feedback")
{
}

// Grant read-only access to the underlying function pointers.
const EXTTransformFeedback &EXTTransformFeedbackAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_transform_feedback entry points.
void EXTTransformFeedbackAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginTransformFeedbackEXT().
void EXTTransformFeedbackAPI::beginTransformFeedback(PrimitiveType primitiveMode) const
{
    static const char *fnName = "glBeginTransformFeedbackEXT";

    beforeCommand(fnName, _api.glBeginTransformFeedback);
    _api.glBeginTransformFeedback(toScalar(primitiveMode));
    afterCommand(fnName);
}

// Calls glBindBufferBaseEXT().
void EXTTransformFeedbackAPI::bindBufferBase(BufferTarget target,
                                             GLuint index, BufferName buffer) const
{
    static const char *fnName = "glBindBufferBaseEXT";

    beforeCommand(fnName, _api.glBindBufferBase);
    _api.glBindBufferBase(toScalar(target), index, buffer.ID);
    afterCommand(fnName);
}

// Calls glBindBufferOffsetEXT().
void EXTTransformFeedbackAPI::bindBufferOffset(BufferTarget target,
                                               GLuint index, BufferName buffer,
                                               GLintptr offset) const
{
    static const char *fnName = "glBindBufferOffsetEXT";

    beforeCommand(fnName, _api.glBindBufferOffset);
    _api.glBindBufferOffset(toScalar(target), index, buffer.ID, offset);
    afterCommand(fnName);
}

// Calls glBindBufferRangeEXT().
void EXTTransformFeedbackAPI::bindBufferRange(BufferTarget target,
                                              GLuint index, BufferName buffer,
                                              GLintptr offset, GLsizeiptr size) const
{
    static const char *fnName = "glBindBufferRangeEXT";

    beforeCommand(fnName, _api.glBindBufferRange);
    _api.glBindBufferRange(toScalar(target), index, buffer.ID, offset, size);
    afterCommand(fnName);
}

// Calls glEndTransformFeedbackEXT().
void EXTTransformFeedbackAPI::endTransformFeedback() const
{
    static const char *fnName = "glEndTransformFeedbackEXT";

    beforeCommand(fnName, _api.glEndTransformFeedback);
    _api.glEndTransformFeedback();
    afterCommand(fnName);
}

// Calls glGetTransformFeedbackVaryingEXT().
void EXTTransformFeedbackAPI::getTransformFeedbackVarying(ProgramName program,
                                                          GLuint index,
                                                          GLsizei bufSize,
                                                          GLsizei *length,
                                                          GLsizei *size,
                                                          AttributeType *type,
                                                          GLchar *name) const
{
    static const char *fnName = "glGetTransformFeedbackVaryingEXT";

    beforeCommand(fnName, _api.glGetTransformFeedbackVarying);
    _api.glGetTransformFeedbackVarying(program.ID, index, bufSize, length, size,
                                       toScalarPtr(type), name);
    afterCommand(fnName);
}

// Calls glTransformFeedbackVaryingsEXT().
void EXTTransformFeedbackAPI::transformFeedbackVaryings(ProgramName program,
                                                        GLsizei count,
                                                        const GLchar *const*varyings,
                                                        GLenum bufferMode) const
{
    static const char *fnName = "glTransformFeedbackVaryingsEXT";

    beforeCommand(fnName, _api.glTransformFeedbackVaryings);
    _api.glTransformFeedbackVaryings(program.ID, count, varyings, bufferMode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTVertexArrayAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_vertex_array extension.
EXTVertexArrayAPI::EXTVertexArrayAPI() :
    BaseExtension("GL_EXT_vertex_array")
{
}

// Grant read-only access to the underlying function pointers.
const EXTVertexArray &EXTVertexArrayAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_vertex_array entry points.
void EXTVertexArrayAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glArrayElementEXT().
void EXTVertexArrayAPI::arrayElement(GLint i) const
{
    static const char *fnName = "glArrayElementEXT";

    beforeCommand(fnName, _api.glArrayElement);
    _api.glArrayElement(i);
    afterCommand(fnName);
}

// Calls glColorPointerEXT().
void EXTVertexArrayAPI::colorPointer(GLint size, ColorPointerType type,
                                     GLsizei stride, GLsizei count,
                                     const void *pointer) const
{
    static const char *fnName = "glColorPointerEXT";

    beforeCommand(fnName, _api.glColorPointer);
    _api.glColorPointer(size, toScalar(type), stride, count, pointer);
    afterCommand(fnName);
}

// Calls glDrawArraysEXT().
void EXTVertexArrayAPI::drawArrays(PrimitiveType mode, GLint first,
                                   GLsizei count) const
{
    static const char *fnName = "glDrawArraysEXT";

    beforeCommand(fnName, _api.glDrawArrays);
    _api.glDrawArrays(toScalar(mode), first, count);
    afterCommand(fnName);
}

// Calls glEdgeFlagPointerEXT().
void EXTVertexArrayAPI::edgeFlagPointer(GLsizei stride, GLsizei count,
                                        const Boolean *pointer) const
{
    static const char *fnName = "glEdgeFlagPointerEXT";

    beforeCommand(fnName, _api.glEdgeFlagPointer);
    _api.glEdgeFlagPointer(stride, count, toScalarPtr(pointer));
    afterCommand(fnName);
}

// Calls glGetPointervEXT().
void EXTVertexArrayAPI::getPointerV(GetPointervPName pname, void **params) const
{
    static const char *fnName = "glGetPointervEXT";

    beforeCommand(fnName, _api.glGetPointerv);
    _api.glGetPointerv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIndexPointerEXT().
void EXTVertexArrayAPI::indexPointer(IndexPointerType type, GLsizei stride,
                                     GLsizei count, const void *pointer) const
{
    static const char *fnName = "glIndexPointerEXT";

    beforeCommand(fnName, _api.glIndexPointer);
    _api.glIndexPointer(toScalar(type), stride, count, pointer);
    afterCommand(fnName);
}

// Calls glNormalPointerEXT().
void EXTVertexArrayAPI::normalPointer(NormalPointerType type, GLsizei stride,
                                      GLsizei count, const void *pointer) const
{
    static const char *fnName = "glNormalPointerEXT";

    beforeCommand(fnName, _api.glNormalPointer);
    _api.glNormalPointer(toScalar(type), stride, count, pointer);
    afterCommand(fnName);
}

// Calls glTexCoordPointerEXT().
void EXTVertexArrayAPI::texCoordPointer(GLint size, TexCoordPointerType type,
                                        GLsizei stride, GLsizei count,
                                        const void *pointer) const
{
    static const char *fnName = "glTexCoordPointerEXT";

    beforeCommand(fnName, _api.glTexCoordPointer);
    _api.glTexCoordPointer(size, toScalar(type), stride, count, pointer);
    afterCommand(fnName);
}

// Calls glVertexPointerEXT().
void EXTVertexArrayAPI::vertexPointer(GLint size, VertexPointerType type,
                                      GLsizei stride, GLsizei count,
                                      const void *pointer) const
{
    static const char *fnName = "glVertexPointerEXT";

    beforeCommand(fnName, _api.glVertexPointer);
    _api.glVertexPointer(size, toScalar(type), stride, count, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTVertexAttrib64BITAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_vertex_attrib_64bit extension.
EXTVertexAttrib64BITAPI::EXTVertexAttrib64BITAPI() :
    BaseExtension("GL_EXT_vertex_attrib_64bit")
{
}

// Grant read-only access to the underlying function pointers.
const EXTVertexAttrib64BIT &EXTVertexAttrib64BITAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_vertex_attrib_64bit entry points.
void EXTVertexAttrib64BITAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetVertexAttribLdvEXT().
void EXTVertexAttrib64BITAPI::getVertexAttribLDV(GLuint index,
                                                 VertexAttribEnum pname,
                                                 GLdouble *params) const
{
    static const char *fnName = "glGetVertexAttribLdvEXT";

    beforeCommand(fnName, _api.glGetVertexAttribLdv);
    _api.glGetVertexAttribLdv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glVertexAttribL1dEXT().
void EXTVertexAttrib64BITAPI::vertexAttribL1D(GLuint index, GLdouble x) const
{
    static const char *fnName = "glVertexAttribL1dEXT";

    beforeCommand(fnName, _api.glVertexAttribL1d);
    _api.glVertexAttribL1d(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribL1dvEXT().
void EXTVertexAttrib64BITAPI::vertexAttribL1DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribL1dvEXT";

    beforeCommand(fnName, _api.glVertexAttribL1dv);
    _api.glVertexAttribL1dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL2dEXT().
void EXTVertexAttrib64BITAPI::vertexAttribL2D(GLuint index, GLdouble x,
                                              GLdouble y) const
{
    static const char *fnName = "glVertexAttribL2dEXT";

    beforeCommand(fnName, _api.glVertexAttribL2d);
    _api.glVertexAttribL2d(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttribL2dvEXT().
void EXTVertexAttrib64BITAPI::vertexAttribL2DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribL2dvEXT";

    beforeCommand(fnName, _api.glVertexAttribL2dv);
    _api.glVertexAttribL2dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL3dEXT().
void EXTVertexAttrib64BITAPI::vertexAttribL3D(GLuint index, GLdouble x,
                                              GLdouble y, GLdouble z) const
{
    static const char *fnName = "glVertexAttribL3dEXT";

    beforeCommand(fnName, _api.glVertexAttribL3d);
    _api.glVertexAttribL3d(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttribL3dvEXT().
void EXTVertexAttrib64BITAPI::vertexAttribL3DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribL3dvEXT";

    beforeCommand(fnName, _api.glVertexAttribL3dv);
    _api.glVertexAttribL3dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL4dEXT().
void EXTVertexAttrib64BITAPI::vertexAttribL4D(GLuint index, GLdouble x,
                                              GLdouble y, GLdouble z, GLdouble w) const
{
    static const char *fnName = "glVertexAttribL4dEXT";

    beforeCommand(fnName, _api.glVertexAttribL4d);
    _api.glVertexAttribL4d(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttribL4dvEXT().
void EXTVertexAttrib64BITAPI::vertexAttribL4DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribL4dvEXT";

    beforeCommand(fnName, _api.glVertexAttribL4dv);
    _api.glVertexAttribL4dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribLPointerEXT().
void EXTVertexAttrib64BITAPI::vertexAttribLPointer(GLuint index, GLint size,
                                                   VertexAttribLType type,
                                                   GLsizei stride,
                                                   const void *pointer) const
{
    static const char *fnName = "glVertexAttribLPointerEXT";

    beforeCommand(fnName, _api.glVertexAttribLPointer);
    _api.glVertexAttribLPointer(index, size, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTVertexShaderAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_vertex_shader extension.
EXTVertexShaderAPI::EXTVertexShaderAPI() :
    BaseExtension("GL_EXT_vertex_shader")
{
}

// Grant read-only access to the underlying function pointers.
const EXTVertexShader &EXTVertexShaderAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_vertex_shader entry points.
void EXTVertexShaderAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginVertexShaderEXT().
void EXTVertexShaderAPI::beginVertexShader() const
{
    static const char *fnName = "glBeginVertexShaderEXT";

    beforeCommand(fnName, _api.glBeginVertexShader);
    _api.glBeginVertexShader();
    afterCommand(fnName);
}

// Calls glBindLightParameterEXT().
GLuint EXTVertexShaderAPI::bindLightParameter(LightName light, GLenum value) const
{
    static const char *fnName = "glBindLightParameterEXT";

    beforeCommand(fnName, _api.glBindLightParameter);
    GLuint result = _api.glBindLightParameter(toScalar(light), value);
    afterCommand(fnName);

    return result;
}

// Calls glBindMaterialParameterEXT().
GLuint EXTVertexShaderAPI::bindMaterialParameter(MaterialFace face, GLenum value) const
{
    static const char *fnName = "glBindMaterialParameterEXT";

    beforeCommand(fnName, _api.glBindMaterialParameter);
    GLuint result = _api.glBindMaterialParameter(toScalar(face), value);
    afterCommand(fnName);

    return result;
}

// Calls glBindParameterEXT().
GLuint EXTVertexShaderAPI::bindParameter(VertexShaderParameterEXT value) const
{
    static const char *fnName = "glBindParameterEXT";

    beforeCommand(fnName, _api.glBindParameter);
    GLuint result = _api.glBindParameter(toScalar(value));
    afterCommand(fnName);

    return result;
}

// Calls glBindTexGenParameterEXT().
GLuint EXTVertexShaderAPI::bindTexGenParameter(TextureUnit unit, GLenum coord,
                                               TextureGenParameter value) const
{
    static const char *fnName = "glBindTexGenParameterEXT";

    beforeCommand(fnName, _api.glBindTexGenParameter);
    GLuint result = _api.glBindTexGenParameter(toScalar(unit), coord,
                                               toScalar(value));
    afterCommand(fnName);

    return result;
}

// Calls glBindTextureUnitParameterEXT().
GLuint EXTVertexShaderAPI::bindTextureUnitParameter(TextureUnit unit,
                                                    GLenum value) const
{
    static const char *fnName = "glBindTextureUnitParameterEXT";

    beforeCommand(fnName, _api.glBindTextureUnitParameter);
    GLuint result = _api.glBindTextureUnitParameter(toScalar(unit), value);
    afterCommand(fnName);

    return result;
}

// Calls glBindVertexShaderEXT().
void EXTVertexShaderAPI::bindVertexShader(GLuint id) const
{
    static const char *fnName = "glBindVertexShaderEXT";

    beforeCommand(fnName, _api.glBindVertexShader);
    _api.glBindVertexShader(id);
    afterCommand(fnName);
}

// Calls glDeleteVertexShaderEXT().
void EXTVertexShaderAPI::deleteVertexShader(GLuint id) const
{
    static const char *fnName = "glDeleteVertexShaderEXT";

    beforeCommand(fnName, _api.glDeleteVertexShader);
    _api.glDeleteVertexShader(id);
    afterCommand(fnName);
}

// Calls glDisableVariantClientStateEXT().
void EXTVertexShaderAPI::disableVariantClientState(GLuint id) const
{
    static const char *fnName = "glDisableVariantClientStateEXT";

    beforeCommand(fnName, _api.glDisableVariantClientState);
    _api.glDisableVariantClientState(id);
    afterCommand(fnName);
}

// Calls glEnableVariantClientStateEXT().
void EXTVertexShaderAPI::enableVariantClientState(GLuint id) const
{
    static const char *fnName = "glEnableVariantClientStateEXT";

    beforeCommand(fnName, _api.glEnableVariantClientState);
    _api.glEnableVariantClientState(id);
    afterCommand(fnName);
}

// Calls glEndVertexShaderEXT().
void EXTVertexShaderAPI::endVertexShader() const
{
    static const char *fnName = "glEndVertexShaderEXT";

    beforeCommand(fnName, _api.glEndVertexShader);
    _api.glEndVertexShader();
    afterCommand(fnName);
}

// Calls glExtractComponentEXT().
void EXTVertexShaderAPI::extractComponent(GLuint res, GLuint src, GLuint num) const
{
    static const char *fnName = "glExtractComponentEXT";

    beforeCommand(fnName, _api.glExtractComponent);
    _api.glExtractComponent(res, src, num);
    afterCommand(fnName);
}

// Calls glGenSymbolsEXT().
GLuint EXTVertexShaderAPI::genSymbols(DataTypeEXT datatype,
                                      VertexShaderStorageTypeEXT storagetype,
                                      ParameterRangeEXT range, GLuint components) const
{
    static const char *fnName = "glGenSymbolsEXT";

    beforeCommand(fnName, _api.glGenSymbols);
    GLuint result = _api.glGenSymbols(toScalar(datatype), toScalar(storagetype),
                                      toScalar(range), components);
    afterCommand(fnName);

    return result;
}

// Calls glGenVertexShadersEXT().
GLuint EXTVertexShaderAPI::genVertexShaders(GLuint range) const
{
    static const char *fnName = "glGenVertexShadersEXT";

    beforeCommand(fnName, _api.glGenVertexShaders);
    GLuint result = _api.glGenVertexShaders(range);
    afterCommand(fnName);

    return result;
}

// Calls glGetInvariantBooleanvEXT().
void EXTVertexShaderAPI::getInvariantBooleanV(GLuint id,
                                              GetVariantValueEXT value,
                                              Boolean *data) const
{
    static const char *fnName = "glGetInvariantBooleanvEXT";

    beforeCommand(fnName, _api.glGetInvariantBooleanv);
    _api.glGetInvariantBooleanv(id, toScalar(value), toScalarPtr(data));
    afterCommand(fnName);
}

// Calls glGetInvariantFloatvEXT().
void EXTVertexShaderAPI::getInvariantFloatV(GLuint id, GetVariantValueEXT value,
                                            GLfloat *data) const
{
    static const char *fnName = "glGetInvariantFloatvEXT";

    beforeCommand(fnName, _api.glGetInvariantFloatv);
    _api.glGetInvariantFloatv(id, toScalar(value), data);
    afterCommand(fnName);
}

// Calls glGetInvariantIntegervEXT().
void EXTVertexShaderAPI::getInvariantIntegerV(GLuint id,
                                              GetVariantValueEXT value,
                                              GLint *data) const
{
    static const char *fnName = "glGetInvariantIntegervEXT";

    beforeCommand(fnName, _api.glGetInvariantIntegerv);
    _api.glGetInvariantIntegerv(id, toScalar(value), data);
    afterCommand(fnName);
}

// Calls glGetLocalConstantBooleanvEXT().
void EXTVertexShaderAPI::getLocalConstantBooleanV(GLuint id,
                                                  GetVariantValueEXT value,
                                                  Boolean *data) const
{
    static const char *fnName = "glGetLocalConstantBooleanvEXT";

    beforeCommand(fnName, _api.glGetLocalConstantBooleanv);
    _api.glGetLocalConstantBooleanv(id, toScalar(value), toScalarPtr(data));
    afterCommand(fnName);
}

// Calls glGetLocalConstantFloatvEXT().
void EXTVertexShaderAPI::getLocalConstantFloatV(GLuint id,
                                                GetVariantValueEXT value,
                                                GLfloat *data) const
{
    static const char *fnName = "glGetLocalConstantFloatvEXT";

    beforeCommand(fnName, _api.glGetLocalConstantFloatv);
    _api.glGetLocalConstantFloatv(id, toScalar(value), data);
    afterCommand(fnName);
}

// Calls glGetLocalConstantIntegervEXT().
void EXTVertexShaderAPI::getLocalConstantIntegerV(GLuint id,
                                                  GetVariantValueEXT value,
                                                  GLint *data) const
{
    static const char *fnName = "glGetLocalConstantIntegervEXT";

    beforeCommand(fnName, _api.glGetLocalConstantIntegerv);
    _api.glGetLocalConstantIntegerv(id, toScalar(value), data);
    afterCommand(fnName);
}

// Calls glGetVariantBooleanvEXT().
void EXTVertexShaderAPI::getVariantBooleanV(GLuint id, GetVariantValueEXT value,
                                            Boolean *data) const
{
    static const char *fnName = "glGetVariantBooleanvEXT";

    beforeCommand(fnName, _api.glGetVariantBooleanv);
    _api.glGetVariantBooleanv(id, toScalar(value), toScalarPtr(data));
    afterCommand(fnName);
}

// Calls glGetVariantFloatvEXT().
void EXTVertexShaderAPI::getVariantFloatV(GLuint id, GetVariantValueEXT value,
                                          GLfloat *data) const
{
    static const char *fnName = "glGetVariantFloatvEXT";

    beforeCommand(fnName, _api.glGetVariantFloatv);
    _api.glGetVariantFloatv(id, toScalar(value), data);
    afterCommand(fnName);
}

// Calls glGetVariantIntegervEXT().
void EXTVertexShaderAPI::getVariantIntegerV(GLuint id, GetVariantValueEXT value,
                                            GLint *data) const
{
    static const char *fnName = "glGetVariantIntegervEXT";

    beforeCommand(fnName, _api.glGetVariantIntegerv);
    _api.glGetVariantIntegerv(id, toScalar(value), data);
    afterCommand(fnName);
}

// Calls glGetVariantPointervEXT().
void EXTVertexShaderAPI::getVariantPointerV(GLuint id, GetVariantValueEXT value,
                                            void **data) const
{
    static const char *fnName = "glGetVariantPointervEXT";

    beforeCommand(fnName, _api.glGetVariantPointerv);
    _api.glGetVariantPointerv(id, toScalar(value), data);
    afterCommand(fnName);
}

// Calls glInsertComponentEXT().
void EXTVertexShaderAPI::insertComponent(GLuint res, GLuint src, GLuint num) const
{
    static const char *fnName = "glInsertComponentEXT";

    beforeCommand(fnName, _api.glInsertComponent);
    _api.glInsertComponent(res, src, num);
    afterCommand(fnName);
}

// Calls glIsVariantEnabledEXT().
Boolean EXTVertexShaderAPI::isVariantEnabled(GLuint id, VariantCapEXT cap) const
{
    static const char *fnName = "glIsVariantEnabledEXT";

    beforeCommand(fnName, _api.glIsVariantEnabled);
    GLboolean result = _api.glIsVariantEnabled(id, toScalar(cap));
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glSetInvariantEXT().
void EXTVertexShaderAPI::setInvariant(GLuint id, ScalarType type,
                                      const void *addr) const
{
    static const char *fnName = "glSetInvariantEXT";

    beforeCommand(fnName, _api.glSetInvariant);
    _api.glSetInvariant(id, toScalar(type), addr);
    afterCommand(fnName);
}

// Calls glSetLocalConstantEXT().
void EXTVertexShaderAPI::setLocalConstant(GLuint id, ScalarType type,
                                          const void *addr) const
{
    static const char *fnName = "glSetLocalConstantEXT";

    beforeCommand(fnName, _api.glSetLocalConstant);
    _api.glSetLocalConstant(id, toScalar(type), addr);
    afterCommand(fnName);
}

// Calls glShaderOp1EXT().
void EXTVertexShaderAPI::shaderOp1(VertexShaderOpEXT op, GLuint res, GLuint arg1) const
{
    static const char *fnName = "glShaderOp1EXT";

    beforeCommand(fnName, _api.glShaderOp1);
    _api.glShaderOp1(toScalar(op), res, arg1);
    afterCommand(fnName);
}

// Calls glShaderOp2EXT().
void EXTVertexShaderAPI::shaderOp2(VertexShaderOpEXT op, GLuint res, GLuint arg1,
                                   GLuint arg2) const
{
    static const char *fnName = "glShaderOp2EXT";

    beforeCommand(fnName, _api.glShaderOp2);
    _api.glShaderOp2(toScalar(op), res, arg1, arg2);
    afterCommand(fnName);
}

// Calls glShaderOp3EXT().
void EXTVertexShaderAPI::shaderOp3(VertexShaderOpEXT op, GLuint res, GLuint arg1,
                                   GLuint arg2, GLuint arg3) const
{
    static const char *fnName = "glShaderOp3EXT";

    beforeCommand(fnName, _api.glShaderOp3);
    _api.glShaderOp3(toScalar(op), res, arg1, arg2, arg3);
    afterCommand(fnName);
}

// Calls glSwizzleEXT().
void EXTVertexShaderAPI::swizzle(GLuint res, GLuint in,
                                 VertexShaderCoordOutEXT outX,
                                 VertexShaderCoordOutEXT outY,
                                 VertexShaderCoordOutEXT outZ,
                                 VertexShaderCoordOutEXT outW) const
{
    static const char *fnName = "glSwizzleEXT";

    beforeCommand(fnName, _api.glSwizzle);
    _api.glSwizzle(res, in, toScalar(outX), toScalar(outY), toScalar(outZ),
                   toScalar(outW));
    afterCommand(fnName);
}

// Calls glVariantPointerEXT().
void EXTVertexShaderAPI::variantPointer(GLuint id, ScalarType type,
                                        GLuint stride, const void *addr) const
{
    static const char *fnName = "glVariantPointerEXT";

    beforeCommand(fnName, _api.glVariantPointer);
    _api.glVariantPointer(id, toScalar(type), stride, addr);
    afterCommand(fnName);
}

// Calls glVariantbvEXT().
void EXTVertexShaderAPI::variantBV(GLuint id, const GLbyte *addr) const
{
    static const char *fnName = "glVariantbvEXT";

    beforeCommand(fnName, _api.glVariantbv);
    _api.glVariantbv(id, addr);
    afterCommand(fnName);
}

// Calls glVariantdvEXT().
void EXTVertexShaderAPI::variantDV(GLuint id, const GLdouble *addr) const
{
    static const char *fnName = "glVariantdvEXT";

    beforeCommand(fnName, _api.glVariantdv);
    _api.glVariantdv(id, addr);
    afterCommand(fnName);
}

// Calls glVariantfvEXT().
void EXTVertexShaderAPI::variantFV(GLuint id, const GLfloat *addr) const
{
    static const char *fnName = "glVariantfvEXT";

    beforeCommand(fnName, _api.glVariantfv);
    _api.glVariantfv(id, addr);
    afterCommand(fnName);
}

// Calls glVariantivEXT().
void EXTVertexShaderAPI::variantIV(GLuint id, const GLint *addr) const
{
    static const char *fnName = "glVariantivEXT";

    beforeCommand(fnName, _api.glVariantiv);
    _api.glVariantiv(id, addr);
    afterCommand(fnName);
}

// Calls glVariantsvEXT().
void EXTVertexShaderAPI::variantSV(GLuint id, const GLshort *addr) const
{
    static const char *fnName = "glVariantsvEXT";

    beforeCommand(fnName, _api.glVariantsv);
    _api.glVariantsv(id, addr);
    afterCommand(fnName);
}

// Calls glVariantubvEXT().
void EXTVertexShaderAPI::variantUBV(GLuint id, const GLubyte *addr) const
{
    static const char *fnName = "glVariantubvEXT";

    beforeCommand(fnName, _api.glVariantubv);
    _api.glVariantubv(id, addr);
    afterCommand(fnName);
}

// Calls glVariantuivEXT().
void EXTVertexShaderAPI::variantUIV(GLuint id, const GLuint *addr) const
{
    static const char *fnName = "glVariantuivEXT";

    beforeCommand(fnName, _api.glVariantuiv);
    _api.glVariantuiv(id, addr);
    afterCommand(fnName);
}

// Calls glVariantusvEXT().
void EXTVertexShaderAPI::variantUSV(GLuint id, const GLushort *addr) const
{
    static const char *fnName = "glVariantusvEXT";

    beforeCommand(fnName, _api.glVariantusv);
    _api.glVariantusv(id, addr);
    afterCommand(fnName);
}

// Calls glWriteMaskEXT().
void EXTVertexShaderAPI::writeMask(GLuint res, GLuint in,
                                   VertexShaderWriteMaskEXT outX,
                                   VertexShaderWriteMaskEXT outY,
                                   VertexShaderWriteMaskEXT outZ,
                                   VertexShaderWriteMaskEXT outW) const
{
    static const char *fnName = "glWriteMaskEXT";

    beforeCommand(fnName, _api.glWriteMask);
    _api.glWriteMask(res, in, toScalar(outX), toScalar(outY), toScalar(outZ),
                     toScalar(outW));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTVertexWeightingAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_vertex_weighting extension.
EXTVertexWeightingAPI::EXTVertexWeightingAPI() :
    BaseExtension("GL_EXT_vertex_weighting")
{
}

// Grant read-only access to the underlying function pointers.
const EXTVertexWeighting &EXTVertexWeightingAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_vertex_weighting entry points.
void EXTVertexWeightingAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glVertexWeightPointerEXT().
void EXTVertexWeightingAPI::vertexWeightPointer(GLint size,
                                                VertexWeightPointerTypeEXT type,
                                                GLsizei stride,
                                                const void *pointer) const
{
    static const char *fnName = "glVertexWeightPointerEXT";

    beforeCommand(fnName, _api.glVertexWeightPointer);
    _api.glVertexWeightPointer(size, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glVertexWeightfEXT().
void EXTVertexWeightingAPI::vertexWeightF(GLfloat weight) const
{
    static const char *fnName = "glVertexWeightfEXT";

    beforeCommand(fnName, _api.glVertexWeightf);
    _api.glVertexWeightf(weight);
    afterCommand(fnName);
}

// Calls glVertexWeightfvEXT().
void EXTVertexWeightingAPI::vertexWeightFV(const GLfloat *weight) const
{
    static const char *fnName = "glVertexWeightfvEXT";

    beforeCommand(fnName, _api.glVertexWeightfv);
    _api.glVertexWeightfv(weight);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTWIN32KeyedMutexAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_win32_keyed_mutex extension.
EXTWIN32KeyedMutexAPI::EXTWIN32KeyedMutexAPI() :
    BaseExtension("GL_EXT_win32_keyed_mutex")
{
}

// Grant read-only access to the underlying function pointers.
const EXTWIN32KeyedMutex &EXTWIN32KeyedMutexAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_win32_keyed_mutex entry points.
void EXTWIN32KeyedMutexAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAcquireKeyedMutexWin32EXT().
Boolean EXTWIN32KeyedMutexAPI::acquireKeyedMutexWIN32(GLuint memory,
                                                      GLuint64 key,
                                                      GLuint timeout) const
{
    static const char *fnName = "glAcquireKeyedMutexWin32EXT";

    beforeCommand(fnName, _api.glAcquireKeyedMutexWin32);
    GLboolean result = _api.glAcquireKeyedMutexWin32(memory, key, timeout);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glReleaseKeyedMutexWin32EXT().
Boolean EXTWIN32KeyedMutexAPI::releaseKeyedMutexWIN32(GLuint memory,
                                                      GLuint64 key) const
{
    static const char *fnName = "glReleaseKeyedMutexWin32EXT";

    beforeCommand(fnName, _api.glReleaseKeyedMutexWin32);
    GLboolean result = _api.glReleaseKeyedMutexWin32(memory, key);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

////////////////////////////////////////////////////////////////////////////////
// EXTWindowRectanglesAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_window_rectangles extension.
EXTWindowRectanglesAPI::EXTWindowRectanglesAPI() :
    BaseExtension("GL_EXT_window_rectangles")
{
}

// Grant read-only access to the underlying function pointers.
const EXTWindowRectangles &EXTWindowRectanglesAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_window_rectangles entry points.
void EXTWindowRectanglesAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glWindowRectanglesEXT().
void EXTWindowRectanglesAPI::windowRectangles(GLenum mode, GLsizei count,
                                              const GLint *box) const
{
    static const char *fnName = "glWindowRectanglesEXT";

    beforeCommand(fnName, _api.glWindowRectangles);
    _api.glWindowRectangles(mode, count, box);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// EXTX11SyncObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_EXT_x11_sync_object extension.
EXTX11SyncObjectAPI::EXTX11SyncObjectAPI() :
    BaseExtension("GL_EXT_x11_sync_object")
{
}

// Grant read-only access to the underlying function pointers.
const EXTX11SyncObject &EXTX11SyncObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_EXT_x11_sync_object entry points.
void EXTX11SyncObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glImportSyncEXT().
SyncName EXTX11SyncObjectAPI::importSync(GLenum external_sync_type,
                                         GLintptr external_sync,
                                         GLbitfield flags) const
{
    static const char *fnName = "glImportSyncEXT";

    beforeCommand(fnName, _api.glImportSync);
    GLsync result = _api.glImportSync(external_sync_type, external_sync, flags);
    afterCommand(fnName);

    return SyncName(result);
}

////////////////////////////////////////////////////////////////////////////////
// GremedyFrameTerminatorAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_GREMEDY_frame_terminator extension.
GremedyFrameTerminatorAPI::GremedyFrameTerminatorAPI() :
    BaseExtension("GL_GREMEDY_frame_terminator")
{
}

// Grant read-only access to the underlying function pointers.
const GremedyFrameTerminator &GremedyFrameTerminatorAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_GREMEDY_frame_terminator entry points.
void GremedyFrameTerminatorAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFrameTerminatorGREMEDY().
void GremedyFrameTerminatorAPI::frameTerminatorGremedy() const
{
    static const char *fnName = "glFrameTerminatorGREMEDY";

    beforeCommand(fnName, _api.glFrameTerminatorGREMEDY);
    _api.glFrameTerminatorGREMEDY();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// GremedyStringMarkerAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_GREMEDY_string_marker extension.
GremedyStringMarkerAPI::GremedyStringMarkerAPI() :
    BaseExtension("GL_GREMEDY_string_marker")
{
}

// Grant read-only access to the underlying function pointers.
const GremedyStringMarker &GremedyStringMarkerAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_GREMEDY_string_marker entry points.
void GremedyStringMarkerAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glStringMarkerGREMEDY().
void GremedyStringMarkerAPI::stringMarkerGremedy(GLsizei len, const void *string) const
{
    static const char *fnName = "glStringMarkerGREMEDY";

    beforeCommand(fnName, _api.glStringMarkerGREMEDY);
    _api.glStringMarkerGREMEDY(len, string);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// HPImageTransformAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_HP_image_transform extension.
HPImageTransformAPI::HPImageTransformAPI() :
    BaseExtension("GL_HP_image_transform")
{
}

// Grant read-only access to the underlying function pointers.
const HPImageTransform &HPImageTransformAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_HP_image_transform entry points.
void HPImageTransformAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetImageTransformParameterfvHP().
void HPImageTransformAPI::getImageTransformParameterFV(ImageTransformTargetHP target,
                                                       ImageTransformPNameHP pname,
                                                       GLfloat *params) const
{
    static const char *fnName = "glGetImageTransformParameterfvHP";

    beforeCommand(fnName, _api.glGetImageTransformParameterfv);
    _api.glGetImageTransformParameterfv(toScalar(target), toScalar(pname),
                                        params);
    afterCommand(fnName);
}

// Calls glGetImageTransformParameterivHP().
void HPImageTransformAPI::getImageTransformParameterIV(ImageTransformTargetHP target,
                                                       ImageTransformPNameHP pname,
                                                       GLint *params) const
{
    static const char *fnName = "glGetImageTransformParameterivHP";

    beforeCommand(fnName, _api.glGetImageTransformParameteriv);
    _api.glGetImageTransformParameteriv(toScalar(target), toScalar(pname),
                                        params);
    afterCommand(fnName);
}

// Calls glImageTransformParameterfHP().
void HPImageTransformAPI::imageTransformParameterF(ImageTransformTargetHP target,
                                                   ImageTransformPNameHP pname,
                                                   GLfloat param) const
{
    static const char *fnName = "glImageTransformParameterfHP";

    beforeCommand(fnName, _api.glImageTransformParameterf);
    _api.glImageTransformParameterf(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glImageTransformParameterfvHP().
void HPImageTransformAPI::imageTransformParameterFV(ImageTransformTargetHP target,
                                                    ImageTransformPNameHP pname,
                                                    const GLfloat *params) const
{
    static const char *fnName = "glImageTransformParameterfvHP";

    beforeCommand(fnName, _api.glImageTransformParameterfv);
    _api.glImageTransformParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glImageTransformParameteriHP().
void HPImageTransformAPI::imageTransformParameterI(ImageTransformTargetHP target,
                                                   ImageTransformPNameHP pname,
                                                   GLint param) const
{
    static const char *fnName = "glImageTransformParameteriHP";

    beforeCommand(fnName, _api.glImageTransformParameteri);
    _api.glImageTransformParameteri(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glImageTransformParameterivHP().
void HPImageTransformAPI::imageTransformParameterIV(ImageTransformTargetHP target,
                                                    ImageTransformPNameHP pname,
                                                    const GLint *params) const
{
    static const char *fnName = "glImageTransformParameterivHP";

    beforeCommand(fnName, _api.glImageTransformParameteriv);
    _api.glImageTransformParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// IBMMultimodeDrawArraysAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_IBM_multimode_draw_arrays extension.
IBMMultimodeDrawArraysAPI::IBMMultimodeDrawArraysAPI() :
    BaseExtension("GL_IBM_multimode_draw_arrays")
{
}

// Grant read-only access to the underlying function pointers.
const IBMMultimodeDrawArrays &IBMMultimodeDrawArraysAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_IBM_multimode_draw_arrays entry points.
void IBMMultimodeDrawArraysAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMultiModeDrawArraysIBM().
void IBMMultimodeDrawArraysAPI::multiModeDrawArrays(const PrimitiveType *mode,
                                                    const GLint *first,
                                                    const GLsizei *count,
                                                    GLsizei primcount,
                                                    GLint modestride) const
{
    static const char *fnName = "glMultiModeDrawArraysIBM";

    beforeCommand(fnName, _api.glMultiModeDrawArrays);
    _api.glMultiModeDrawArrays(toScalarPtr(mode), first, count, primcount,
                               modestride);
    afterCommand(fnName);
}

// Calls glMultiModeDrawElementsIBM().
void IBMMultimodeDrawArraysAPI::multiModeDrawElements(const PrimitiveType *mode,
                                                      const GLsizei *count,
                                                      DrawElementsType type,
                                                      const void *const*indices,
                                                      GLsizei primcount,
                                                      GLint modestride) const
{
    static const char *fnName = "glMultiModeDrawElementsIBM";

    beforeCommand(fnName, _api.glMultiModeDrawElements);
    _api.glMultiModeDrawElements(toScalarPtr(mode), count, toScalar(type),
                                 indices, primcount, modestride);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// IBMStaticDataAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_IBM_static_data extension.
IBMStaticDataAPI::IBMStaticDataAPI() :
    BaseExtension("GL_IBM_static_data")
{
}

// Grant read-only access to the underlying function pointers.
const IBMStaticData &IBMStaticDataAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_IBM_static_data entry points.
void IBMStaticDataAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFlushStaticDataIBM().
void IBMStaticDataAPI::flushStaticData(GLenum target) const
{
    static const char *fnName = "glFlushStaticDataIBM";

    beforeCommand(fnName, _api.glFlushStaticData);
    _api.glFlushStaticData(target);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// IBMVertexArrayListsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_IBM_vertex_array_lists extension.
IBMVertexArrayListsAPI::IBMVertexArrayListsAPI() :
    BaseExtension("GL_IBM_vertex_array_lists")
{
}

// Grant read-only access to the underlying function pointers.
const IBMVertexArrayLists &IBMVertexArrayListsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_IBM_vertex_array_lists entry points.
void IBMVertexArrayListsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glColorPointerListIBM().
void IBMVertexArrayListsAPI::colorPointerList(GLint size, ColorPointerType type,
                                              GLint stride, const void **pointer,
                                              GLint ptrstride) const
{
    static const char *fnName = "glColorPointerListIBM";

    beforeCommand(fnName, _api.glColorPointerList);
    _api.glColorPointerList(size, toScalar(type), stride, pointer, ptrstride);
    afterCommand(fnName);
}

// Calls glEdgeFlagPointerListIBM().
void IBMVertexArrayListsAPI::edgeFlagPointerList(GLint stride,
                                                 const GLboolean **pointer,
                                                 GLint ptrstride) const
{
    static const char *fnName = "glEdgeFlagPointerListIBM";

    beforeCommand(fnName, _api.glEdgeFlagPointerList);
    _api.glEdgeFlagPointerList(stride, pointer, ptrstride);
    afterCommand(fnName);
}

// Calls glFogCoordPointerListIBM().
void IBMVertexArrayListsAPI::fogCoordPointerList(FogPointerTypeIBM type,
                                                 GLint stride,
                                                 const void **pointer,
                                                 GLint ptrstride) const
{
    static const char *fnName = "glFogCoordPointerListIBM";

    beforeCommand(fnName, _api.glFogCoordPointerList);
    _api.glFogCoordPointerList(toScalar(type), stride, pointer, ptrstride);
    afterCommand(fnName);
}

// Calls glIndexPointerListIBM().
void IBMVertexArrayListsAPI::indexPointerList(IndexPointerType type,
                                              GLint stride, const void **pointer,
                                              GLint ptrstride) const
{
    static const char *fnName = "glIndexPointerListIBM";

    beforeCommand(fnName, _api.glIndexPointerList);
    _api.glIndexPointerList(toScalar(type), stride, pointer, ptrstride);
    afterCommand(fnName);
}

// Calls glNormalPointerListIBM().
void IBMVertexArrayListsAPI::normalPointerList(NormalPointerType type,
                                               GLint stride,
                                               const void **pointer,
                                               GLint ptrstride) const
{
    static const char *fnName = "glNormalPointerListIBM";

    beforeCommand(fnName, _api.glNormalPointerList);
    _api.glNormalPointerList(toScalar(type), stride, pointer, ptrstride);
    afterCommand(fnName);
}

// Calls glSecondaryColorPointerListIBM().
void IBMVertexArrayListsAPI::secondaryColorPointerList(GLint size,
                                                       SecondaryColorPointerTypeIBM type,
                                                       GLint stride,
                                                       const void **pointer,
                                                       GLint ptrstride) const
{
    static const char *fnName = "glSecondaryColorPointerListIBM";

    beforeCommand(fnName, _api.glSecondaryColorPointerList);
    _api.glSecondaryColorPointerList(size, toScalar(type), stride, pointer,
                                     ptrstride);
    afterCommand(fnName);
}

// Calls glTexCoordPointerListIBM().
void IBMVertexArrayListsAPI::texCoordPointerList(GLint size,
                                                 TexCoordPointerType type,
                                                 GLint stride,
                                                 const void **pointer,
                                                 GLint ptrstride) const
{
    static const char *fnName = "glTexCoordPointerListIBM";

    beforeCommand(fnName, _api.glTexCoordPointerList);
    _api.glTexCoordPointerList(size, toScalar(type), stride, pointer, ptrstride);
    afterCommand(fnName);
}

// Calls glVertexPointerListIBM().
void IBMVertexArrayListsAPI::vertexPointerList(GLint size,
                                               VertexPointerType type,
                                               GLint stride,
                                               const void **pointer,
                                               GLint ptrstride) const
{
    static const char *fnName = "glVertexPointerListIBM";

    beforeCommand(fnName, _api.glVertexPointerList);
    _api.glVertexPointerList(size, toScalar(type), stride, pointer, ptrstride);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// IngrBlendFuncSeparateAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_INGR_blend_func_separate extension.
IngrBlendFuncSeparateAPI::IngrBlendFuncSeparateAPI() :
    BaseExtension("GL_INGR_blend_func_separate")
{
}

// Grant read-only access to the underlying function pointers.
const IngrBlendFuncSeparate &IngrBlendFuncSeparateAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_INGR_blend_func_separate entry points.
void IngrBlendFuncSeparateAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendFuncSeparateINGR().
void IngrBlendFuncSeparateAPI::blendFuncSeparateIngr(BlendingFactor sfactorRGB,
                                                     BlendingFactor dfactorRGB,
                                                     BlendingFactor sfactorAlpha,
                                                     BlendingFactor dfactorAlpha) const
{
    static const char *fnName = "glBlendFuncSeparateINGR";

    beforeCommand(fnName, _api.glBlendFuncSeparateINGR);
    _api.glBlendFuncSeparateINGR(toScalar(sfactorRGB), toScalar(dfactorRGB),
                                 toScalar(sfactorAlpha), toScalar(dfactorAlpha));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// INTELFramebufferCmaaAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_INTEL_framebuffer_CMAA extension.
INTELFramebufferCmaaAPI::INTELFramebufferCmaaAPI() :
    BaseExtension("GL_INTEL_framebuffer_CMAA")
{
}

// Grant read-only access to the underlying function pointers.
const INTELFramebufferCmaa &INTELFramebufferCmaaAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_INTEL_framebuffer_CMAA entry points.
void INTELFramebufferCmaaAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glApplyFramebufferAttachmentCMAAINTEL().
void INTELFramebufferCmaaAPI::applyFramebufferAttachmentCmaa() const
{
    static const char *fnName = "glApplyFramebufferAttachmentCMAAINTEL";

    beforeCommand(fnName, _api.glApplyFramebufferAttachmentCMAA);
    _api.glApplyFramebufferAttachmentCMAA();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// INTELMapTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_INTEL_map_texture extension.
INTELMapTextureAPI::INTELMapTextureAPI() :
    BaseExtension("GL_INTEL_map_texture")
{
}

// Grant read-only access to the underlying function pointers.
const INTELMapTexture &INTELMapTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_INTEL_map_texture entry points.
void INTELMapTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMapTexture2DINTEL().
void *INTELMapTextureAPI::mapTexture2D(TextureName texture, GLint level,
                                       GLbitfield access, GLint *stride,
                                       GLenum *layout) const
{
    static const char *fnName = "glMapTexture2DINTEL";

    beforeCommand(fnName, _api.glMapTexture2D);
    void *result = _api.glMapTexture2D(texture.ID, level, access, stride, layout);
    afterCommand(fnName);

    return result;
}

// Calls glSyncTextureINTEL().
void INTELMapTextureAPI::syncTexture(TextureName texture) const
{
    static const char *fnName = "glSyncTextureINTEL";

    beforeCommand(fnName, _api.glSyncTexture);
    _api.glSyncTexture(texture.ID);
    afterCommand(fnName);
}

// Calls glUnmapTexture2DINTEL().
void INTELMapTextureAPI::unmapTexture2D(TextureName texture, GLint level) const
{
    static const char *fnName = "glUnmapTexture2DINTEL";

    beforeCommand(fnName, _api.glUnmapTexture2D);
    _api.glUnmapTexture2D(texture.ID, level);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// INTELParallelArraysAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_INTEL_parallel_arrays extension.
INTELParallelArraysAPI::INTELParallelArraysAPI() :
    BaseExtension("GL_INTEL_parallel_arrays")
{
}

// Grant read-only access to the underlying function pointers.
const INTELParallelArrays &INTELParallelArraysAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_INTEL_parallel_arrays entry points.
void INTELParallelArraysAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glColorPointervINTEL().
void INTELParallelArraysAPI::colorPointerV(GLint size, VertexPointerType type,
                                           const void **pointer) const
{
    static const char *fnName = "glColorPointervINTEL";

    beforeCommand(fnName, _api.glColorPointerv);
    _api.glColorPointerv(size, toScalar(type), pointer);
    afterCommand(fnName);
}

// Calls glNormalPointervINTEL().
void INTELParallelArraysAPI::normalPointerV(NormalPointerType type,
                                            const void **pointer) const
{
    static const char *fnName = "glNormalPointervINTEL";

    beforeCommand(fnName, _api.glNormalPointerv);
    _api.glNormalPointerv(toScalar(type), pointer);
    afterCommand(fnName);
}

// Calls glTexCoordPointervINTEL().
void INTELParallelArraysAPI::texCoordPointerV(GLint size, VertexPointerType type,
                                              const void **pointer) const
{
    static const char *fnName = "glTexCoordPointervINTEL";

    beforeCommand(fnName, _api.glTexCoordPointerv);
    _api.glTexCoordPointerv(size, toScalar(type), pointer);
    afterCommand(fnName);
}

// Calls glVertexPointervINTEL().
void INTELParallelArraysAPI::vertexPointerV(GLint size, VertexPointerType type,
                                            const void **pointer) const
{
    static const char *fnName = "glVertexPointervINTEL";

    beforeCommand(fnName, _api.glVertexPointerv);
    _api.glVertexPointerv(size, toScalar(type), pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// INTELPerformanceQueryAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_INTEL_performance_query extension.
INTELPerformanceQueryAPI::INTELPerformanceQueryAPI() :
    BaseExtension("GL_INTEL_performance_query")
{
}

// Grant read-only access to the underlying function pointers.
const INTELPerformanceQuery &INTELPerformanceQueryAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_INTEL_performance_query entry points.
void INTELPerformanceQueryAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginPerfQueryINTEL().
void INTELPerformanceQueryAPI::beginPerfQuery(GLuint queryHandle) const
{
    static const char *fnName = "glBeginPerfQueryINTEL";

    beforeCommand(fnName, _api.glBeginPerfQuery);
    _api.glBeginPerfQuery(queryHandle);
    afterCommand(fnName);
}

// Calls glCreatePerfQueryINTEL().
void INTELPerformanceQueryAPI::createPerfQuery(GLuint queryId,
                                               GLuint *queryHandle) const
{
    static const char *fnName = "glCreatePerfQueryINTEL";

    beforeCommand(fnName, _api.glCreatePerfQuery);
    _api.glCreatePerfQuery(queryId, queryHandle);
    afterCommand(fnName);
}

// Calls glDeletePerfQueryINTEL().
void INTELPerformanceQueryAPI::deletePerfQuery(GLuint queryHandle) const
{
    static const char *fnName = "glDeletePerfQueryINTEL";

    beforeCommand(fnName, _api.glDeletePerfQuery);
    _api.glDeletePerfQuery(queryHandle);
    afterCommand(fnName);
}

// Calls glEndPerfQueryINTEL().
void INTELPerformanceQueryAPI::endPerfQuery(GLuint queryHandle) const
{
    static const char *fnName = "glEndPerfQueryINTEL";

    beforeCommand(fnName, _api.glEndPerfQuery);
    _api.glEndPerfQuery(queryHandle);
    afterCommand(fnName);
}

// Calls glGetFirstPerfQueryIdINTEL().
void INTELPerformanceQueryAPI::getFirstPerfQueryID(GLuint *queryId) const
{
    static const char *fnName = "glGetFirstPerfQueryIdINTEL";

    beforeCommand(fnName, _api.glGetFirstPerfQueryId);
    _api.glGetFirstPerfQueryId(queryId);
    afterCommand(fnName);
}

// Calls glGetNextPerfQueryIdINTEL().
void INTELPerformanceQueryAPI::getNextPerfQueryID(GLuint queryId,
                                                  GLuint *nextQueryId) const
{
    static const char *fnName = "glGetNextPerfQueryIdINTEL";

    beforeCommand(fnName, _api.glGetNextPerfQueryId);
    _api.glGetNextPerfQueryId(queryId, nextQueryId);
    afterCommand(fnName);
}

// Calls glGetPerfCounterInfoINTEL().
void INTELPerformanceQueryAPI::getPerfCounterInfo(GLuint queryId,
                                                  GLuint counterId,
                                                  GLuint counterNameLength,
                                                  GLchar *counterName,
                                                  GLuint counterDescLength,
                                                  GLchar *counterDesc,
                                                  GLuint *counterOffset,
                                                  GLuint *counterDataSize,
                                                  GLuint *counterTypeEnum,
                                                  GLuint *counterDataTypeEnum,
                                                  GLuint64 *rawCounterMaxValue) const
{
    static const char *fnName = "glGetPerfCounterInfoINTEL";

    beforeCommand(fnName, _api.glGetPerfCounterInfo);
    _api.glGetPerfCounterInfo(queryId, counterId, counterNameLength, counterName,
                              counterDescLength, counterDesc, counterOffset,
                              counterDataSize, counterTypeEnum,
                              counterDataTypeEnum, rawCounterMaxValue);
    afterCommand(fnName);
}

// Calls glGetPerfQueryDataINTEL().
void INTELPerformanceQueryAPI::getPerfQueryData(GLuint queryHandle, GLuint flags,
                                                GLsizei dataSize, void *data,
                                                GLuint *bytesWritten) const
{
    static const char *fnName = "glGetPerfQueryDataINTEL";

    beforeCommand(fnName, _api.glGetPerfQueryData);
    _api.glGetPerfQueryData(queryHandle, flags, dataSize, data, bytesWritten);
    afterCommand(fnName);
}

// Calls glGetPerfQueryIdByNameINTEL().
void INTELPerformanceQueryAPI::getPerfQueryIDByName(GLchar *queryName,
                                                    GLuint *queryId) const
{
    static const char *fnName = "glGetPerfQueryIdByNameINTEL";

    beforeCommand(fnName, _api.glGetPerfQueryIdByName);
    _api.glGetPerfQueryIdByName(queryName, queryId);
    afterCommand(fnName);
}

// Calls glGetPerfQueryInfoINTEL().
void INTELPerformanceQueryAPI::getPerfQueryInfo(GLuint queryId,
                                                GLuint queryNameLength,
                                                GLchar *queryName,
                                                GLuint *dataSize,
                                                GLuint *noCounters,
                                                GLuint *noInstances,
                                                GLuint *capsMask) const
{
    static const char *fnName = "glGetPerfQueryInfoINTEL";

    beforeCommand(fnName, _api.glGetPerfQueryInfo);
    _api.glGetPerfQueryInfo(queryId, queryNameLength, queryName, dataSize,
                            noCounters, noInstances, capsMask);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// KHRBlendEquationAdvancedAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_KHR_blend_equation_advanced extension.
KHRBlendEquationAdvancedAPI::KHRBlendEquationAdvancedAPI() :
    BaseExtension("GL_KHR_blend_equation_advanced")
{
}

// Grant read-only access to the underlying function pointers.
const KHRBlendEquationAdvanced &KHRBlendEquationAdvancedAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_KHR_blend_equation_advanced entry points.
void KHRBlendEquationAdvancedAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendBarrierKHR().
void KHRBlendEquationAdvancedAPI::blendBarrier() const
{
    static const char *fnName = "glBlendBarrierKHR";

    beforeCommand(fnName, _api.glBlendBarrier);
    _api.glBlendBarrier();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// KHRParallelShaderCompileAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_KHR_parallel_shader_compile extension.
KHRParallelShaderCompileAPI::KHRParallelShaderCompileAPI() :
    BaseExtension("GL_KHR_parallel_shader_compile")
{
}

// Grant read-only access to the underlying function pointers.
const KHRParallelShaderCompile &KHRParallelShaderCompileAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_KHR_parallel_shader_compile entry points.
void KHRParallelShaderCompileAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMaxShaderCompilerThreadsKHR().
void KHRParallelShaderCompileAPI::maxShaderCompilerThreads(GLuint count) const
{
    static const char *fnName = "glMaxShaderCompilerThreadsKHR";

    beforeCommand(fnName, _api.glMaxShaderCompilerThreads);
    _api.glMaxShaderCompilerThreads(count);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// MESAFramebufferFlipYAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_MESA_framebuffer_flip_y extension.
MESAFramebufferFlipYAPI::MESAFramebufferFlipYAPI() :
    BaseExtension("GL_MESA_framebuffer_flip_y")
{
}

// Grant read-only access to the underlying function pointers.
const MESAFramebufferFlipY &MESAFramebufferFlipYAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_MESA_framebuffer_flip_y entry points.
void MESAFramebufferFlipYAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFramebufferParameteriMESA().
void MESAFramebufferFlipYAPI::framebufferParameterI(FramebufferTarget target,
                                                    FramebufferParameterName pname,
                                                    GLint param) const
{
    static const char *fnName = "glFramebufferParameteriMESA";

    beforeCommand(fnName, _api.glFramebufferParameteri);
    _api.glFramebufferParameteri(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glGetFramebufferParameterivMESA().
void MESAFramebufferFlipYAPI::getFramebufferParameterIV(FramebufferTarget target,
                                                        FramebufferAttachmentParameterName pname,
                                                        GLint *params) const
{
    static const char *fnName = "glGetFramebufferParameterivMESA";

    beforeCommand(fnName, _api.glGetFramebufferParameteriv);
    _api.glGetFramebufferParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// MESAResizeBuffersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_MESA_resize_buffers extension.
MESAResizeBuffersAPI::MESAResizeBuffersAPI() :
    BaseExtension("GL_MESA_resize_buffers")
{
}

// Grant read-only access to the underlying function pointers.
const MESAResizeBuffers &MESAResizeBuffersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_MESA_resize_buffers entry points.
void MESAResizeBuffersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glResizeBuffersMESA().
void MESAResizeBuffersAPI::resizeBuffers() const
{
    static const char *fnName = "glResizeBuffersMESA";

    beforeCommand(fnName, _api.glResizeBuffers);
    _api.glResizeBuffers();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// MESAWindowPosAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_MESA_window_pos extension.
MESAWindowPosAPI::MESAWindowPosAPI() :
    BaseExtension("GL_MESA_window_pos")
{
}

// Grant read-only access to the underlying function pointers.
const MESAWindowPos &MESAWindowPosAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_MESA_window_pos entry points.
void MESAWindowPosAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glWindowPos2dMESA().
void MESAWindowPosAPI::windowPOS2D(GLdouble x, GLdouble y) const
{
    static const char *fnName = "glWindowPos2dMESA";

    beforeCommand(fnName, _api.glWindowPos2d);
    _api.glWindowPos2d(x, y);
    afterCommand(fnName);
}

// Calls glWindowPos2dvMESA().
void MESAWindowPosAPI::windowPOS2DV(const GLdouble *v) const
{
    static const char *fnName = "glWindowPos2dvMESA";

    beforeCommand(fnName, _api.glWindowPos2dv);
    _api.glWindowPos2dv(v);
    afterCommand(fnName);
}

// Calls glWindowPos2fMESA().
void MESAWindowPosAPI::windowPOS2F(GLfloat x, GLfloat y) const
{
    static const char *fnName = "glWindowPos2fMESA";

    beforeCommand(fnName, _api.glWindowPos2f);
    _api.glWindowPos2f(x, y);
    afterCommand(fnName);
}

// Calls glWindowPos2fvMESA().
void MESAWindowPosAPI::windowPOS2FV(const GLfloat *v) const
{
    static const char *fnName = "glWindowPos2fvMESA";

    beforeCommand(fnName, _api.glWindowPos2fv);
    _api.glWindowPos2fv(v);
    afterCommand(fnName);
}

// Calls glWindowPos2iMESA().
void MESAWindowPosAPI::windowPOS2I(GLint x, GLint y) const
{
    static const char *fnName = "glWindowPos2iMESA";

    beforeCommand(fnName, _api.glWindowPos2i);
    _api.glWindowPos2i(x, y);
    afterCommand(fnName);
}

// Calls glWindowPos2ivMESA().
void MESAWindowPosAPI::windowPOS2IV(const GLint *v) const
{
    static const char *fnName = "glWindowPos2ivMESA";

    beforeCommand(fnName, _api.glWindowPos2iv);
    _api.glWindowPos2iv(v);
    afterCommand(fnName);
}

// Calls glWindowPos2sMESA().
void MESAWindowPosAPI::windowPOS2S(GLshort x, GLshort y) const
{
    static const char *fnName = "glWindowPos2sMESA";

    beforeCommand(fnName, _api.glWindowPos2s);
    _api.glWindowPos2s(x, y);
    afterCommand(fnName);
}

// Calls glWindowPos2svMESA().
void MESAWindowPosAPI::windowPOS2SV(const GLshort *v) const
{
    static const char *fnName = "glWindowPos2svMESA";

    beforeCommand(fnName, _api.glWindowPos2sv);
    _api.glWindowPos2sv(v);
    afterCommand(fnName);
}

// Calls glWindowPos3dMESA().
void MESAWindowPosAPI::windowPOS3D(GLdouble x, GLdouble y, GLdouble z) const
{
    static const char *fnName = "glWindowPos3dMESA";

    beforeCommand(fnName, _api.glWindowPos3d);
    _api.glWindowPos3d(x, y, z);
    afterCommand(fnName);
}

// Calls glWindowPos3dvMESA().
void MESAWindowPosAPI::windowPOS3DV(const GLdouble *v) const
{
    static const char *fnName = "glWindowPos3dvMESA";

    beforeCommand(fnName, _api.glWindowPos3dv);
    _api.glWindowPos3dv(v);
    afterCommand(fnName);
}

// Calls glWindowPos3fMESA().
void MESAWindowPosAPI::windowPOS3F(GLfloat x, GLfloat y, GLfloat z) const
{
    static const char *fnName = "glWindowPos3fMESA";

    beforeCommand(fnName, _api.glWindowPos3f);
    _api.glWindowPos3f(x, y, z);
    afterCommand(fnName);
}

// Calls glWindowPos3fvMESA().
void MESAWindowPosAPI::windowPOS3FV(const GLfloat *v) const
{
    static const char *fnName = "glWindowPos3fvMESA";

    beforeCommand(fnName, _api.glWindowPos3fv);
    _api.glWindowPos3fv(v);
    afterCommand(fnName);
}

// Calls glWindowPos3iMESA().
void MESAWindowPosAPI::windowPOS3I(GLint x, GLint y, GLint z) const
{
    static const char *fnName = "glWindowPos3iMESA";

    beforeCommand(fnName, _api.glWindowPos3i);
    _api.glWindowPos3i(x, y, z);
    afterCommand(fnName);
}

// Calls glWindowPos3ivMESA().
void MESAWindowPosAPI::windowPOS3IV(const GLint *v) const
{
    static const char *fnName = "glWindowPos3ivMESA";

    beforeCommand(fnName, _api.glWindowPos3iv);
    _api.glWindowPos3iv(v);
    afterCommand(fnName);
}

// Calls glWindowPos3sMESA().
void MESAWindowPosAPI::windowPOS3S(GLshort x, GLshort y, GLshort z) const
{
    static const char *fnName = "glWindowPos3sMESA";

    beforeCommand(fnName, _api.glWindowPos3s);
    _api.glWindowPos3s(x, y, z);
    afterCommand(fnName);
}

// Calls glWindowPos3svMESA().
void MESAWindowPosAPI::windowPOS3SV(const GLshort *v) const
{
    static const char *fnName = "glWindowPos3svMESA";

    beforeCommand(fnName, _api.glWindowPos3sv);
    _api.glWindowPos3sv(v);
    afterCommand(fnName);
}

// Calls glWindowPos4dMESA().
void MESAWindowPosAPI::windowPOS4D(GLdouble x, GLdouble y, GLdouble z,
                                   GLdouble w) const
{
    static const char *fnName = "glWindowPos4dMESA";

    beforeCommand(fnName, _api.glWindowPos4d);
    _api.glWindowPos4d(x, y, z, w);
    afterCommand(fnName);
}

// Calls glWindowPos4dvMESA().
void MESAWindowPosAPI::windowPOS4DV(const GLdouble *v) const
{
    static const char *fnName = "glWindowPos4dvMESA";

    beforeCommand(fnName, _api.glWindowPos4dv);
    _api.glWindowPos4dv(v);
    afterCommand(fnName);
}

// Calls glWindowPos4fMESA().
void MESAWindowPosAPI::windowPOS4F(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
{
    static const char *fnName = "glWindowPos4fMESA";

    beforeCommand(fnName, _api.glWindowPos4f);
    _api.glWindowPos4f(x, y, z, w);
    afterCommand(fnName);
}

// Calls glWindowPos4fvMESA().
void MESAWindowPosAPI::windowPOS4FV(const GLfloat *v) const
{
    static const char *fnName = "glWindowPos4fvMESA";

    beforeCommand(fnName, _api.glWindowPos4fv);
    _api.glWindowPos4fv(v);
    afterCommand(fnName);
}

// Calls glWindowPos4iMESA().
void MESAWindowPosAPI::windowPOS4I(GLint x, GLint y, GLint z, GLint w) const
{
    static const char *fnName = "glWindowPos4iMESA";

    beforeCommand(fnName, _api.glWindowPos4i);
    _api.glWindowPos4i(x, y, z, w);
    afterCommand(fnName);
}

// Calls glWindowPos4ivMESA().
void MESAWindowPosAPI::windowPOS4IV(const GLint *v) const
{
    static const char *fnName = "glWindowPos4ivMESA";

    beforeCommand(fnName, _api.glWindowPos4iv);
    _api.glWindowPos4iv(v);
    afterCommand(fnName);
}

// Calls glWindowPos4sMESA().
void MESAWindowPosAPI::windowPOS4S(GLshort x, GLshort y, GLshort z, GLshort w) const
{
    static const char *fnName = "glWindowPos4sMESA";

    beforeCommand(fnName, _api.glWindowPos4s);
    _api.glWindowPos4s(x, y, z, w);
    afterCommand(fnName);
}

// Calls glWindowPos4svMESA().
void MESAWindowPosAPI::windowPOS4SV(const GLshort *v) const
{
    static const char *fnName = "glWindowPos4svMESA";

    beforeCommand(fnName, _api.glWindowPos4sv);
    _api.glWindowPos4sv(v);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVXConditionalRenderAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NVX_conditional_render extension.
NVXConditionalRenderAPI::NVXConditionalRenderAPI() :
    BaseExtension("GL_NVX_conditional_render")
{
}

// Grant read-only access to the underlying function pointers.
const NVXConditionalRender &NVXConditionalRenderAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NVX_conditional_render entry points.
void NVXConditionalRenderAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginConditionalRenderNVX().
void NVXConditionalRenderAPI::beginConditionalRender(GLuint id) const
{
    static const char *fnName = "glBeginConditionalRenderNVX";

    beforeCommand(fnName, _api.glBeginConditionalRender);
    _api.glBeginConditionalRender(id);
    afterCommand(fnName);
}

// Calls glEndConditionalRenderNVX().
void NVXConditionalRenderAPI::endConditionalRender() const
{
    static const char *fnName = "glEndConditionalRenderNVX";

    beforeCommand(fnName, _api.glEndConditionalRender);
    _api.glEndConditionalRender();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVXGPUMULTICAST2API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NVX_gpu_multicast2 extension.
NVXGPUMULTICAST2API::NVXGPUMULTICAST2API() :
    BaseExtension("GL_NVX_gpu_multicast2")
{
}

// Grant read-only access to the underlying function pointers.
const NVXGPUMULTICAST2 &NVXGPUMULTICAST2API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NVX_gpu_multicast2 entry points.
void NVXGPUMULTICAST2API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAsyncCopyBufferSubDataNVX().
GLuint NVXGPUMULTICAST2API::asyncCopyBufferSubData(GLsizei waitSemaphoreCount,
                                                   const GLuint *waitSemaphoreArray,
                                                   const GLuint64 *fenceValueArray,
                                                   GLuint readGpu,
                                                   GLbitfield writeGpuMask,
                                                   BufferName readBuffer,
                                                   BufferName writeBuffer,
                                                   GLintptr readOffset,
                                                   GLintptr writeOffset,
                                                   GLsizeiptr size,
                                                   GLsizei signalSemaphoreCount,
                                                   const GLuint *signalSemaphoreArray,
                                                   const GLuint64 *signalValueArray) const
{
    static const char *fnName = "glAsyncCopyBufferSubDataNVX";

    beforeCommand(fnName, _api.glAsyncCopyBufferSubData);
    GLuint result = _api.glAsyncCopyBufferSubData(waitSemaphoreCount,
                                                  waitSemaphoreArray,
                                                  fenceValueArray, readGpu,
                                                  writeGpuMask, readBuffer.ID,
                                                  writeBuffer.ID, readOffset,
                                                  writeOffset, size,
                                                  signalSemaphoreCount,
                                                  signalSemaphoreArray,
                                                  signalValueArray);
    afterCommand(fnName);

    return result;
}

// Calls glAsyncCopyImageSubDataNVX().
GLuint NVXGPUMULTICAST2API::asyncCopyImageSubData(GLsizei waitSemaphoreCount,
                                                  const GLuint *waitSemaphoreArray,
                                                  const GLuint64 *waitValueArray,
                                                  GLuint srcGpu,
                                                  GLbitfield dstGpuMask,
                                                  GLuint srcName,
                                                  GLenum srcTarget,
                                                  GLint srcLevel, GLint srcX,
                                                  GLint srcY, GLint srcZ,
                                                  GLuint dstName,
                                                  GLenum dstTarget,
                                                  GLint dstLevel, GLint dstX,
                                                  GLint dstY, GLint dstZ,
                                                  GLsizei srcWidth,
                                                  GLsizei srcHeight,
                                                  GLsizei srcDepth,
                                                  GLsizei signalSemaphoreCount,
                                                  const GLuint *signalSemaphoreArray,
                                                  const GLuint64 *signalValueArray) const
{
    static const char *fnName = "glAsyncCopyImageSubDataNVX";

    beforeCommand(fnName, _api.glAsyncCopyImageSubData);
    GLuint result = _api.glAsyncCopyImageSubData(waitSemaphoreCount,
                                                 waitSemaphoreArray,
                                                 waitValueArray, srcGpu,
                                                 dstGpuMask, srcName, srcTarget,
                                                 srcLevel, srcX, srcY, srcZ,
                                                 dstName, dstTarget, dstLevel,
                                                 dstX, dstY, dstZ, srcWidth,
                                                 srcHeight, srcDepth,
                                                 signalSemaphoreCount,
                                                 signalSemaphoreArray,
                                                 signalValueArray);
    afterCommand(fnName);

    return result;
}

// Calls glMulticastScissorArrayvNVX().
void NVXGPUMULTICAST2API::multicastScissorArrayV(GLuint gpu, GLuint first,
                                                 GLsizei count, const GLint *v) const
{
    static const char *fnName = "glMulticastScissorArrayvNVX";

    beforeCommand(fnName, _api.glMulticastScissorArrayv);
    _api.glMulticastScissorArrayv(gpu, first, count, v);
    afterCommand(fnName);
}

// Calls glMulticastViewportArrayvNVX().
void NVXGPUMULTICAST2API::multicastViewportArrayV(GLuint gpu, GLuint first,
                                                  GLsizei count,
                                                  const GLfloat *v) const
{
    static const char *fnName = "glMulticastViewportArrayvNVX";

    beforeCommand(fnName, _api.glMulticastViewportArrayv);
    _api.glMulticastViewportArrayv(gpu, first, count, v);
    afterCommand(fnName);
}

// Calls glMulticastViewportPositionWScaleNVX().
void NVXGPUMULTICAST2API::multicastViewportPositionWScale(GLuint gpu,
                                                          GLuint index,
                                                          GLfloat xcoeff,
                                                          GLfloat ycoeff) const
{
    static const char *fnName = "glMulticastViewportPositionWScaleNVX";

    beforeCommand(fnName, _api.glMulticastViewportPositionWScale);
    _api.glMulticastViewportPositionWScale(gpu, index, xcoeff, ycoeff);
    afterCommand(fnName);
}

// Calls glUploadGpuMaskNVX().
void NVXGPUMULTICAST2API::uploadGpuMask(GLbitfield mask) const
{
    static const char *fnName = "glUploadGpuMaskNVX";

    beforeCommand(fnName, _api.glUploadGpuMask);
    _api.glUploadGpuMask(mask);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVXLinkedGPUMulticastAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NVX_linked_gpu_multicast extension.
NVXLinkedGPUMulticastAPI::NVXLinkedGPUMulticastAPI() :
    BaseExtension("GL_NVX_linked_gpu_multicast")
{
}

// Grant read-only access to the underlying function pointers.
const NVXLinkedGPUMulticast &NVXLinkedGPUMulticastAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NVX_linked_gpu_multicast entry points.
void NVXLinkedGPUMulticastAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glLGPUCopyImageSubDataNVX().
void NVXLinkedGPUMulticastAPI::lgpuCopyImageSubData(GLuint sourceGpu,
                                                    GLbitfield destinationGpuMask,
                                                    GLuint srcName,
                                                    GLenum srcTarget,
                                                    GLint srcLevel, GLint srcX,
                                                    GLint srxY, GLint srcZ,
                                                    GLuint dstName,
                                                    GLenum dstTarget,
                                                    GLint dstLevel, GLint dstX,
                                                    GLint dstY, GLint dstZ,
                                                    GLsizei width,
                                                    GLsizei height,
                                                    GLsizei depth) const
{
    static const char *fnName = "glLGPUCopyImageSubDataNVX";

    beforeCommand(fnName, _api.glLGPUCopyImageSubData);
    _api.glLGPUCopyImageSubData(sourceGpu, destinationGpuMask, srcName,
                                srcTarget, srcLevel, srcX, srxY, srcZ, dstName,
                                dstTarget, dstLevel, dstX, dstY, dstZ, width,
                                height, depth);
    afterCommand(fnName);
}

// Calls glLGPUInterlockNVX().
void NVXLinkedGPUMulticastAPI::lgpuInterlock() const
{
    static const char *fnName = "glLGPUInterlockNVX";

    beforeCommand(fnName, _api.glLGPUInterlock);
    _api.glLGPUInterlock();
    afterCommand(fnName);
}

// Calls glLGPUNamedBufferSubDataNVX().
void NVXLinkedGPUMulticastAPI::lgpuNamedBufferSubData(GLbitfield gpuMask,
                                                      BufferName buffer,
                                                      GLintptr offset,
                                                      GLsizeiptr size,
                                                      const void *data) const
{
    static const char *fnName = "glLGPUNamedBufferSubDataNVX";

    beforeCommand(fnName, _api.glLGPUNamedBufferSubData);
    _api.glLGPUNamedBufferSubData(gpuMask, buffer.ID, offset, size, data);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVXProgressFenceAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NVX_progress_fence extension.
NVXProgressFenceAPI::NVXProgressFenceAPI() :
    BaseExtension("GL_NVX_progress_fence")
{
}

// Grant read-only access to the underlying function pointers.
const NVXProgressFence &NVXProgressFenceAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NVX_progress_fence entry points.
void NVXProgressFenceAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glClientWaitSemaphoreui64NVX().
void NVXProgressFenceAPI::clientWaitSemaphoreUI64(GLsizei fenceObjectCount,
                                                  const GLuint *semaphoreArray,
                                                  const GLuint64 *fenceValueArray) const
{
    static const char *fnName = "glClientWaitSemaphoreui64NVX";

    beforeCommand(fnName, _api.glClientWaitSemaphoreui64);
    _api.glClientWaitSemaphoreui64(fenceObjectCount, semaphoreArray,
                                   fenceValueArray);
    afterCommand(fnName);
}

// Calls glCreateProgressFenceNVX().
GLuint NVXProgressFenceAPI::createProgressFence() const
{
    static const char *fnName = "glCreateProgressFenceNVX";

    beforeCommand(fnName, _api.glCreateProgressFence);
    GLuint result = _api.glCreateProgressFence();
    afterCommand(fnName);

    return result;
}

// Calls glSignalSemaphoreui64NVX().
void NVXProgressFenceAPI::signalSemaphoreUI64(GLuint signalGpu,
                                              GLsizei fenceObjectCount,
                                              const GLuint *semaphoreArray,
                                              const GLuint64 *fenceValueArray) const
{
    static const char *fnName = "glSignalSemaphoreui64NVX";

    beforeCommand(fnName, _api.glSignalSemaphoreui64);
    _api.glSignalSemaphoreui64(signalGpu, fenceObjectCount, semaphoreArray,
                               fenceValueArray);
    afterCommand(fnName);
}

// Calls glWaitSemaphoreui64NVX().
void NVXProgressFenceAPI::waitSemaphoreUI64(GLuint waitGpu,
                                            GLsizei fenceObjectCount,
                                            const GLuint *semaphoreArray,
                                            const GLuint64 *fenceValueArray) const
{
    static const char *fnName = "glWaitSemaphoreui64NVX";

    beforeCommand(fnName, _api.glWaitSemaphoreui64);
    _api.glWaitSemaphoreui64(waitGpu, fenceObjectCount, semaphoreArray,
                             fenceValueArray);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVAlphaToCoverageDitherControlAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_alpha_to_coverage_dither_control extension.
NVAlphaToCoverageDitherControlAPI::NVAlphaToCoverageDitherControlAPI() :
    BaseExtension("GL_NV_alpha_to_coverage_dither_control")
{
}

// Grant read-only access to the underlying function pointers.
const NVAlphaToCoverageDitherControl &NVAlphaToCoverageDitherControlAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_alpha_to_coverage_dither_control entry points.
void NVAlphaToCoverageDitherControlAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAlphaToCoverageDitherControlNV().
void NVAlphaToCoverageDitherControlAPI::alphaToCoverageDitherControl(GLenum mode) const
{
    static const char *fnName = "glAlphaToCoverageDitherControlNV";

    beforeCommand(fnName, _api.glAlphaToCoverageDitherControl);
    _api.glAlphaToCoverageDitherControl(mode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVBindlessMultiDrawIndirectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_bindless_multi_draw_indirect extension.
NVBindlessMultiDrawIndirectAPI::NVBindlessMultiDrawIndirectAPI() :
    BaseExtension("GL_NV_bindless_multi_draw_indirect")
{
}

// Grant read-only access to the underlying function pointers.
const NVBindlessMultiDrawIndirect &NVBindlessMultiDrawIndirectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_bindless_multi_draw_indirect entry points.
void NVBindlessMultiDrawIndirectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMultiDrawArraysIndirectBindlessNV().
void NVBindlessMultiDrawIndirectAPI::multiDrawArraysIndirectBindless(PrimitiveType mode,
                                                                     const void *indirect,
                                                                     GLsizei drawCount,
                                                                     GLsizei stride,
                                                                     GLint vertexBufferCount) const
{
    static const char *fnName = "glMultiDrawArraysIndirectBindlessNV";

    beforeCommand(fnName, _api.glMultiDrawArraysIndirectBindless);
    _api.glMultiDrawArraysIndirectBindless(toScalar(mode), indirect, drawCount,
                                           stride, vertexBufferCount);
    afterCommand(fnName);
}

// Calls glMultiDrawElementsIndirectBindlessNV().
void NVBindlessMultiDrawIndirectAPI::multiDrawElementsIndirectBindless(PrimitiveType mode,
                                                                       DrawElementsType type,
                                                                       const void *indirect,
                                                                       GLsizei drawCount,
                                                                       GLsizei stride,
                                                                       GLint vertexBufferCount) const
{
    static const char *fnName = "glMultiDrawElementsIndirectBindlessNV";

    beforeCommand(fnName, _api.glMultiDrawElementsIndirectBindless);
    _api.glMultiDrawElementsIndirectBindless(toScalar(mode), toScalar(type),
                                             indirect, drawCount, stride,
                                             vertexBufferCount);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVBindlessMultiDrawIndirectCountAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_bindless_multi_draw_indirect_count extension.
NVBindlessMultiDrawIndirectCountAPI::NVBindlessMultiDrawIndirectCountAPI() :
    BaseExtension("GL_NV_bindless_multi_draw_indirect_count")
{
}

// Grant read-only access to the underlying function pointers.
const NVBindlessMultiDrawIndirectCount &NVBindlessMultiDrawIndirectCountAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_bindless_multi_draw_indirect_count entry points.
void NVBindlessMultiDrawIndirectCountAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMultiDrawArraysIndirectBindlessCountNV().
void NVBindlessMultiDrawIndirectCountAPI::multiDrawArraysIndirectBindlessCount(PrimitiveType mode,
                                                                               const void *indirect,
                                                                               GLsizei drawCount,
                                                                               GLsizei maxDrawCount,
                                                                               GLsizei stride,
                                                                               GLint vertexBufferCount) const
{
    static const char *fnName = "glMultiDrawArraysIndirectBindlessCountNV";

    beforeCommand(fnName, _api.glMultiDrawArraysIndirectBindlessCount);
    _api.glMultiDrawArraysIndirectBindlessCount(toScalar(mode), indirect,
                                                drawCount, maxDrawCount, stride,
                                                vertexBufferCount);
    afterCommand(fnName);
}

// Calls glMultiDrawElementsIndirectBindlessCountNV().
void NVBindlessMultiDrawIndirectCountAPI::multiDrawElementsIndirectBindlessCount(PrimitiveType mode,
                                                                                 DrawElementsType type,
                                                                                 const void *indirect,
                                                                                 GLsizei drawCount,
                                                                                 GLsizei maxDrawCount,
                                                                                 GLsizei stride,
                                                                                 GLint vertexBufferCount) const
{
    static const char *fnName = "glMultiDrawElementsIndirectBindlessCountNV";

    beforeCommand(fnName, _api.glMultiDrawElementsIndirectBindlessCount);
    _api.glMultiDrawElementsIndirectBindlessCount(toScalar(mode), toScalar(type),
                                                  indirect, drawCount,
                                                  maxDrawCount, stride,
                                                  vertexBufferCount);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVBindlessTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_bindless_texture extension.
NVBindlessTextureAPI::NVBindlessTextureAPI() :
    BaseExtension("GL_NV_bindless_texture")
{
}

// Grant read-only access to the underlying function pointers.
const NVBindlessTexture &NVBindlessTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_bindless_texture entry points.
void NVBindlessTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetImageHandleNV().
GLuint64 NVBindlessTextureAPI::getImageHandle(TextureName texture, GLint level,
                                              Boolean layered, GLint layer,
                                              PixelFormat format) const
{
    static const char *fnName = "glGetImageHandleNV";

    beforeCommand(fnName, _api.glGetImageHandle);
    GLuint64 result = _api.glGetImageHandle(texture.ID, level, toScalar(layered),
                                            layer, toScalar(format));
    afterCommand(fnName);

    return result;
}

// Calls glGetTextureHandleNV().
GLuint64 NVBindlessTextureAPI::getTextureHandle(TextureName texture) const
{
    static const char *fnName = "glGetTextureHandleNV";

    beforeCommand(fnName, _api.glGetTextureHandle);
    GLuint64 result = _api.glGetTextureHandle(texture.ID);
    afterCommand(fnName);

    return result;
}

// Calls glGetTextureSamplerHandleNV().
GLuint64 NVBindlessTextureAPI::getTextureSamplerHandle(TextureName texture,
                                                       SamplerName sampler) const
{
    static const char *fnName = "glGetTextureSamplerHandleNV";

    beforeCommand(fnName, _api.glGetTextureSamplerHandle);
    GLuint64 result = _api.glGetTextureSamplerHandle(texture.ID, sampler.ID);
    afterCommand(fnName);

    return result;
}

// Calls glIsImageHandleResidentNV().
Boolean NVBindlessTextureAPI::isImageHandleResident(GLuint64 handle) const
{
    static const char *fnName = "glIsImageHandleResidentNV";

    beforeCommand(fnName, _api.glIsImageHandleResident);
    GLboolean result = _api.glIsImageHandleResident(handle);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsTextureHandleResidentNV().
Boolean NVBindlessTextureAPI::isTextureHandleResident(GLuint64 handle) const
{
    static const char *fnName = "glIsTextureHandleResidentNV";

    beforeCommand(fnName, _api.glIsTextureHandleResident);
    GLboolean result = _api.glIsTextureHandleResident(handle);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMakeImageHandleNonResidentNV().
void NVBindlessTextureAPI::makeImageHandleNonResident(GLuint64 handle) const
{
    static const char *fnName = "glMakeImageHandleNonResidentNV";

    beforeCommand(fnName, _api.glMakeImageHandleNonResident);
    _api.glMakeImageHandleNonResident(handle);
    afterCommand(fnName);
}

// Calls glMakeImageHandleResidentNV().
void NVBindlessTextureAPI::makeImageHandleResident(GLuint64 handle,
                                                   GLenum access) const
{
    static const char *fnName = "glMakeImageHandleResidentNV";

    beforeCommand(fnName, _api.glMakeImageHandleResident);
    _api.glMakeImageHandleResident(handle, access);
    afterCommand(fnName);
}

// Calls glMakeTextureHandleNonResidentNV().
void NVBindlessTextureAPI::makeTextureHandleNonResident(GLuint64 handle) const
{
    static const char *fnName = "glMakeTextureHandleNonResidentNV";

    beforeCommand(fnName, _api.glMakeTextureHandleNonResident);
    _api.glMakeTextureHandleNonResident(handle);
    afterCommand(fnName);
}

// Calls glMakeTextureHandleResidentNV().
void NVBindlessTextureAPI::makeTextureHandleResident(GLuint64 handle) const
{
    static const char *fnName = "glMakeTextureHandleResidentNV";

    beforeCommand(fnName, _api.glMakeTextureHandleResident);
    _api.glMakeTextureHandleResident(handle);
    afterCommand(fnName);
}

// Calls glProgramUniformHandleui64NV().
void NVBindlessTextureAPI::programUniformHandleUI64(ProgramName program,
                                                    GLint location,
                                                    GLuint64 value) const
{
    static const char *fnName = "glProgramUniformHandleui64NV";

    beforeCommand(fnName, _api.glProgramUniformHandleui64);
    _api.glProgramUniformHandleui64(program.ID, location, value);
    afterCommand(fnName);
}

// Calls glProgramUniformHandleui64vNV().
void NVBindlessTextureAPI::programUniformHandleUI64(ProgramName program,
                                                    GLint location,
                                                    GLsizei count,
                                                    const GLuint64 *values) const
{
    static const char *fnName = "glProgramUniformHandleui64vNV";

    beforeCommand(fnName, _api.glProgramUniformHandleui64v);
    _api.glProgramUniformHandleui64v(program.ID, location, count, values);
    afterCommand(fnName);
}

// Calls glUniformHandleui64NV().
void NVBindlessTextureAPI::uniformHandleUI64(GLint location, GLuint64 value) const
{
    static const char *fnName = "glUniformHandleui64NV";

    beforeCommand(fnName, _api.glUniformHandleui64);
    _api.glUniformHandleui64(location, value);
    afterCommand(fnName);
}

// Calls glUniformHandleui64vNV().
void NVBindlessTextureAPI::uniformHandleUI64(GLint location, GLsizei count,
                                             const GLuint64 *value) const
{
    static const char *fnName = "glUniformHandleui64vNV";

    beforeCommand(fnName, _api.glUniformHandleui64v);
    _api.glUniformHandleui64v(location, count, value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVBlendEquationAdvancedAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_blend_equation_advanced extension.
NVBlendEquationAdvancedAPI::NVBlendEquationAdvancedAPI() :
    BaseExtension("GL_NV_blend_equation_advanced")
{
}

// Grant read-only access to the underlying function pointers.
const NVBlendEquationAdvanced &NVBlendEquationAdvancedAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_blend_equation_advanced entry points.
void NVBlendEquationAdvancedAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBlendBarrierNV().
void NVBlendEquationAdvancedAPI::blendBarrier() const
{
    static const char *fnName = "glBlendBarrierNV";

    beforeCommand(fnName, _api.glBlendBarrier);
    _api.glBlendBarrier();
    afterCommand(fnName);
}

// Calls glBlendParameteriNV().
void NVBlendEquationAdvancedAPI::blendParameterI(GLenum pname, GLint value) const
{
    static const char *fnName = "glBlendParameteriNV";

    beforeCommand(fnName, _api.glBlendParameteri);
    _api.glBlendParameteri(pname, value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVClipSpaceWScalingAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_clip_space_w_scaling extension.
NVClipSpaceWScalingAPI::NVClipSpaceWScalingAPI() :
    BaseExtension("GL_NV_clip_space_w_scaling")
{
}

// Grant read-only access to the underlying function pointers.
const NVClipSpaceWScaling &NVClipSpaceWScalingAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_clip_space_w_scaling entry points.
void NVClipSpaceWScalingAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glViewportPositionWScaleNV().
void NVClipSpaceWScalingAPI::viewportPositionWScale(GLuint index, GLfloat xcoeff,
                                                    GLfloat ycoeff) const
{
    static const char *fnName = "glViewportPositionWScaleNV";

    beforeCommand(fnName, _api.glViewportPositionWScale);
    _api.glViewportPositionWScale(index, xcoeff, ycoeff);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVCommandListAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_command_list extension.
NVCommandListAPI::NVCommandListAPI() :
    BaseExtension("GL_NV_command_list")
{
}

// Grant read-only access to the underlying function pointers.
const NVCommandList &NVCommandListAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_command_list entry points.
void NVCommandListAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCallCommandListNV().
void NVCommandListAPI::callCommandList(GLuint list) const
{
    static const char *fnName = "glCallCommandListNV";

    beforeCommand(fnName, _api.glCallCommandList);
    _api.glCallCommandList(list);
    afterCommand(fnName);
}

// Calls glCommandListSegmentsNV().
void NVCommandListAPI::commandListSegments(GLuint list, GLuint segments) const
{
    static const char *fnName = "glCommandListSegmentsNV";

    beforeCommand(fnName, _api.glCommandListSegments);
    _api.glCommandListSegments(list, segments);
    afterCommand(fnName);
}

// Calls glCompileCommandListNV().
void NVCommandListAPI::compileCommandList(GLuint list) const
{
    static const char *fnName = "glCompileCommandListNV";

    beforeCommand(fnName, _api.glCompileCommandList);
    _api.glCompileCommandList(list);
    afterCommand(fnName);
}

// Calls glCreateCommandListsNV().
void NVCommandListAPI::createCommandLists(GLsizei n, GLuint *lists) const
{
    static const char *fnName = "glCreateCommandListsNV";

    beforeCommand(fnName, _api.glCreateCommandLists);
    _api.glCreateCommandLists(n, lists);
    afterCommand(fnName);
}

// Calls glCreateStatesNV().
void NVCommandListAPI::createStateS(GLsizei n, GLuint *states) const
{
    static const char *fnName = "glCreateStatesNV";

    beforeCommand(fnName, _api.glCreateStates);
    _api.glCreateStates(n, states);
    afterCommand(fnName);
}

// Calls glDeleteCommandListsNV().
void NVCommandListAPI::deleteCommandLists(GLsizei n, const GLuint *lists) const
{
    static const char *fnName = "glDeleteCommandListsNV";

    beforeCommand(fnName, _api.glDeleteCommandLists);
    _api.glDeleteCommandLists(n, lists);
    afterCommand(fnName);
}

// Calls glDeleteStatesNV().
void NVCommandListAPI::deleteStateS(GLsizei n, const GLuint *states) const
{
    static const char *fnName = "glDeleteStatesNV";

    beforeCommand(fnName, _api.glDeleteStates);
    _api.glDeleteStates(n, states);
    afterCommand(fnName);
}

// Calls glDrawCommandsAddressNV().
void NVCommandListAPI::drawCommandsAddress(GLenum primitiveMode,
                                           const GLuint64 *indirects,
                                           const GLsizei *sizes, GLuint count) const
{
    static const char *fnName = "glDrawCommandsAddressNV";

    beforeCommand(fnName, _api.glDrawCommandsAddress);
    _api.glDrawCommandsAddress(primitiveMode, indirects, sizes, count);
    afterCommand(fnName);
}

// Calls glDrawCommandsNV().
void NVCommandListAPI::drawCommands(GLenum primitiveMode, GLuint buffer,
                                    const GLintptr *indirects,
                                    const GLsizei *sizes, GLuint count) const
{
    static const char *fnName = "glDrawCommandsNV";

    beforeCommand(fnName, _api.glDrawCommands);
    _api.glDrawCommands(primitiveMode, buffer, indirects, sizes, count);
    afterCommand(fnName);
}

// Calls glDrawCommandsStatesAddressNV().
void NVCommandListAPI::drawCommandsStateSAddress(const GLuint64 *indirects,
                                                 const GLsizei *sizes,
                                                 const GLuint *states,
                                                 const GLuint *fbos,
                                                 GLuint count) const
{
    static const char *fnName = "glDrawCommandsStatesAddressNV";

    beforeCommand(fnName, _api.glDrawCommandsStatesAddress);
    _api.glDrawCommandsStatesAddress(indirects, sizes, states, fbos, count);
    afterCommand(fnName);
}

// Calls glDrawCommandsStatesNV().
void NVCommandListAPI::drawCommandsStateS(BufferName buffer,
                                          const GLintptr *indirects,
                                          const GLsizei *sizes,
                                          const GLuint *states,
                                          const GLuint *fbos, GLuint count) const
{
    static const char *fnName = "glDrawCommandsStatesNV";

    beforeCommand(fnName, _api.glDrawCommandsStates);
    _api.glDrawCommandsStates(buffer.ID, indirects, sizes, states, fbos, count);
    afterCommand(fnName);
}

// Calls glGetCommandHeaderNV().
GLuint NVCommandListAPI::getCommandHeader(GLenum tokenID, GLuint size) const
{
    static const char *fnName = "glGetCommandHeaderNV";

    beforeCommand(fnName, _api.glGetCommandHeader);
    GLuint result = _api.glGetCommandHeader(tokenID, size);
    afterCommand(fnName);

    return result;
}

// Calls glGetStageIndexNV().
GLushort NVCommandListAPI::getStageIndex(ShaderType shadertype) const
{
    static const char *fnName = "glGetStageIndexNV";

    beforeCommand(fnName, _api.glGetStageIndex);
    GLushort result = _api.glGetStageIndex(toScalar(shadertype));
    afterCommand(fnName);

    return result;
}

// Calls glIsCommandListNV().
Boolean NVCommandListAPI::isCommandList(GLuint list) const
{
    static const char *fnName = "glIsCommandListNV";

    beforeCommand(fnName, _api.glIsCommandList);
    GLboolean result = _api.glIsCommandList(list);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsStateNV().
Boolean NVCommandListAPI::isState(GLuint state) const
{
    static const char *fnName = "glIsStateNV";

    beforeCommand(fnName, _api.glIsState);
    GLboolean result = _api.glIsState(state);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glListDrawCommandsStatesClientNV().
void NVCommandListAPI::listDrawCommandsStateSClient(GLuint list, GLuint segment,
                                                    const void **indirects,
                                                    const GLsizei *sizes,
                                                    const GLuint *states,
                                                    const GLuint *fbos,
                                                    GLuint count) const
{
    static const char *fnName = "glListDrawCommandsStatesClientNV";

    beforeCommand(fnName, _api.glListDrawCommandsStatesClient);
    _api.glListDrawCommandsStatesClient(list, segment, indirects, sizes, states,
                                        fbos, count);
    afterCommand(fnName);
}

// Calls glStateCaptureNV().
void NVCommandListAPI::stateCapture(GLuint state, GLenum mode) const
{
    static const char *fnName = "glStateCaptureNV";

    beforeCommand(fnName, _api.glStateCapture);
    _api.glStateCapture(state, mode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVConditionalRenderAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_conditional_render extension.
NVConditionalRenderAPI::NVConditionalRenderAPI() :
    BaseExtension("GL_NV_conditional_render")
{
}

// Grant read-only access to the underlying function pointers.
const NVConditionalRender &NVConditionalRenderAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_conditional_render entry points.
void NVConditionalRenderAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginConditionalRenderNV().
void NVConditionalRenderAPI::beginConditionalRender(GLuint id,
                                                    ConditionalRenderMode mode) const
{
    static const char *fnName = "glBeginConditionalRenderNV";

    beforeCommand(fnName, _api.glBeginConditionalRender);
    _api.glBeginConditionalRender(id, toScalar(mode));
    afterCommand(fnName);
}

// Calls glEndConditionalRenderNV().
void NVConditionalRenderAPI::endConditionalRender() const
{
    static const char *fnName = "glEndConditionalRenderNV";

    beforeCommand(fnName, _api.glEndConditionalRender);
    _api.glEndConditionalRender();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVConservativeRasterAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_conservative_raster extension.
NVConservativeRasterAPI::NVConservativeRasterAPI() :
    BaseExtension("GL_NV_conservative_raster")
{
}

// Grant read-only access to the underlying function pointers.
const NVConservativeRaster &NVConservativeRasterAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_conservative_raster entry points.
void NVConservativeRasterAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glSubpixelPrecisionBiasNV().
void NVConservativeRasterAPI::subpixelPrecisionBias(GLuint xbits, GLuint ybits) const
{
    static const char *fnName = "glSubpixelPrecisionBiasNV";

    beforeCommand(fnName, _api.glSubpixelPrecisionBias);
    _api.glSubpixelPrecisionBias(xbits, ybits);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVConservativeRasterDilateAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_conservative_raster_dilate extension.
NVConservativeRasterDilateAPI::NVConservativeRasterDilateAPI() :
    BaseExtension("GL_NV_conservative_raster_dilate")
{
}

// Grant read-only access to the underlying function pointers.
const NVConservativeRasterDilate &NVConservativeRasterDilateAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_conservative_raster_dilate entry points.
void NVConservativeRasterDilateAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glConservativeRasterParameterfNV().
void NVConservativeRasterDilateAPI::conservativeRasterParameterF(GLenum pname,
                                                                 GLfloat value) const
{
    static const char *fnName = "glConservativeRasterParameterfNV";

    beforeCommand(fnName, _api.glConservativeRasterParameterf);
    _api.glConservativeRasterParameterf(pname, value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVConservativeRasterPreSnapTrianglesAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_conservative_raster_pre_snap_triangles extension.
NVConservativeRasterPreSnapTrianglesAPI::NVConservativeRasterPreSnapTrianglesAPI() :
    BaseExtension("GL_NV_conservative_raster_pre_snap_triangles")
{
}

// Grant read-only access to the underlying function pointers.
const NVConservativeRasterPreSnapTriangles &NVConservativeRasterPreSnapTrianglesAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_conservative_raster_pre_snap_triangles entry points.
void NVConservativeRasterPreSnapTrianglesAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glConservativeRasterParameteriNV().
void NVConservativeRasterPreSnapTrianglesAPI::conservativeRasterParameterI(GLenum pname,
                                                                           GLint param) const
{
    static const char *fnName = "glConservativeRasterParameteriNV";

    beforeCommand(fnName, _api.glConservativeRasterParameteri);
    _api.glConservativeRasterParameteri(pname, param);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVCopyImageAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_copy_image extension.
NVCopyImageAPI::NVCopyImageAPI() :
    BaseExtension("GL_NV_copy_image")
{
}

// Grant read-only access to the underlying function pointers.
const NVCopyImage &NVCopyImageAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_copy_image entry points.
void NVCopyImageAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCopyImageSubDataNV().
void NVCopyImageAPI::copyImageSubData(GLuint srcName,
                                      CopyBufferSubDataTarget srcTarget,
                                      GLint srcLevel, GLint srcX, GLint srcY,
                                      GLint srcZ, GLuint dstName,
                                      CopyBufferSubDataTarget dstTarget,
                                      GLint dstLevel, GLint dstX, GLint dstY,
                                      GLint dstZ, GLsizei width, GLsizei height,
                                      GLsizei depth) const
{
    static const char *fnName = "glCopyImageSubDataNV";

    beforeCommand(fnName, _api.glCopyImageSubData);
    _api.glCopyImageSubData(srcName, toScalar(srcTarget), srcLevel, srcX, srcY,
                            srcZ, dstName, toScalar(dstTarget), dstLevel, dstX,
                            dstY, dstZ, width, height, depth);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVDepthBufferFloatAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_depth_buffer_float extension.
NVDepthBufferFloatAPI::NVDepthBufferFloatAPI() :
    BaseExtension("GL_NV_depth_buffer_float")
{
}

// Grant read-only access to the underlying function pointers.
const NVDepthBufferFloat &NVDepthBufferFloatAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_depth_buffer_float entry points.
void NVDepthBufferFloatAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glClearDepthdNV().
void NVDepthBufferFloatAPI::clearDepthD(GLdouble depth) const
{
    static const char *fnName = "glClearDepthdNV";

    beforeCommand(fnName, _api.glClearDepthd);
    _api.glClearDepthd(depth);
    afterCommand(fnName);
}

// Calls glDepthBoundsdNV().
void NVDepthBufferFloatAPI::depthBoundsD(GLdouble zmin, GLdouble zmax) const
{
    static const char *fnName = "glDepthBoundsdNV";

    beforeCommand(fnName, _api.glDepthBoundsd);
    _api.glDepthBoundsd(zmin, zmax);
    afterCommand(fnName);
}

// Calls glDepthRangedNV().
void NVDepthBufferFloatAPI::depthRangeD(GLdouble zNear, GLdouble zFar) const
{
    static const char *fnName = "glDepthRangedNV";

    beforeCommand(fnName, _api.glDepthRanged);
    _api.glDepthRanged(zNear, zFar);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVDrawTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_draw_texture extension.
NVDrawTextureAPI::NVDrawTextureAPI() :
    BaseExtension("GL_NV_draw_texture")
{
}

// Grant read-only access to the underlying function pointers.
const NVDrawTexture &NVDrawTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_draw_texture entry points.
void NVDrawTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawTextureNV().
void NVDrawTextureAPI::drawTexture(TextureName texture, SamplerName sampler,
                                   GLfloat x0, GLfloat y0, GLfloat x1,
                                   GLfloat y1, GLfloat z, GLfloat s0, GLfloat t0,
                                   GLfloat s1, GLfloat t1) const
{
    static const char *fnName = "glDrawTextureNV";

    beforeCommand(fnName, _api.glDrawTexture);
    _api.glDrawTexture(texture.ID, sampler.ID, x0, y0, x1, y1, z, s0, t0, s1, t1);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVDrawVulkanImageAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_draw_vulkan_image extension.
NVDrawVulkanImageAPI::NVDrawVulkanImageAPI() :
    BaseExtension("GL_NV_draw_vulkan_image")
{
}

// Grant read-only access to the underlying function pointers.
const NVDrawVulkanImage &NVDrawVulkanImageAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_draw_vulkan_image entry points.
void NVDrawVulkanImageAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawVkImageNV().
void NVDrawVulkanImageAPI::drawVkImage(GLuint64 vkImage, SamplerName sampler,
                                       GLfloat x0, GLfloat y0, GLfloat x1,
                                       GLfloat y1, GLfloat z, GLfloat s0,
                                       GLfloat t0, GLfloat s1, GLfloat t1) const
{
    static const char *fnName = "glDrawVkImageNV";

    beforeCommand(fnName, _api.glDrawVkImage);
    _api.glDrawVkImage(vkImage, sampler.ID, x0, y0, x1, y1, z, s0, t0, s1, t1);
    afterCommand(fnName);
}

// Calls glGetVkProcAddrNV().
GLVULKANPROCNV NVDrawVulkanImageAPI::getVkProcAddr(const GLchar *name) const
{
    static const char *fnName = "glGetVkProcAddrNV";

    beforeCommand(fnName, _api.glGetVkProcAddr);
    GLVULKANPROCNV result = _api.glGetVkProcAddr(name);
    afterCommand(fnName);

    return result;
}

// Calls glSignalVkFenceNV().
void NVDrawVulkanImageAPI::signalVkFence(GLuint64 vkFence) const
{
    static const char *fnName = "glSignalVkFenceNV";

    beforeCommand(fnName, _api.glSignalVkFence);
    _api.glSignalVkFence(vkFence);
    afterCommand(fnName);
}

// Calls glSignalVkSemaphoreNV().
void NVDrawVulkanImageAPI::signalVkSemaphore(GLuint64 vkSemaphore) const
{
    static const char *fnName = "glSignalVkSemaphoreNV";

    beforeCommand(fnName, _api.glSignalVkSemaphore);
    _api.glSignalVkSemaphore(vkSemaphore);
    afterCommand(fnName);
}

// Calls glWaitVkSemaphoreNV().
void NVDrawVulkanImageAPI::waitVkSemaphore(GLuint64 vkSemaphore) const
{
    static const char *fnName = "glWaitVkSemaphoreNV";

    beforeCommand(fnName, _api.glWaitVkSemaphore);
    _api.glWaitVkSemaphore(vkSemaphore);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVEvaluatorsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_evaluators extension.
NVEvaluatorsAPI::NVEvaluatorsAPI() :
    BaseExtension("GL_NV_evaluators")
{
}

// Grant read-only access to the underlying function pointers.
const NVEvaluators &NVEvaluatorsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_evaluators entry points.
void NVEvaluatorsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glEvalMapsNV().
void NVEvaluatorsAPI::evalMaps(EvalTargetNV target, GLenum mode) const
{
    static const char *fnName = "glEvalMapsNV";

    beforeCommand(fnName, _api.glEvalMaps);
    _api.glEvalMaps(toScalar(target), mode);
    afterCommand(fnName);
}

// Calls glGetMapAttribParameterfvNV().
void NVEvaluatorsAPI::getMapAttribParameterFV(EvalTargetNV target, GLuint index,
                                              MapAttribParameterNV pname,
                                              GLfloat *params) const
{
    static const char *fnName = "glGetMapAttribParameterfvNV";

    beforeCommand(fnName, _api.glGetMapAttribParameterfv);
    _api.glGetMapAttribParameterfv(toScalar(target), index, toScalar(pname),
                                   params);
    afterCommand(fnName);
}

// Calls glGetMapAttribParameterivNV().
void NVEvaluatorsAPI::getMapAttribParameterIV(EvalTargetNV target, GLuint index,
                                              MapAttribParameterNV pname,
                                              GLint *params) const
{
    static const char *fnName = "glGetMapAttribParameterivNV";

    beforeCommand(fnName, _api.glGetMapAttribParameteriv);
    _api.glGetMapAttribParameteriv(toScalar(target), index, toScalar(pname),
                                   params);
    afterCommand(fnName);
}

// Calls glGetMapControlPointsNV().
void NVEvaluatorsAPI::getMapControlPoints(EvalTargetNV target, GLuint index,
                                          MapTypeNV type, GLsizei ustride,
                                          GLsizei vstride, Boolean packed,
                                          void *points) const
{
    static const char *fnName = "glGetMapControlPointsNV";

    beforeCommand(fnName, _api.glGetMapControlPoints);
    _api.glGetMapControlPoints(toScalar(target), index, toScalar(type), ustride,
                               vstride, toScalar(packed), points);
    afterCommand(fnName);
}

// Calls glGetMapParameterfvNV().
void NVEvaluatorsAPI::getMapParameterFV(EvalTargetNV target,
                                        MapParameterNV pname, GLfloat *params) const
{
    static const char *fnName = "glGetMapParameterfvNV";

    beforeCommand(fnName, _api.glGetMapParameterfv);
    _api.glGetMapParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetMapParameterivNV().
void NVEvaluatorsAPI::getMapParameterIV(EvalTargetNV target,
                                        MapParameterNV pname, GLint *params) const
{
    static const char *fnName = "glGetMapParameterivNV";

    beforeCommand(fnName, _api.glGetMapParameteriv);
    _api.glGetMapParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMapControlPointsNV().
void NVEvaluatorsAPI::mapControlPoints(EvalTargetNV target, GLuint index,
                                       MapTypeNV type, GLsizei ustride,
                                       GLsizei vstride, GLint uorder,
                                       GLint vorder, Boolean packed,
                                       const void *points) const
{
    static const char *fnName = "glMapControlPointsNV";

    beforeCommand(fnName, _api.glMapControlPoints);
    _api.glMapControlPoints(toScalar(target), index, toScalar(type), ustride,
                            vstride, uorder, vorder, toScalar(packed), points);
    afterCommand(fnName);
}

// Calls glMapParameterfvNV().
void NVEvaluatorsAPI::mapParameterFV(EvalTargetNV target, MapParameterNV pname,
                                     const GLfloat *params) const
{
    static const char *fnName = "glMapParameterfvNV";

    beforeCommand(fnName, _api.glMapParameterfv);
    _api.glMapParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glMapParameterivNV().
void NVEvaluatorsAPI::mapParameterIV(EvalTargetNV target, MapParameterNV pname,
                                     const GLint *params) const
{
    static const char *fnName = "glMapParameterivNV";

    beforeCommand(fnName, _api.glMapParameteriv);
    _api.glMapParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVExplicitMultisampleAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_explicit_multisample extension.
NVExplicitMultisampleAPI::NVExplicitMultisampleAPI() :
    BaseExtension("GL_NV_explicit_multisample")
{
}

// Grant read-only access to the underlying function pointers.
const NVExplicitMultisample &NVExplicitMultisampleAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_explicit_multisample entry points.
void NVExplicitMultisampleAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetMultisamplefvNV().
void NVExplicitMultisampleAPI::getMultisampleFV(GetMultisamplePNameNV pname,
                                                GLuint index, GLfloat *val) const
{
    static const char *fnName = "glGetMultisamplefvNV";

    beforeCommand(fnName, _api.glGetMultisamplefv);
    _api.glGetMultisamplefv(toScalar(pname), index, val);
    afterCommand(fnName);
}

// Calls glSampleMaskIndexedNV().
void NVExplicitMultisampleAPI::sampleMaskIndexed(GLuint index, GLbitfield mask) const
{
    static const char *fnName = "glSampleMaskIndexedNV";

    beforeCommand(fnName, _api.glSampleMaskIndexed);
    _api.glSampleMaskIndexed(index, mask);
    afterCommand(fnName);
}

// Calls glTexRenderbufferNV().
void NVExplicitMultisampleAPI::texRenderbuffer(TextureTarget target,
                                               RenderBufferName renderbuffer) const
{
    static const char *fnName = "glTexRenderbufferNV";

    beforeCommand(fnName, _api.glTexRenderbuffer);
    _api.glTexRenderbuffer(toScalar(target), renderbuffer.ID);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVFenceAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_fence extension.
NVFenceAPI::NVFenceAPI() :
    BaseExtension("GL_NV_fence")
{
}

// Grant read-only access to the underlying function pointers.
const NVFence &NVFenceAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_fence entry points.
void NVFenceAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDeleteFencesNV().
void NVFenceAPI::deleteFences(GLsizei n, const GLuint *fences) const
{
    static const char *fnName = "glDeleteFencesNV";

    beforeCommand(fnName, _api.glDeleteFences);
    _api.glDeleteFences(n, fences);
    afterCommand(fnName);
}

// Calls glFinishFenceNV().
void NVFenceAPI::finishFence(GLuint fence) const
{
    static const char *fnName = "glFinishFenceNV";

    beforeCommand(fnName, _api.glFinishFence);
    _api.glFinishFence(fence);
    afterCommand(fnName);
}

// Calls glGenFencesNV().
void NVFenceAPI::genFences(GLsizei n, GLuint *fences) const
{
    static const char *fnName = "glGenFencesNV";

    beforeCommand(fnName, _api.glGenFences);
    _api.glGenFences(n, fences);
    afterCommand(fnName);
}

// Calls glGetFenceivNV().
void NVFenceAPI::getFenceIV(GLuint fence, FenceParameterNameNV pname,
                            GLint *params) const
{
    static const char *fnName = "glGetFenceivNV";

    beforeCommand(fnName, _api.glGetFenceiv);
    _api.glGetFenceiv(fence, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsFenceNV().
Boolean NVFenceAPI::isFence(GLuint fence) const
{
    static const char *fnName = "glIsFenceNV";

    beforeCommand(fnName, _api.glIsFence);
    GLboolean result = _api.glIsFence(fence);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glSetFenceNV().
void NVFenceAPI::setFence(GLuint fence, FenceConditionNV condition) const
{
    static const char *fnName = "glSetFenceNV";

    beforeCommand(fnName, _api.glSetFence);
    _api.glSetFence(fence, toScalar(condition));
    afterCommand(fnName);
}

// Calls glTestFenceNV().
Boolean NVFenceAPI::testFence(GLuint fence) const
{
    static const char *fnName = "glTestFenceNV";

    beforeCommand(fnName, _api.glTestFence);
    GLboolean result = _api.glTestFence(fence);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

////////////////////////////////////////////////////////////////////////////////
// NVFragmentCoverageToColorAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_fragment_coverage_to_color extension.
NVFragmentCoverageToColorAPI::NVFragmentCoverageToColorAPI() :
    BaseExtension("GL_NV_fragment_coverage_to_color")
{
}

// Grant read-only access to the underlying function pointers.
const NVFragmentCoverageToColor &NVFragmentCoverageToColorAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_fragment_coverage_to_color entry points.
void NVFragmentCoverageToColorAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFragmentCoverageColorNV().
void NVFragmentCoverageToColorAPI::fragmentCoverageColor(GLuint color) const
{
    static const char *fnName = "glFragmentCoverageColorNV";

    beforeCommand(fnName, _api.glFragmentCoverageColor);
    _api.glFragmentCoverageColor(color);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVFragmentProgramAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_fragment_program extension.
NVFragmentProgramAPI::NVFragmentProgramAPI() :
    BaseExtension("GL_NV_fragment_program")
{
}

// Grant read-only access to the underlying function pointers.
const NVFragmentProgram &NVFragmentProgramAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_fragment_program entry points.
void NVFragmentProgramAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetProgramNamedParameterdvNV().
void NVFragmentProgramAPI::getProgramNamedParameterDV(ProgramName id,
                                                      GLsizei len,
                                                      const GLubyte *name,
                                                      GLdouble *params) const
{
    static const char *fnName = "glGetProgramNamedParameterdvNV";

    beforeCommand(fnName, _api.glGetProgramNamedParameterdv);
    _api.glGetProgramNamedParameterdv(id.ID, len, name, params);
    afterCommand(fnName);
}

// Calls glGetProgramNamedParameterfvNV().
void NVFragmentProgramAPI::getProgramNamedParameterFV(ProgramName id,
                                                      GLsizei len,
                                                      const GLubyte *name,
                                                      GLfloat *params) const
{
    static const char *fnName = "glGetProgramNamedParameterfvNV";

    beforeCommand(fnName, _api.glGetProgramNamedParameterfv);
    _api.glGetProgramNamedParameterfv(id.ID, len, name, params);
    afterCommand(fnName);
}

// Calls glProgramNamedParameter4dNV().
void NVFragmentProgramAPI::programNamedParameter4D(ProgramName id, GLsizei len,
                                                   const GLubyte *name,
                                                   GLdouble x, GLdouble y,
                                                   GLdouble z, GLdouble w) const
{
    static const char *fnName = "glProgramNamedParameter4dNV";

    beforeCommand(fnName, _api.glProgramNamedParameter4d);
    _api.glProgramNamedParameter4d(id.ID, len, name, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramNamedParameter4dvNV().
void NVFragmentProgramAPI::programNamedParameter4DV(ProgramName id, GLsizei len,
                                                    const GLubyte *name,
                                                    const GLdouble *v) const
{
    static const char *fnName = "glProgramNamedParameter4dvNV";

    beforeCommand(fnName, _api.glProgramNamedParameter4dv);
    _api.glProgramNamedParameter4dv(id.ID, len, name, v);
    afterCommand(fnName);
}

// Calls glProgramNamedParameter4fNV().
void NVFragmentProgramAPI::programNamedParameter4F(ProgramName id, GLsizei len,
                                                   const GLubyte *name,
                                                   GLfloat x, GLfloat y,
                                                   GLfloat z, GLfloat w) const
{
    static const char *fnName = "glProgramNamedParameter4fNV";

    beforeCommand(fnName, _api.glProgramNamedParameter4f);
    _api.glProgramNamedParameter4f(id.ID, len, name, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramNamedParameter4fvNV().
void NVFragmentProgramAPI::programNamedParameter4FV(ProgramName id, GLsizei len,
                                                    const GLubyte *name,
                                                    const GLfloat *v) const
{
    static const char *fnName = "glProgramNamedParameter4fvNV";

    beforeCommand(fnName, _api.glProgramNamedParameter4fv);
    _api.glProgramNamedParameter4fv(id.ID, len, name, v);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVFramebufferMixedSamplesAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_framebuffer_mixed_samples extension.
NVFramebufferMixedSamplesAPI::NVFramebufferMixedSamplesAPI() :
    BaseExtension("GL_NV_framebuffer_mixed_samples")
{
}

// Grant read-only access to the underlying function pointers.
const NVFramebufferMixedSamples &NVFramebufferMixedSamplesAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_framebuffer_mixed_samples entry points.
void NVFramebufferMixedSamplesAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCoverageModulationNV().
void NVFramebufferMixedSamplesAPI::coverageModulation(GLenum components) const
{
    static const char *fnName = "glCoverageModulationNV";

    beforeCommand(fnName, _api.glCoverageModulation);
    _api.glCoverageModulation(components);
    afterCommand(fnName);
}

// Calls glCoverageModulationTableNV().
void NVFramebufferMixedSamplesAPI::coverageModulationTable(GLsizei n,
                                                           const GLfloat *v) const
{
    static const char *fnName = "glCoverageModulationTableNV";

    beforeCommand(fnName, _api.glCoverageModulationTable);
    _api.glCoverageModulationTable(n, v);
    afterCommand(fnName);
}

// Calls glGetCoverageModulationTableNV().
void NVFramebufferMixedSamplesAPI::getCoverageModulationTable(GLsizei bufSize,
                                                              GLfloat *v) const
{
    static const char *fnName = "glGetCoverageModulationTableNV";

    beforeCommand(fnName, _api.glGetCoverageModulationTable);
    _api.glGetCoverageModulationTable(bufSize, v);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVFramebufferMultisampleCoverageAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_framebuffer_multisample_coverage extension.
NVFramebufferMultisampleCoverageAPI::NVFramebufferMultisampleCoverageAPI() :
    BaseExtension("GL_NV_framebuffer_multisample_coverage")
{
}

// Grant read-only access to the underlying function pointers.
const NVFramebufferMultisampleCoverage &NVFramebufferMultisampleCoverageAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_framebuffer_multisample_coverage entry points.
void NVFramebufferMultisampleCoverageAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glRenderbufferStorageMultisampleCoverageNV().
void NVFramebufferMultisampleCoverageAPI::renderbufferStorageMultisampleCoverage(RenderBufferTarget target,
                                                                                 GLsizei coverageSamples,
                                                                                 GLsizei colorSamples,
                                                                                 InternalFormat internalformat,
                                                                                 GLsizei width,
                                                                                 GLsizei height) const
{
    static const char *fnName = "glRenderbufferStorageMultisampleCoverageNV";

    beforeCommand(fnName, _api.glRenderbufferStorageMultisampleCoverage);
    _api.glRenderbufferStorageMultisampleCoverage(toScalar(target),
                                                  coverageSamples, colorSamples,
                                                  toScalar(internalformat),
                                                  width, height);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVGeometryPROGRAM4API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_geometry_program4 extension.
NVGeometryPROGRAM4API::NVGeometryPROGRAM4API() :
    BaseExtension("GL_NV_geometry_program4")
{
}

// Grant read-only access to the underlying function pointers.
const NVGeometryPROGRAM4 &NVGeometryPROGRAM4API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_geometry_program4 entry points.
void NVGeometryPROGRAM4API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFramebufferTextureEXT().
void NVGeometryPROGRAM4API::framebufferTexture(FramebufferTarget target,
                                               FramebufferAttachment attachment,
                                               TextureName texture, GLint level) const
{
    static const char *fnName = "glFramebufferTextureEXT";

    beforeCommand(fnName, _api.glFramebufferTexture);
    _api.glFramebufferTexture(toScalar(target), toScalar(attachment), texture.ID,
                              level);
    afterCommand(fnName);
}

// Calls glFramebufferTextureFaceEXT().
void NVGeometryPROGRAM4API::framebufferTextureFace(FramebufferTarget target,
                                                   FramebufferAttachment attachment,
                                                   TextureName texture,
                                                   GLint level,
                                                   TextureTarget face) const
{
    static const char *fnName = "glFramebufferTextureFaceEXT";

    beforeCommand(fnName, _api.glFramebufferTextureFace);
    _api.glFramebufferTextureFace(toScalar(target), toScalar(attachment),
                                  texture.ID, level, toScalar(face));
    afterCommand(fnName);
}

// Calls glProgramVertexLimitNV().
void NVGeometryPROGRAM4API::programVertexLimit(ProgramTarget target, GLint limit) const
{
    static const char *fnName = "glProgramVertexLimitNV";

    beforeCommand(fnName, _api.glProgramVertexLimit);
    _api.glProgramVertexLimit(toScalar(target), limit);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVGPUMulticastAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_gpu_multicast extension.
NVGPUMulticastAPI::NVGPUMulticastAPI() :
    BaseExtension("GL_NV_gpu_multicast")
{
}

// Grant read-only access to the underlying function pointers.
const NVGPUMulticast &NVGPUMulticastAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_gpu_multicast entry points.
void NVGPUMulticastAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMulticastBarrierNV().
void NVGPUMulticastAPI::multicastBarrier() const
{
    static const char *fnName = "glMulticastBarrierNV";

    beforeCommand(fnName, _api.glMulticastBarrier);
    _api.glMulticastBarrier();
    afterCommand(fnName);
}

// Calls glMulticastBlitFramebufferNV().
void NVGPUMulticastAPI::multicastBlitFramebuffer(GLuint srcGpu, GLuint dstGpu,
                                                 GLint srcX0, GLint srcY0,
                                                 GLint srcX1, GLint srcY1,
                                                 GLint dstX0, GLint dstY0,
                                                 GLint dstX1, GLint dstY1,
                                                 GLbitfield  /* ClearBufferMask */ mask,
                                                 GLenum filter) const
{
    static const char *fnName = "glMulticastBlitFramebufferNV";

    beforeCommand(fnName, _api.glMulticastBlitFramebuffer);
    _api.glMulticastBlitFramebuffer(srcGpu, dstGpu, srcX0, srcY0, srcX1, srcY1,
                                    dstX0, dstY0, dstX1, dstY1, mask, filter);
    afterCommand(fnName);
}

// Calls glMulticastBufferSubDataNV().
void NVGPUMulticastAPI::multicastBufferSubData(GLbitfield gpuMask,
                                               BufferName buffer,
                                               GLintptr offset, GLsizeiptr size,
                                               const void *data) const
{
    static const char *fnName = "glMulticastBufferSubDataNV";

    beforeCommand(fnName, _api.glMulticastBufferSubData);
    _api.glMulticastBufferSubData(gpuMask, buffer.ID, offset, size, data);
    afterCommand(fnName);
}

// Calls glMulticastCopyBufferSubDataNV().
void NVGPUMulticastAPI::multicastCopyBufferSubData(GLuint readGpu,
                                                   GLbitfield writeGpuMask,
                                                   BufferName readBuffer,
                                                   BufferName writeBuffer,
                                                   GLintptr readOffset,
                                                   GLintptr writeOffset,
                                                   GLsizeiptr size) const
{
    static const char *fnName = "glMulticastCopyBufferSubDataNV";

    beforeCommand(fnName, _api.glMulticastCopyBufferSubData);
    _api.glMulticastCopyBufferSubData(readGpu, writeGpuMask, readBuffer.ID,
                                      writeBuffer.ID, readOffset, writeOffset,
                                      size);
    afterCommand(fnName);
}

// Calls glMulticastCopyImageSubDataNV().
void NVGPUMulticastAPI::multicastCopyImageSubData(GLuint srcGpu,
                                                  GLbitfield dstGpuMask,
                                                  GLuint srcName,
                                                  GLenum srcTarget,
                                                  GLint srcLevel, GLint srcX,
                                                  GLint srcY, GLint srcZ,
                                                  GLuint dstName,
                                                  GLenum dstTarget,
                                                  GLint dstLevel, GLint dstX,
                                                  GLint dstY, GLint dstZ,
                                                  GLsizei srcWidth,
                                                  GLsizei srcHeight,
                                                  GLsizei srcDepth) const
{
    static const char *fnName = "glMulticastCopyImageSubDataNV";

    beforeCommand(fnName, _api.glMulticastCopyImageSubData);
    _api.glMulticastCopyImageSubData(srcGpu, dstGpuMask, srcName, srcTarget,
                                     srcLevel, srcX, srcY, srcZ, dstName,
                                     dstTarget, dstLevel, dstX, dstY, dstZ,
                                     srcWidth, srcHeight, srcDepth);
    afterCommand(fnName);
}

// Calls glMulticastFramebufferSampleLocationsfvNV().
void NVGPUMulticastAPI::multicastFramebufferSampleLocationsFV(GLuint gpu,
                                                              FrameBufferName framebuffer,
                                                              GLuint start,
                                                              GLsizei count,
                                                              const GLfloat *v) const
{
    static const char *fnName = "glMulticastFramebufferSampleLocationsfvNV";

    beforeCommand(fnName, _api.glMulticastFramebufferSampleLocationsfv);
    _api.glMulticastFramebufferSampleLocationsfv(gpu, framebuffer.ID, start,
                                                 count, v);
    afterCommand(fnName);
}

// Calls glMulticastGetQueryObjecti64vNV().
void NVGPUMulticastAPI::multicastGetQueryObjectI64V(GLuint gpu, GLuint id,
                                                    GLenum pname,
                                                    GLint64 *params) const
{
    static const char *fnName = "glMulticastGetQueryObjecti64vNV";

    beforeCommand(fnName, _api.glMulticastGetQueryObjecti64v);
    _api.glMulticastGetQueryObjecti64v(gpu, id, pname, params);
    afterCommand(fnName);
}

// Calls glMulticastGetQueryObjectivNV().
void NVGPUMulticastAPI::multicastGetQueryObjectIV(GLuint gpu, GLuint id,
                                                  GLenum pname, GLint *params) const
{
    static const char *fnName = "glMulticastGetQueryObjectivNV";

    beforeCommand(fnName, _api.glMulticastGetQueryObjectiv);
    _api.glMulticastGetQueryObjectiv(gpu, id, pname, params);
    afterCommand(fnName);
}

// Calls glMulticastGetQueryObjectui64vNV().
void NVGPUMulticastAPI::multicastGetQueryObjectUI64(GLuint gpu, GLuint id,
                                                    GLenum pname,
                                                    GLuint64 *params) const
{
    static const char *fnName = "glMulticastGetQueryObjectui64vNV";

    beforeCommand(fnName, _api.glMulticastGetQueryObjectui64v);
    _api.glMulticastGetQueryObjectui64v(gpu, id, pname, params);
    afterCommand(fnName);
}

// Calls glMulticastGetQueryObjectuivNV().
void NVGPUMulticastAPI::multicastGetQueryObjectUIV(GLuint gpu, GLuint id,
                                                   GLenum pname, GLuint *params) const
{
    static const char *fnName = "glMulticastGetQueryObjectuivNV";

    beforeCommand(fnName, _api.glMulticastGetQueryObjectuiv);
    _api.glMulticastGetQueryObjectuiv(gpu, id, pname, params);
    afterCommand(fnName);
}

// Calls glMulticastWaitSyncNV().
void NVGPUMulticastAPI::multicastWaitSync(GLuint signalGpu,
                                          GLbitfield waitGpuMask) const
{
    static const char *fnName = "glMulticastWaitSyncNV";

    beforeCommand(fnName, _api.glMulticastWaitSync);
    _api.glMulticastWaitSync(signalGpu, waitGpuMask);
    afterCommand(fnName);
}

// Calls glRenderGpuMaskNV().
void NVGPUMulticastAPI::renderGpuMask(GLbitfield mask) const
{
    static const char *fnName = "glRenderGpuMaskNV";

    beforeCommand(fnName, _api.glRenderGpuMask);
    _api.glRenderGpuMask(mask);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVGPUPROGRAM4API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_gpu_program4 extension.
NVGPUPROGRAM4API::NVGPUPROGRAM4API() :
    BaseExtension("GL_NV_gpu_program4")
{
}

// Grant read-only access to the underlying function pointers.
const NVGPUPROGRAM4 &NVGPUPROGRAM4API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_gpu_program4 entry points.
void NVGPUPROGRAM4API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetProgramEnvParameterIivNV().
void NVGPUPROGRAM4API::getProgramEnvParameterIIV(ProgramTarget target,
                                                 GLuint index, GLint *params) const
{
    static const char *fnName = "glGetProgramEnvParameterIivNV";

    beforeCommand(fnName, _api.glGetProgramEnvParameterIiv);
    _api.glGetProgramEnvParameterIiv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glGetProgramEnvParameterIuivNV().
void NVGPUPROGRAM4API::getProgramEnvParameterIUIV(ProgramTarget target,
                                                  GLuint index, GLuint *params) const
{
    static const char *fnName = "glGetProgramEnvParameterIuivNV";

    beforeCommand(fnName, _api.glGetProgramEnvParameterIuiv);
    _api.glGetProgramEnvParameterIuiv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glGetProgramLocalParameterIivNV().
void NVGPUPROGRAM4API::getProgramLocalParameterIIV(ProgramTarget target,
                                                   GLuint index, GLint *params) const
{
    static const char *fnName = "glGetProgramLocalParameterIivNV";

    beforeCommand(fnName, _api.glGetProgramLocalParameterIiv);
    _api.glGetProgramLocalParameterIiv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glGetProgramLocalParameterIuivNV().
void NVGPUPROGRAM4API::getProgramLocalParameterIUIV(ProgramTarget target,
                                                    GLuint index, GLuint *params) const
{
    static const char *fnName = "glGetProgramLocalParameterIuivNV";

    beforeCommand(fnName, _api.glGetProgramLocalParameterIuiv);
    _api.glGetProgramLocalParameterIuiv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramEnvParameterI4iNV().
void NVGPUPROGRAM4API::programEnvParameterI4I(ProgramTarget target, GLuint index,
                                              GLint x, GLint y, GLint z, GLint w) const
{
    static const char *fnName = "glProgramEnvParameterI4iNV";

    beforeCommand(fnName, _api.glProgramEnvParameterI4i);
    _api.glProgramEnvParameterI4i(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramEnvParameterI4ivNV().
void NVGPUPROGRAM4API::programEnvParameterI4IV(ProgramTarget target,
                                               GLuint index, const GLint *params) const
{
    static const char *fnName = "glProgramEnvParameterI4ivNV";

    beforeCommand(fnName, _api.glProgramEnvParameterI4iv);
    _api.glProgramEnvParameterI4iv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramEnvParameterI4uiNV().
void NVGPUPROGRAM4API::programEnvParameterI4UI(ProgramTarget target,
                                               GLuint index, GLuint x, GLuint y,
                                               GLuint z, GLuint w) const
{
    static const char *fnName = "glProgramEnvParameterI4uiNV";

    beforeCommand(fnName, _api.glProgramEnvParameterI4ui);
    _api.glProgramEnvParameterI4ui(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramEnvParameterI4uivNV().
void NVGPUPROGRAM4API::programEnvParameterI4UIV(ProgramTarget target,
                                                GLuint index,
                                                const GLuint *params) const
{
    static const char *fnName = "glProgramEnvParameterI4uivNV";

    beforeCommand(fnName, _api.glProgramEnvParameterI4uiv);
    _api.glProgramEnvParameterI4uiv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramEnvParametersI4ivNV().
void NVGPUPROGRAM4API::programEnvParametersI4IV(ProgramTarget target,
                                                GLuint index, GLsizei count,
                                                const GLint *params) const
{
    static const char *fnName = "glProgramEnvParametersI4ivNV";

    beforeCommand(fnName, _api.glProgramEnvParametersI4iv);
    _api.glProgramEnvParametersI4iv(toScalar(target), index, count, params);
    afterCommand(fnName);
}

// Calls glProgramEnvParametersI4uivNV().
void NVGPUPROGRAM4API::programEnvParametersI4UIV(ProgramTarget target,
                                                 GLuint index, GLsizei count,
                                                 const GLuint *params) const
{
    static const char *fnName = "glProgramEnvParametersI4uivNV";

    beforeCommand(fnName, _api.glProgramEnvParametersI4uiv);
    _api.glProgramEnvParametersI4uiv(toScalar(target), index, count, params);
    afterCommand(fnName);
}

// Calls glProgramLocalParameterI4iNV().
void NVGPUPROGRAM4API::programLocalParameterI4I(ProgramTarget target,
                                                GLuint index, GLint x, GLint y,
                                                GLint z, GLint w) const
{
    static const char *fnName = "glProgramLocalParameterI4iNV";

    beforeCommand(fnName, _api.glProgramLocalParameterI4i);
    _api.glProgramLocalParameterI4i(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramLocalParameterI4ivNV().
void NVGPUPROGRAM4API::programLocalParameterI4IV(ProgramTarget target,
                                                 GLuint index,
                                                 const GLint *params) const
{
    static const char *fnName = "glProgramLocalParameterI4ivNV";

    beforeCommand(fnName, _api.glProgramLocalParameterI4iv);
    _api.glProgramLocalParameterI4iv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramLocalParameterI4uiNV().
void NVGPUPROGRAM4API::programLocalParameterI4UI(ProgramTarget target,
                                                 GLuint index, GLuint x,
                                                 GLuint y, GLuint z, GLuint w) const
{
    static const char *fnName = "glProgramLocalParameterI4uiNV";

    beforeCommand(fnName, _api.glProgramLocalParameterI4ui);
    _api.glProgramLocalParameterI4ui(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramLocalParameterI4uivNV().
void NVGPUPROGRAM4API::programLocalParameterI4UIV(ProgramTarget target,
                                                  GLuint index,
                                                  const GLuint *params) const
{
    static const char *fnName = "glProgramLocalParameterI4uivNV";

    beforeCommand(fnName, _api.glProgramLocalParameterI4uiv);
    _api.glProgramLocalParameterI4uiv(toScalar(target), index, params);
    afterCommand(fnName);
}

// Calls glProgramLocalParametersI4ivNV().
void NVGPUPROGRAM4API::programLocalParametersI4IV(ProgramTarget target,
                                                  GLuint index, GLsizei count,
                                                  const GLint *params) const
{
    static const char *fnName = "glProgramLocalParametersI4ivNV";

    beforeCommand(fnName, _api.glProgramLocalParametersI4iv);
    _api.glProgramLocalParametersI4iv(toScalar(target), index, count, params);
    afterCommand(fnName);
}

// Calls glProgramLocalParametersI4uivNV().
void NVGPUPROGRAM4API::programLocalParametersI4UIV(ProgramTarget target,
                                                   GLuint index, GLsizei count,
                                                   const GLuint *params) const
{
    static const char *fnName = "glProgramLocalParametersI4uivNV";

    beforeCommand(fnName, _api.glProgramLocalParametersI4uiv);
    _api.glProgramLocalParametersI4uiv(toScalar(target), index, count, params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVGPUPROGRAM5API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_gpu_program5 extension.
NVGPUPROGRAM5API::NVGPUPROGRAM5API() :
    BaseExtension("GL_NV_gpu_program5")
{
}

// Grant read-only access to the underlying function pointers.
const NVGPUPROGRAM5 &NVGPUPROGRAM5API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_gpu_program5 entry points.
void NVGPUPROGRAM5API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetProgramSubroutineParameteruivNV().
void NVGPUPROGRAM5API::getProgramSubroutineParameterUIV(GLenum target,
                                                        GLuint index,
                                                        GLuint *param) const
{
    static const char *fnName = "glGetProgramSubroutineParameteruivNV";

    beforeCommand(fnName, _api.glGetProgramSubroutineParameteruiv);
    _api.glGetProgramSubroutineParameteruiv(target, index, param);
    afterCommand(fnName);
}

// Calls glProgramSubroutineParametersuivNV().
void NVGPUPROGRAM5API::programSubroutineParametersUIV(GLenum target,
                                                      GLsizei count,
                                                      const GLuint *params) const
{
    static const char *fnName = "glProgramSubroutineParametersuivNV";

    beforeCommand(fnName, _api.glProgramSubroutineParametersuiv);
    _api.glProgramSubroutineParametersuiv(target, count, params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVHalfFloatAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_half_float extension.
NVHalfFloatAPI::NVHalfFloatAPI() :
    BaseExtension("GL_NV_half_float")
{
}

// Grant read-only access to the underlying function pointers.
const NVHalfFloat &NVHalfFloatAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_half_float entry points.
void NVHalfFloatAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glColor3hNV().
void NVHalfFloatAPI::color3H(GLhalfNV red, GLhalfNV green, GLhalfNV blue) const
{
    static const char *fnName = "glColor3hNV";

    beforeCommand(fnName, _api.glColor3h);
    _api.glColor3h(red, green, blue);
    afterCommand(fnName);
}

// Calls glColor3hvNV().
void NVHalfFloatAPI::color3HV(const GLhalfNV *v) const
{
    static const char *fnName = "glColor3hvNV";

    beforeCommand(fnName, _api.glColor3hv);
    _api.glColor3hv(v);
    afterCommand(fnName);
}

// Calls glColor4hNV().
void NVHalfFloatAPI::color4H(GLhalfNV red, GLhalfNV green, GLhalfNV blue,
                             GLhalfNV alpha) const
{
    static const char *fnName = "glColor4hNV";

    beforeCommand(fnName, _api.glColor4h);
    _api.glColor4h(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glColor4hvNV().
void NVHalfFloatAPI::color4HV(const GLhalfNV *v) const
{
    static const char *fnName = "glColor4hvNV";

    beforeCommand(fnName, _api.glColor4hv);
    _api.glColor4hv(v);
    afterCommand(fnName);
}

// Calls glFogCoordhNV().
void NVHalfFloatAPI::fogCoordh(GLhalfNV fog) const
{
    static const char *fnName = "glFogCoordhNV";

    beforeCommand(fnName, _api.glFogCoordh);
    _api.glFogCoordh(fog);
    afterCommand(fnName);
}

// Calls glFogCoordhvNV().
void NVHalfFloatAPI::fogCoordhV(const GLhalfNV *fog) const
{
    static const char *fnName = "glFogCoordhvNV";

    beforeCommand(fnName, _api.glFogCoordhv);
    _api.glFogCoordhv(fog);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1hNV().
void NVHalfFloatAPI::multiTexCoord1H(TextureUnit target, GLhalfNV s) const
{
    static const char *fnName = "glMultiTexCoord1hNV";

    beforeCommand(fnName, _api.glMultiTexCoord1h);
    _api.glMultiTexCoord1h(toScalar(target), s);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1hvNV().
void NVHalfFloatAPI::multiTexCoord1HV(TextureUnit target, const GLhalfNV *v) const
{
    static const char *fnName = "glMultiTexCoord1hvNV";

    beforeCommand(fnName, _api.glMultiTexCoord1hv);
    _api.glMultiTexCoord1hv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2hNV().
void NVHalfFloatAPI::multiTexCoord2H(TextureUnit target, GLhalfNV s, GLhalfNV t) const
{
    static const char *fnName = "glMultiTexCoord2hNV";

    beforeCommand(fnName, _api.glMultiTexCoord2h);
    _api.glMultiTexCoord2h(toScalar(target), s, t);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2hvNV().
void NVHalfFloatAPI::multiTexCoord2HV(TextureUnit target, const GLhalfNV *v) const
{
    static const char *fnName = "glMultiTexCoord2hvNV";

    beforeCommand(fnName, _api.glMultiTexCoord2hv);
    _api.glMultiTexCoord2hv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3hNV().
void NVHalfFloatAPI::multiTexCoord3H(TextureUnit target, GLhalfNV s, GLhalfNV t,
                                     GLhalfNV r) const
{
    static const char *fnName = "glMultiTexCoord3hNV";

    beforeCommand(fnName, _api.glMultiTexCoord3h);
    _api.glMultiTexCoord3h(toScalar(target), s, t, r);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3hvNV().
void NVHalfFloatAPI::multiTexCoord3HV(TextureUnit target, const GLhalfNV *v) const
{
    static const char *fnName = "glMultiTexCoord3hvNV";

    beforeCommand(fnName, _api.glMultiTexCoord3hv);
    _api.glMultiTexCoord3hv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4hNV().
void NVHalfFloatAPI::multiTexCoord4H(TextureUnit target, GLhalfNV s, GLhalfNV t,
                                     GLhalfNV r, GLhalfNV q) const
{
    static const char *fnName = "glMultiTexCoord4hNV";

    beforeCommand(fnName, _api.glMultiTexCoord4h);
    _api.glMultiTexCoord4h(toScalar(target), s, t, r, q);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4hvNV().
void NVHalfFloatAPI::multiTexCoord4HV(TextureUnit target, const GLhalfNV *v) const
{
    static const char *fnName = "glMultiTexCoord4hvNV";

    beforeCommand(fnName, _api.glMultiTexCoord4hv);
    _api.glMultiTexCoord4hv(toScalar(target), v);
    afterCommand(fnName);
}

// Calls glNormal3hNV().
void NVHalfFloatAPI::normal3H(GLhalfNV nx, GLhalfNV ny, GLhalfNV nz) const
{
    static const char *fnName = "glNormal3hNV";

    beforeCommand(fnName, _api.glNormal3h);
    _api.glNormal3h(nx, ny, nz);
    afterCommand(fnName);
}

// Calls glNormal3hvNV().
void NVHalfFloatAPI::normal3HV(const GLhalfNV *v) const
{
    static const char *fnName = "glNormal3hvNV";

    beforeCommand(fnName, _api.glNormal3hv);
    _api.glNormal3hv(v);
    afterCommand(fnName);
}

// Calls glSecondaryColor3hNV().
void NVHalfFloatAPI::secondaryColor3H(GLhalfNV red, GLhalfNV green,
                                      GLhalfNV blue) const
{
    static const char *fnName = "glSecondaryColor3hNV";

    beforeCommand(fnName, _api.glSecondaryColor3h);
    _api.glSecondaryColor3h(red, green, blue);
    afterCommand(fnName);
}

// Calls glSecondaryColor3hvNV().
void NVHalfFloatAPI::secondaryColor3HV(const GLhalfNV *v) const
{
    static const char *fnName = "glSecondaryColor3hvNV";

    beforeCommand(fnName, _api.glSecondaryColor3hv);
    _api.glSecondaryColor3hv(v);
    afterCommand(fnName);
}

// Calls glTexCoord1hNV().
void NVHalfFloatAPI::texCoord1H(GLhalfNV s) const
{
    static const char *fnName = "glTexCoord1hNV";

    beforeCommand(fnName, _api.glTexCoord1h);
    _api.glTexCoord1h(s);
    afterCommand(fnName);
}

// Calls glTexCoord1hvNV().
void NVHalfFloatAPI::texCoord1HV(const GLhalfNV *v) const
{
    static const char *fnName = "glTexCoord1hvNV";

    beforeCommand(fnName, _api.glTexCoord1hv);
    _api.glTexCoord1hv(v);
    afterCommand(fnName);
}

// Calls glTexCoord2hNV().
void NVHalfFloatAPI::texCoord2H(GLhalfNV s, GLhalfNV t) const
{
    static const char *fnName = "glTexCoord2hNV";

    beforeCommand(fnName, _api.glTexCoord2h);
    _api.glTexCoord2h(s, t);
    afterCommand(fnName);
}

// Calls glTexCoord2hvNV().
void NVHalfFloatAPI::texCoord2HV(const GLhalfNV *v) const
{
    static const char *fnName = "glTexCoord2hvNV";

    beforeCommand(fnName, _api.glTexCoord2hv);
    _api.glTexCoord2hv(v);
    afterCommand(fnName);
}

// Calls glTexCoord3hNV().
void NVHalfFloatAPI::texCoord3H(GLhalfNV s, GLhalfNV t, GLhalfNV r) const
{
    static const char *fnName = "glTexCoord3hNV";

    beforeCommand(fnName, _api.glTexCoord3h);
    _api.glTexCoord3h(s, t, r);
    afterCommand(fnName);
}

// Calls glTexCoord3hvNV().
void NVHalfFloatAPI::texCoord3HV(const GLhalfNV *v) const
{
    static const char *fnName = "glTexCoord3hvNV";

    beforeCommand(fnName, _api.glTexCoord3hv);
    _api.glTexCoord3hv(v);
    afterCommand(fnName);
}

// Calls glTexCoord4hNV().
void NVHalfFloatAPI::texCoord4H(GLhalfNV s, GLhalfNV t, GLhalfNV r, GLhalfNV q) const
{
    static const char *fnName = "glTexCoord4hNV";

    beforeCommand(fnName, _api.glTexCoord4h);
    _api.glTexCoord4h(s, t, r, q);
    afterCommand(fnName);
}

// Calls glTexCoord4hvNV().
void NVHalfFloatAPI::texCoord4HV(const GLhalfNV *v) const
{
    static const char *fnName = "glTexCoord4hvNV";

    beforeCommand(fnName, _api.glTexCoord4hv);
    _api.glTexCoord4hv(v);
    afterCommand(fnName);
}

// Calls glVertex2hNV().
void NVHalfFloatAPI::vertex2H(GLhalfNV x, GLhalfNV y) const
{
    static const char *fnName = "glVertex2hNV";

    beforeCommand(fnName, _api.glVertex2h);
    _api.glVertex2h(x, y);
    afterCommand(fnName);
}

// Calls glVertex2hvNV().
void NVHalfFloatAPI::vertex2HV(const GLhalfNV *v) const
{
    static const char *fnName = "glVertex2hvNV";

    beforeCommand(fnName, _api.glVertex2hv);
    _api.glVertex2hv(v);
    afterCommand(fnName);
}

// Calls glVertex3hNV().
void NVHalfFloatAPI::vertex3H(GLhalfNV x, GLhalfNV y, GLhalfNV z) const
{
    static const char *fnName = "glVertex3hNV";

    beforeCommand(fnName, _api.glVertex3h);
    _api.glVertex3h(x, y, z);
    afterCommand(fnName);
}

// Calls glVertex3hvNV().
void NVHalfFloatAPI::vertex3HV(const GLhalfNV *v) const
{
    static const char *fnName = "glVertex3hvNV";

    beforeCommand(fnName, _api.glVertex3hv);
    _api.glVertex3hv(v);
    afterCommand(fnName);
}

// Calls glVertex4hNV().
void NVHalfFloatAPI::vertex4H(GLhalfNV x, GLhalfNV y, GLhalfNV z, GLhalfNV w) const
{
    static const char *fnName = "glVertex4hNV";

    beforeCommand(fnName, _api.glVertex4h);
    _api.glVertex4h(x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertex4hvNV().
void NVHalfFloatAPI::vertex4HV(const GLhalfNV *v) const
{
    static const char *fnName = "glVertex4hvNV";

    beforeCommand(fnName, _api.glVertex4hv);
    _api.glVertex4hv(v);
    afterCommand(fnName);
}

// Calls glVertexAttrib1hNV().
void NVHalfFloatAPI::vertexAttrib1H(GLuint index, GLhalfNV x) const
{
    static const char *fnName = "glVertexAttrib1hNV";

    beforeCommand(fnName, _api.glVertexAttrib1h);
    _api.glVertexAttrib1h(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1hvNV().
void NVHalfFloatAPI::vertexAttrib1HV(GLuint index, const GLhalfNV *v) const
{
    static const char *fnName = "glVertexAttrib1hvNV";

    beforeCommand(fnName, _api.glVertexAttrib1hv);
    _api.glVertexAttrib1hv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2hNV().
void NVHalfFloatAPI::vertexAttrib2H(GLuint index, GLhalfNV x, GLhalfNV y) const
{
    static const char *fnName = "glVertexAttrib2hNV";

    beforeCommand(fnName, _api.glVertexAttrib2h);
    _api.glVertexAttrib2h(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2hvNV().
void NVHalfFloatAPI::vertexAttrib2HV(GLuint index, const GLhalfNV *v) const
{
    static const char *fnName = "glVertexAttrib2hvNV";

    beforeCommand(fnName, _api.glVertexAttrib2hv);
    _api.glVertexAttrib2hv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3hNV().
void NVHalfFloatAPI::vertexAttrib3H(GLuint index, GLhalfNV x, GLhalfNV y,
                                    GLhalfNV z) const
{
    static const char *fnName = "glVertexAttrib3hNV";

    beforeCommand(fnName, _api.glVertexAttrib3h);
    _api.glVertexAttrib3h(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3hvNV().
void NVHalfFloatAPI::vertexAttrib3HV(GLuint index, const GLhalfNV *v) const
{
    static const char *fnName = "glVertexAttrib3hvNV";

    beforeCommand(fnName, _api.glVertexAttrib3hv);
    _api.glVertexAttrib3hv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4hNV().
void NVHalfFloatAPI::vertexAttrib4H(GLuint index, GLhalfNV x, GLhalfNV y,
                                    GLhalfNV z, GLhalfNV w) const
{
    static const char *fnName = "glVertexAttrib4hNV";

    beforeCommand(fnName, _api.glVertexAttrib4h);
    _api.glVertexAttrib4h(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4hvNV().
void NVHalfFloatAPI::vertexAttrib4HV(GLuint index, const GLhalfNV *v) const
{
    static const char *fnName = "glVertexAttrib4hvNV";

    beforeCommand(fnName, _api.glVertexAttrib4hv);
    _api.glVertexAttrib4hv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs1hvNV().
void NVHalfFloatAPI::vertexAttribs1HV(GLuint index, GLsizei n, const GLhalfNV *v) const
{
    static const char *fnName = "glVertexAttribs1hvNV";

    beforeCommand(fnName, _api.glVertexAttribs1hv);
    _api.glVertexAttribs1hv(index, n, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs2hvNV().
void NVHalfFloatAPI::vertexAttribs2HV(GLuint index, GLsizei n, const GLhalfNV *v) const
{
    static const char *fnName = "glVertexAttribs2hvNV";

    beforeCommand(fnName, _api.glVertexAttribs2hv);
    _api.glVertexAttribs2hv(index, n, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs3hvNV().
void NVHalfFloatAPI::vertexAttribs3HV(GLuint index, GLsizei n, const GLhalfNV *v) const
{
    static const char *fnName = "glVertexAttribs3hvNV";

    beforeCommand(fnName, _api.glVertexAttribs3hv);
    _api.glVertexAttribs3hv(index, n, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs4hvNV().
void NVHalfFloatAPI::vertexAttribs4HV(GLuint index, GLsizei n, const GLhalfNV *v) const
{
    static const char *fnName = "glVertexAttribs4hvNV";

    beforeCommand(fnName, _api.glVertexAttribs4hv);
    _api.glVertexAttribs4hv(index, n, v);
    afterCommand(fnName);
}

// Calls glVertexWeighthNV().
void NVHalfFloatAPI::vertexWeighth(GLhalfNV weight) const
{
    static const char *fnName = "glVertexWeighthNV";

    beforeCommand(fnName, _api.glVertexWeighth);
    _api.glVertexWeighth(weight);
    afterCommand(fnName);
}

// Calls glVertexWeighthvNV().
void NVHalfFloatAPI::vertexWeighthV(const GLhalfNV *weight) const
{
    static const char *fnName = "glVertexWeighthvNV";

    beforeCommand(fnName, _api.glVertexWeighthv);
    _api.glVertexWeighthv(weight);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVInternalformatSampleQueryAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_internalformat_sample_query extension.
NVInternalformatSampleQueryAPI::NVInternalformatSampleQueryAPI() :
    BaseExtension("GL_NV_internalformat_sample_query")
{
}

// Grant read-only access to the underlying function pointers.
const NVInternalformatSampleQuery &NVInternalformatSampleQueryAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_internalformat_sample_query entry points.
void NVInternalformatSampleQueryAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetInternalformatSampleivNV().
void NVInternalformatSampleQueryAPI::getInternalformatSampleIV(TextureTarget target,
                                                               InternalFormat internalformat,
                                                               GLsizei samples,
                                                               InternalFormatPName pname,
                                                               GLsizei count,
                                                               GLint *params) const
{
    static const char *fnName = "glGetInternalformatSampleivNV";

    beforeCommand(fnName, _api.glGetInternalformatSampleiv);
    _api.glGetInternalformatSampleiv(toScalar(target), toScalar(internalformat),
                                     samples, toScalar(pname), count, params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVMemoryAttachmentAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_memory_attachment extension.
NVMemoryAttachmentAPI::NVMemoryAttachmentAPI() :
    BaseExtension("GL_NV_memory_attachment")
{
}

// Grant read-only access to the underlying function pointers.
const NVMemoryAttachment &NVMemoryAttachmentAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_memory_attachment entry points.
void NVMemoryAttachmentAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBufferAttachMemoryNV().
void NVMemoryAttachmentAPI::bufferAttachMemory(BufferTarget target,
                                               GLuint memory, GLuint64 offset) const
{
    static const char *fnName = "glBufferAttachMemoryNV";

    beforeCommand(fnName, _api.glBufferAttachMemory);
    _api.glBufferAttachMemory(toScalar(target), memory, offset);
    afterCommand(fnName);
}

// Calls glGetMemoryObjectDetachedResourcesuivNV().
void NVMemoryAttachmentAPI::getMemoryObjectDetachedResourcesuiv(GLuint memory,
                                                                GLenum pname,
                                                                GLint first,
                                                                GLsizei count,
                                                                GLuint *params) const
{
    static const char *fnName = "glGetMemoryObjectDetachedResourcesuivNV";

    beforeCommand(fnName, _api.glGetMemoryObjectDetachedResourcesuiv);
    _api.glGetMemoryObjectDetachedResourcesuiv(memory, pname, first, count,
                                               params);
    afterCommand(fnName);
}

// Calls glNamedBufferAttachMemoryNV().
void NVMemoryAttachmentAPI::namedBufferAttachMemory(BufferName buffer,
                                                    GLuint memory,
                                                    GLuint64 offset) const
{
    static const char *fnName = "glNamedBufferAttachMemoryNV";

    beforeCommand(fnName, _api.glNamedBufferAttachMemory);
    _api.glNamedBufferAttachMemory(buffer.ID, memory, offset);
    afterCommand(fnName);
}

// Calls glResetMemoryObjectParameterNV().
void NVMemoryAttachmentAPI::resetMemoryObjectParameter(GLuint memory,
                                                       GLenum pname) const
{
    static const char *fnName = "glResetMemoryObjectParameterNV";

    beforeCommand(fnName, _api.glResetMemoryObjectParameter);
    _api.glResetMemoryObjectParameter(memory, pname);
    afterCommand(fnName);
}

// Calls glTexAttachMemoryNV().
void NVMemoryAttachmentAPI::texAttachMemory(TextureTarget target, GLuint memory,
                                            GLuint64 offset) const
{
    static const char *fnName = "glTexAttachMemoryNV";

    beforeCommand(fnName, _api.glTexAttachMemory);
    _api.glTexAttachMemory(toScalar(target), memory, offset);
    afterCommand(fnName);
}

// Calls glTextureAttachMemoryNV().
void NVMemoryAttachmentAPI::textureAttachMemory(TextureName texture,
                                                GLuint memory, GLuint64 offset) const
{
    static const char *fnName = "glTextureAttachMemoryNV";

    beforeCommand(fnName, _api.glTextureAttachMemory);
    _api.glTextureAttachMemory(texture.ID, memory, offset);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVMemoryObjectSparseAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_memory_object_sparse extension.
NVMemoryObjectSparseAPI::NVMemoryObjectSparseAPI() :
    BaseExtension("GL_NV_memory_object_sparse")
{
}

// Grant read-only access to the underlying function pointers.
const NVMemoryObjectSparse &NVMemoryObjectSparseAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_memory_object_sparse entry points.
void NVMemoryObjectSparseAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBufferPageCommitmentMemNV().
void NVMemoryObjectSparseAPI::bufferPageCommitmentMem(BufferStorageTarget target,
                                                      GLintptr offset,
                                                      GLsizeiptr size,
                                                      GLuint memory,
                                                      GLuint64 memOffset,
                                                      Boolean commit) const
{
    static const char *fnName = "glBufferPageCommitmentMemNV";

    beforeCommand(fnName, _api.glBufferPageCommitmentMem);
    _api.glBufferPageCommitmentMem(toScalar(target), offset, size, memory,
                                   memOffset, toScalar(commit));
    afterCommand(fnName);
}

// Calls glNamedBufferPageCommitmentMemNV().
void NVMemoryObjectSparseAPI::namedBufferPageCommitmentMem(BufferName buffer,
                                                           GLintptr offset,
                                                           GLsizeiptr size,
                                                           GLuint memory,
                                                           GLuint64 memOffset,
                                                           Boolean commit) const
{
    static const char *fnName = "glNamedBufferPageCommitmentMemNV";

    beforeCommand(fnName, _api.glNamedBufferPageCommitmentMem);
    _api.glNamedBufferPageCommitmentMem(buffer.ID, offset, size, memory,
                                        memOffset, toScalar(commit));
    afterCommand(fnName);
}

// Calls glTexPageCommitmentMemNV().
void NVMemoryObjectSparseAPI::texPageCommitmentMem(TextureTarget target,
                                                   GLint layer, GLint level,
                                                   GLint xoffset, GLint yoffset,
                                                   GLint zoffset, GLsizei width,
                                                   GLsizei height, GLsizei depth,
                                                   GLuint memory,
                                                   GLuint64 offset,
                                                   Boolean commit) const
{
    static const char *fnName = "glTexPageCommitmentMemNV";

    beforeCommand(fnName, _api.glTexPageCommitmentMem);
    _api.glTexPageCommitmentMem(toScalar(target), layer, level, xoffset, yoffset,
                                zoffset, width, height, depth, memory, offset,
                                toScalar(commit));
    afterCommand(fnName);
}

// Calls glTexturePageCommitmentMemNV().
void NVMemoryObjectSparseAPI::texturePageCommitmentMem(TextureName texture,
                                                       GLint layer, GLint level,
                                                       GLint xoffset,
                                                       GLint yoffset,
                                                       GLint zoffset,
                                                       GLsizei width,
                                                       GLsizei height,
                                                       GLsizei depth,
                                                       GLuint memory,
                                                       GLuint64 offset,
                                                       Boolean commit) const
{
    static const char *fnName = "glTexturePageCommitmentMemNV";

    beforeCommand(fnName, _api.glTexturePageCommitmentMem);
    _api.glTexturePageCommitmentMem(texture.ID, layer, level, xoffset, yoffset,
                                    zoffset, width, height, depth, memory,
                                    offset, toScalar(commit));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVMeshShaderAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_mesh_shader extension.
NVMeshShaderAPI::NVMeshShaderAPI() :
    BaseExtension("GL_NV_mesh_shader")
{
}

// Grant read-only access to the underlying function pointers.
const NVMeshShader &NVMeshShaderAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_mesh_shader entry points.
void NVMeshShaderAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawMeshTasksIndirectNV().
void NVMeshShaderAPI::drawMeshTasksIndirect(GLintptr indirect) const
{
    static const char *fnName = "glDrawMeshTasksIndirectNV";

    beforeCommand(fnName, _api.glDrawMeshTasksIndirect);
    _api.glDrawMeshTasksIndirect(indirect);
    afterCommand(fnName);
}

// Calls glDrawMeshTasksNV().
void NVMeshShaderAPI::drawMeshTasks(GLuint first, GLuint count) const
{
    static const char *fnName = "glDrawMeshTasksNV";

    beforeCommand(fnName, _api.glDrawMeshTasks);
    _api.glDrawMeshTasks(first, count);
    afterCommand(fnName);
}

// Calls glMultiDrawMeshTasksIndirectCountNV().
void NVMeshShaderAPI::multiDrawMeshTasksIndirectCount(GLintptr indirect,
                                                      GLintptr drawcount,
                                                      GLsizei maxdrawcount,
                                                      GLsizei stride) const
{
    static const char *fnName = "glMultiDrawMeshTasksIndirectCountNV";

    beforeCommand(fnName, _api.glMultiDrawMeshTasksIndirectCount);
    _api.glMultiDrawMeshTasksIndirectCount(indirect, drawcount, maxdrawcount,
                                           stride);
    afterCommand(fnName);
}

// Calls glMultiDrawMeshTasksIndirectNV().
void NVMeshShaderAPI::multiDrawMeshTasksIndirect(GLintptr indirect,
                                                 GLsizei drawcount,
                                                 GLsizei stride) const
{
    static const char *fnName = "glMultiDrawMeshTasksIndirectNV";

    beforeCommand(fnName, _api.glMultiDrawMeshTasksIndirect);
    _api.glMultiDrawMeshTasksIndirect(indirect, drawcount, stride);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVOcclusionQueryAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_occlusion_query extension.
NVOcclusionQueryAPI::NVOcclusionQueryAPI() :
    BaseExtension("GL_NV_occlusion_query")
{
}

// Grant read-only access to the underlying function pointers.
const NVOcclusionQuery &NVOcclusionQueryAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_occlusion_query entry points.
void NVOcclusionQueryAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginOcclusionQueryNV().
void NVOcclusionQueryAPI::beginOcclusionQuery(GLuint id) const
{
    static const char *fnName = "glBeginOcclusionQueryNV";

    beforeCommand(fnName, _api.glBeginOcclusionQuery);
    _api.glBeginOcclusionQuery(id);
    afterCommand(fnName);
}

// Calls glDeleteOcclusionQueriesNV().
void NVOcclusionQueryAPI::deleteOcclusionQueries(GLsizei n, const GLuint *ids) const
{
    static const char *fnName = "glDeleteOcclusionQueriesNV";

    beforeCommand(fnName, _api.glDeleteOcclusionQueries);
    _api.glDeleteOcclusionQueries(n, ids);
    afterCommand(fnName);
}

// Calls glEndOcclusionQueryNV().
void NVOcclusionQueryAPI::endOcclusionQuery() const
{
    static const char *fnName = "glEndOcclusionQueryNV";

    beforeCommand(fnName, _api.glEndOcclusionQuery);
    _api.glEndOcclusionQuery();
    afterCommand(fnName);
}

// Calls glGenOcclusionQueriesNV().
void NVOcclusionQueryAPI::genOcclusionQueries(GLsizei n, GLuint *ids) const
{
    static const char *fnName = "glGenOcclusionQueriesNV";

    beforeCommand(fnName, _api.glGenOcclusionQueries);
    _api.glGenOcclusionQueries(n, ids);
    afterCommand(fnName);
}

// Calls glGetOcclusionQueryivNV().
void NVOcclusionQueryAPI::getOcclusionQueryIV(GLuint id,
                                              OcclusionQueryParameterNameNV pname,
                                              GLint *params) const
{
    static const char *fnName = "glGetOcclusionQueryivNV";

    beforeCommand(fnName, _api.glGetOcclusionQueryiv);
    _api.glGetOcclusionQueryiv(id, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetOcclusionQueryuivNV().
void NVOcclusionQueryAPI::getOcclusionQueryUIV(GLuint id,
                                               OcclusionQueryParameterNameNV pname,
                                               GLuint *params) const
{
    static const char *fnName = "glGetOcclusionQueryuivNV";

    beforeCommand(fnName, _api.glGetOcclusionQueryuiv);
    _api.glGetOcclusionQueryuiv(id, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsOcclusionQueryNV().
Boolean NVOcclusionQueryAPI::isOcclusionQuery(GLuint id) const
{
    static const char *fnName = "glIsOcclusionQueryNV";

    beforeCommand(fnName, _api.glIsOcclusionQuery);
    GLboolean result = _api.glIsOcclusionQuery(id);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

////////////////////////////////////////////////////////////////////////////////
// NVParameterBufferObjectAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_parameter_buffer_object extension.
NVParameterBufferObjectAPI::NVParameterBufferObjectAPI() :
    BaseExtension("GL_NV_parameter_buffer_object")
{
}

// Grant read-only access to the underlying function pointers.
const NVParameterBufferObject &NVParameterBufferObjectAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_parameter_buffer_object entry points.
void NVParameterBufferObjectAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glProgramBufferParametersIivNV().
void NVParameterBufferObjectAPI::programBufferParametersIIV(ProgramTarget target,
                                                            GLuint bindingIndex,
                                                            GLuint wordIndex,
                                                            GLsizei count,
                                                            const GLint *params) const
{
    static const char *fnName = "glProgramBufferParametersIivNV";

    beforeCommand(fnName, _api.glProgramBufferParametersIiv);
    _api.glProgramBufferParametersIiv(toScalar(target), bindingIndex, wordIndex,
                                      count, params);
    afterCommand(fnName);
}

// Calls glProgramBufferParametersIuivNV().
void NVParameterBufferObjectAPI::programBufferParametersIUIV(ProgramTarget target,
                                                             GLuint bindingIndex,
                                                             GLuint wordIndex,
                                                             GLsizei count,
                                                             const GLuint *params) const
{
    static const char *fnName = "glProgramBufferParametersIuivNV";

    beforeCommand(fnName, _api.glProgramBufferParametersIuiv);
    _api.glProgramBufferParametersIuiv(toScalar(target), bindingIndex, wordIndex,
                                       count, params);
    afterCommand(fnName);
}

// Calls glProgramBufferParametersfvNV().
void NVParameterBufferObjectAPI::programBufferParametersFV(ProgramTarget target,
                                                           GLuint bindingIndex,
                                                           GLuint wordIndex,
                                                           GLsizei count,
                                                           const GLfloat *params) const
{
    static const char *fnName = "glProgramBufferParametersfvNV";

    beforeCommand(fnName, _api.glProgramBufferParametersfv);
    _api.glProgramBufferParametersfv(toScalar(target), bindingIndex, wordIndex,
                                     count, params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVPathRenderingAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_path_rendering extension.
NVPathRenderingAPI::NVPathRenderingAPI() :
    BaseExtension("GL_NV_path_rendering")
{
}

// Grant read-only access to the underlying function pointers.
const NVPathRendering &NVPathRenderingAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_path_rendering entry points.
void NVPathRenderingAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCopyPathNV().
void NVPathRenderingAPI::copyPath(GLuint resultPath, GLuint srcPath) const
{
    static const char *fnName = "glCopyPathNV";

    beforeCommand(fnName, _api.glCopyPath);
    _api.glCopyPath(resultPath, srcPath);
    afterCommand(fnName);
}

// Calls glCoverFillPathInstancedNV().
void NVPathRenderingAPI::coverFillPathInstanced(GLsizei numPaths,
                                                PathElementType pathNameType,
                                                const void *paths,
                                                GLuint pathBase,
                                                PathCoverMode coverMode,
                                                PathTransformType transformType,
                                                const GLfloat *transformValues) const
{
    static const char *fnName = "glCoverFillPathInstancedNV";

    beforeCommand(fnName, _api.glCoverFillPathInstanced);
    _api.glCoverFillPathInstanced(numPaths, toScalar(pathNameType), paths,
                                  pathBase, toScalar(coverMode),
                                  toScalar(transformType), transformValues);
    afterCommand(fnName);
}

// Calls glCoverFillPathNV().
void NVPathRenderingAPI::coverFillPath(GLuint path, PathCoverMode coverMode) const
{
    static const char *fnName = "glCoverFillPathNV";

    beforeCommand(fnName, _api.glCoverFillPath);
    _api.glCoverFillPath(path, toScalar(coverMode));
    afterCommand(fnName);
}

// Calls glCoverStrokePathInstancedNV().
void NVPathRenderingAPI::coverStrokePathInstanced(GLsizei numPaths,
                                                  PathElementType pathNameType,
                                                  const void *paths,
                                                  GLuint pathBase,
                                                  PathCoverMode coverMode,
                                                  PathTransformType transformType,
                                                  const GLfloat *transformValues) const
{
    static const char *fnName = "glCoverStrokePathInstancedNV";

    beforeCommand(fnName, _api.glCoverStrokePathInstanced);
    _api.glCoverStrokePathInstanced(numPaths, toScalar(pathNameType), paths,
                                    pathBase, toScalar(coverMode),
                                    toScalar(transformType), transformValues);
    afterCommand(fnName);
}

// Calls glCoverStrokePathNV().
void NVPathRenderingAPI::coverStrokePath(GLuint path, PathCoverMode coverMode) const
{
    static const char *fnName = "glCoverStrokePathNV";

    beforeCommand(fnName, _api.glCoverStrokePath);
    _api.glCoverStrokePath(path, toScalar(coverMode));
    afterCommand(fnName);
}

// Calls glDeletePathsNV().
void NVPathRenderingAPI::deletePaths(GLuint path, GLsizei range) const
{
    static const char *fnName = "glDeletePathsNV";

    beforeCommand(fnName, _api.glDeletePaths);
    _api.glDeletePaths(path, range);
    afterCommand(fnName);
}

// Calls glGenPathsNV().
GLuint NVPathRenderingAPI::genPaths(GLsizei range) const
{
    static const char *fnName = "glGenPathsNV";

    beforeCommand(fnName, _api.glGenPaths);
    GLuint result = _api.glGenPaths(range);
    afterCommand(fnName);

    return result;
}

// Calls glGetPathCommandsNV().
void NVPathRenderingAPI::getPathCommands(GLuint path, GLubyte *commands) const
{
    static const char *fnName = "glGetPathCommandsNV";

    beforeCommand(fnName, _api.glGetPathCommands);
    _api.glGetPathCommands(path, commands);
    afterCommand(fnName);
}

// Calls glGetPathCoordsNV().
void NVPathRenderingAPI::getPathCoords(GLuint path, GLfloat *coords) const
{
    static const char *fnName = "glGetPathCoordsNV";

    beforeCommand(fnName, _api.glGetPathCoords);
    _api.glGetPathCoords(path, coords);
    afterCommand(fnName);
}

// Calls glGetPathDashArrayNV().
void NVPathRenderingAPI::getPathDashArray(GLuint path, GLfloat *dashArray) const
{
    static const char *fnName = "glGetPathDashArrayNV";

    beforeCommand(fnName, _api.glGetPathDashArray);
    _api.glGetPathDashArray(path, dashArray);
    afterCommand(fnName);
}

// Calls glGetPathLengthNV().
GLfloat NVPathRenderingAPI::getPathLength(GLuint path, GLsizei startSegment,
                                          GLsizei numSegments) const
{
    static const char *fnName = "glGetPathLengthNV";

    beforeCommand(fnName, _api.glGetPathLength);
    GLfloat result = _api.glGetPathLength(path, startSegment, numSegments);
    afterCommand(fnName);

    return result;
}

// Calls glGetPathMetricRangeNV().
void NVPathRenderingAPI::getPathMetricRange(GLbitfield  /* PathMetricMask */ metricQueryMask,
                                            GLuint firstPathName,
                                            GLsizei numPaths, GLsizei stride,
                                            GLfloat *metrics) const
{
    static const char *fnName = "glGetPathMetricRangeNV";

    beforeCommand(fnName, _api.glGetPathMetricRange);
    _api.glGetPathMetricRange(metricQueryMask, firstPathName, numPaths, stride,
                              metrics);
    afterCommand(fnName);
}

// Calls glGetPathMetricsNV().
void NVPathRenderingAPI::getPathMetrics(GLbitfield  /* PathMetricMask */ metricQueryMask,
                                        GLsizei numPaths,
                                        PathElementType pathNameType,
                                        const void *paths, GLuint pathBase,
                                        GLsizei stride, GLfloat *metrics) const
{
    static const char *fnName = "glGetPathMetricsNV";

    beforeCommand(fnName, _api.glGetPathMetrics);
    _api.glGetPathMetrics(metricQueryMask, numPaths, toScalar(pathNameType),
                          paths, pathBase, stride, metrics);
    afterCommand(fnName);
}

// Calls glGetPathParameterfvNV().
void NVPathRenderingAPI::getPathParameterFV(GLuint path, PathParameter pname,
                                            GLfloat *value) const
{
    static const char *fnName = "glGetPathParameterfvNV";

    beforeCommand(fnName, _api.glGetPathParameterfv);
    _api.glGetPathParameterfv(path, toScalar(pname), value);
    afterCommand(fnName);
}

// Calls glGetPathParameterivNV().
void NVPathRenderingAPI::getPathParameterIV(GLuint path, PathParameter pname,
                                            GLint *value) const
{
    static const char *fnName = "glGetPathParameterivNV";

    beforeCommand(fnName, _api.glGetPathParameteriv);
    _api.glGetPathParameteriv(path, toScalar(pname), value);
    afterCommand(fnName);
}

// Calls glGetPathSpacingNV().
void NVPathRenderingAPI::getPathSpacing(PathListMode pathListMode,
                                        GLsizei numPaths,
                                        PathElementType pathNameType,
                                        const void *paths, GLuint pathBase,
                                        GLfloat advanceScale,
                                        GLfloat kerningScale,
                                        PathTransformType transformType,
                                        GLfloat *returnedSpacing) const
{
    static const char *fnName = "glGetPathSpacingNV";

    beforeCommand(fnName, _api.glGetPathSpacing);
    _api.glGetPathSpacing(toScalar(pathListMode), numPaths,
                          toScalar(pathNameType), paths, pathBase, advanceScale,
                          kerningScale, toScalar(transformType), returnedSpacing);
    afterCommand(fnName);
}

// Calls glGetProgramResourcefvNV().
void NVPathRenderingAPI::getProgramResourceFV(ProgramName program,
                                              ProgramInterface programInterface,
                                              GLuint index, GLsizei propCount,
                                              const GLenum *props, GLsizei count,
                                              GLsizei *length, GLfloat *params) const
{
    static const char *fnName = "glGetProgramResourcefvNV";

    beforeCommand(fnName, _api.glGetProgramResourcefv);
    _api.glGetProgramResourcefv(program.ID, toScalar(programInterface), index,
                                propCount, props, count, length, params);
    afterCommand(fnName);
}

// Calls glInterpolatePathsNV().
void NVPathRenderingAPI::interpolatePaths(GLuint resultPath, GLuint pathA,
                                          GLuint pathB, GLfloat weight) const
{
    static const char *fnName = "glInterpolatePathsNV";

    beforeCommand(fnName, _api.glInterpolatePaths);
    _api.glInterpolatePaths(resultPath, pathA, pathB, weight);
    afterCommand(fnName);
}

// Calls glIsPathNV().
Boolean NVPathRenderingAPI::isPath(GLuint path) const
{
    static const char *fnName = "glIsPathNV";

    beforeCommand(fnName, _api.glIsPath);
    GLboolean result = _api.glIsPath(path);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsPointInFillPathNV().
Boolean NVPathRenderingAPI::isPointInFillPath(GLuint path, GLuint mask,
                                              GLfloat x, GLfloat y) const
{
    static const char *fnName = "glIsPointInFillPathNV";

    beforeCommand(fnName, _api.glIsPointInFillPath);
    GLboolean result = _api.glIsPointInFillPath(path, mask, x, y);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsPointInStrokePathNV().
Boolean NVPathRenderingAPI::isPointInStrokePath(GLuint path, GLfloat x,
                                                GLfloat y) const
{
    static const char *fnName = "glIsPointInStrokePathNV";

    beforeCommand(fnName, _api.glIsPointInStrokePath);
    GLboolean result = _api.glIsPointInStrokePath(path, x, y);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMatrixLoad3x2fNV().
void NVPathRenderingAPI::matrixLoad3x2F(GLenum matrixMode, const GLfloat *m) const
{
    static const char *fnName = "glMatrixLoad3x2fNV";

    beforeCommand(fnName, _api.glMatrixLoad3x2f);
    _api.glMatrixLoad3x2f(matrixMode, m);
    afterCommand(fnName);
}

// Calls glMatrixLoad3x3fNV().
void NVPathRenderingAPI::matrixLoad3x3F(GLenum matrixMode, const GLfloat *m) const
{
    static const char *fnName = "glMatrixLoad3x3fNV";

    beforeCommand(fnName, _api.glMatrixLoad3x3f);
    _api.glMatrixLoad3x3f(matrixMode, m);
    afterCommand(fnName);
}

// Calls glMatrixLoadTranspose3x3fNV().
void NVPathRenderingAPI::matrixLoadTranspose3x3F(GLenum matrixMode,
                                                 const GLfloat *m) const
{
    static const char *fnName = "glMatrixLoadTranspose3x3fNV";

    beforeCommand(fnName, _api.glMatrixLoadTranspose3x3f);
    _api.glMatrixLoadTranspose3x3f(matrixMode, m);
    afterCommand(fnName);
}

// Calls glMatrixMult3x2fNV().
void NVPathRenderingAPI::matrixMult3x2F(GLenum matrixMode, const GLfloat *m) const
{
    static const char *fnName = "glMatrixMult3x2fNV";

    beforeCommand(fnName, _api.glMatrixMult3x2f);
    _api.glMatrixMult3x2f(matrixMode, m);
    afterCommand(fnName);
}

// Calls glMatrixMult3x3fNV().
void NVPathRenderingAPI::matrixMult3x3F(GLenum matrixMode, const GLfloat *m) const
{
    static const char *fnName = "glMatrixMult3x3fNV";

    beforeCommand(fnName, _api.glMatrixMult3x3f);
    _api.glMatrixMult3x3f(matrixMode, m);
    afterCommand(fnName);
}

// Calls glMatrixMultTranspose3x3fNV().
void NVPathRenderingAPI::matrixMultTranspose3x3F(GLenum matrixMode,
                                                 const GLfloat *m) const
{
    static const char *fnName = "glMatrixMultTranspose3x3fNV";

    beforeCommand(fnName, _api.glMatrixMultTranspose3x3f);
    _api.glMatrixMultTranspose3x3f(matrixMode, m);
    afterCommand(fnName);
}

// Calls glPathCommandsNV().
void NVPathRenderingAPI::pathCommands(GLuint path, GLsizei numCommands,
                                      const GLubyte *commands, GLsizei numCoords,
                                      PathCoordType coordType,
                                      const void *coords) const
{
    static const char *fnName = "glPathCommandsNV";

    beforeCommand(fnName, _api.glPathCommands);
    _api.glPathCommands(path, numCommands, commands, numCoords,
                        toScalar(coordType), coords);
    afterCommand(fnName);
}

// Calls glPathCoordsNV().
void NVPathRenderingAPI::pathCoords(GLuint path, GLsizei numCoords,
                                    PathCoordType coordType, const void *coords) const
{
    static const char *fnName = "glPathCoordsNV";

    beforeCommand(fnName, _api.glPathCoords);
    _api.glPathCoords(path, numCoords, toScalar(coordType), coords);
    afterCommand(fnName);
}

// Calls glPathCoverDepthFuncNV().
void NVPathRenderingAPI::pathCoverDepthFunc(DepthFunction func) const
{
    static const char *fnName = "glPathCoverDepthFuncNV";

    beforeCommand(fnName, _api.glPathCoverDepthFunc);
    _api.glPathCoverDepthFunc(toScalar(func));
    afterCommand(fnName);
}

// Calls glPathDashArrayNV().
void NVPathRenderingAPI::pathDashArray(GLuint path, GLsizei dashCount,
                                       const GLfloat *dashArray) const
{
    static const char *fnName = "glPathDashArrayNV";

    beforeCommand(fnName, _api.glPathDashArray);
    _api.glPathDashArray(path, dashCount, dashArray);
    afterCommand(fnName);
}

// Calls glPathGlyphIndexArrayNV().
GLenum NVPathRenderingAPI::pathGlyphIndexArray(GLuint firstPathName,
                                               GLenum fontTarget,
                                               const void *fontName,
                                               GLbitfield  /* PathFontStyle */ fontStyle,
                                               GLuint firstGlyphIndex,
                                               GLsizei numGlyphs,
                                               GLuint pathParameterTemplate,
                                               GLfloat emScale) const
{
    static const char *fnName = "glPathGlyphIndexArrayNV";

    beforeCommand(fnName, _api.glPathGlyphIndexArray);
    GLenum result = _api.glPathGlyphIndexArray(firstPathName, fontTarget,
                                               fontName, fontStyle,
                                               firstGlyphIndex, numGlyphs,
                                               pathParameterTemplate, emScale);
    afterCommand(fnName);

    return result;
}

// Calls glPathGlyphIndexRangeNV().
GLenum NVPathRenderingAPI::pathGlyphIndexRange(GLenum fontTarget,
                                               const void *fontName,
                                               GLbitfield  /* PathFontStyle */ fontStyle,
                                               GLuint pathParameterTemplate,
                                               GLfloat emScale,
                                               GLuint *baseAndCount) const
{
    static const char *fnName = "glPathGlyphIndexRangeNV";

    beforeCommand(fnName, _api.glPathGlyphIndexRange);
    GLenum result = _api.glPathGlyphIndexRange(fontTarget, fontName, fontStyle,
                                               pathParameterTemplate, emScale,
                                               baseAndCount);
    afterCommand(fnName);

    return result;
}

// Calls glPathGlyphRangeNV().
void NVPathRenderingAPI::pathGlyphRange(GLuint firstPathName,
                                        PathFontTarget fontTarget,
                                        const void *fontName,
                                        GLbitfield  /* PathFontStyle */ fontStyle,
                                        GLuint firstGlyph, GLsizei numGlyphs,
                                        PathHandleMissingGlyphs handleMissingGlyphs,
                                        GLuint pathParameterTemplate,
                                        GLfloat emScale) const
{
    static const char *fnName = "glPathGlyphRangeNV";

    beforeCommand(fnName, _api.glPathGlyphRange);
    _api.glPathGlyphRange(firstPathName, toScalar(fontTarget), fontName,
                          fontStyle, firstGlyph, numGlyphs,
                          toScalar(handleMissingGlyphs), pathParameterTemplate,
                          emScale);
    afterCommand(fnName);
}

// Calls glPathGlyphsNV().
void NVPathRenderingAPI::pathGlyphs(GLuint firstPathName,
                                    PathFontTarget fontTarget,
                                    const void *fontName,
                                    GLbitfield  /* PathFontStyle */ fontStyle,
                                    GLsizei numGlyphs, PathElementType type,
                                    const void *charcodes,
                                    PathHandleMissingGlyphs handleMissingGlyphs,
                                    GLuint pathParameterTemplate,
                                    GLfloat emScale) const
{
    static const char *fnName = "glPathGlyphsNV";

    beforeCommand(fnName, _api.glPathGlyphs);
    _api.glPathGlyphs(firstPathName, toScalar(fontTarget), fontName, fontStyle,
                      numGlyphs, toScalar(type), charcodes,
                      toScalar(handleMissingGlyphs), pathParameterTemplate,
                      emScale);
    afterCommand(fnName);
}

// Calls glPathMemoryGlyphIndexArrayNV().
GLenum NVPathRenderingAPI::pathMemoryGlyphIndexArray(GLuint firstPathName,
                                                     GLenum fontTarget,
                                                     GLsizeiptr fontSize,
                                                     const void *fontData,
                                                     GLsizei faceIndex,
                                                     GLuint firstGlyphIndex,
                                                     GLsizei numGlyphs,
                                                     GLuint pathParameterTemplate,
                                                     GLfloat emScale) const
{
    static const char *fnName = "glPathMemoryGlyphIndexArrayNV";

    beforeCommand(fnName, _api.glPathMemoryGlyphIndexArray);
    GLenum result = _api.glPathMemoryGlyphIndexArray(firstPathName, fontTarget,
                                                     fontSize, fontData,
                                                     faceIndex, firstGlyphIndex,
                                                     numGlyphs,
                                                     pathParameterTemplate,
                                                     emScale);
    afterCommand(fnName);

    return result;
}

// Calls glPathParameterfNV().
void NVPathRenderingAPI::pathParameterF(GLuint path, PathParameter pname,
                                        GLfloat value) const
{
    static const char *fnName = "glPathParameterfNV";

    beforeCommand(fnName, _api.glPathParameterf);
    _api.glPathParameterf(path, toScalar(pname), value);
    afterCommand(fnName);
}

// Calls glPathParameterfvNV().
void NVPathRenderingAPI::pathParameterFV(GLuint path, PathParameter pname,
                                         const GLfloat *value) const
{
    static const char *fnName = "glPathParameterfvNV";

    beforeCommand(fnName, _api.glPathParameterfv);
    _api.glPathParameterfv(path, toScalar(pname), value);
    afterCommand(fnName);
}

// Calls glPathParameteriNV().
void NVPathRenderingAPI::pathParameterI(GLuint path, PathParameter pname,
                                        GLint value) const
{
    static const char *fnName = "glPathParameteriNV";

    beforeCommand(fnName, _api.glPathParameteri);
    _api.glPathParameteri(path, toScalar(pname), value);
    afterCommand(fnName);
}

// Calls glPathParameterivNV().
void NVPathRenderingAPI::pathParameterIV(GLuint path, PathParameter pname,
                                         const GLint *value) const
{
    static const char *fnName = "glPathParameterivNV";

    beforeCommand(fnName, _api.glPathParameteriv);
    _api.glPathParameteriv(path, toScalar(pname), value);
    afterCommand(fnName);
}

// Calls glPathStencilDepthOffsetNV().
void NVPathRenderingAPI::pathStencilDepthOffset(GLfloat factor, GLfloat units) const
{
    static const char *fnName = "glPathStencilDepthOffsetNV";

    beforeCommand(fnName, _api.glPathStencilDepthOffset);
    _api.glPathStencilDepthOffset(factor, units);
    afterCommand(fnName);
}

// Calls glPathStencilFuncNV().
void NVPathRenderingAPI::pathStencilFunc(StencilFunction func, GLint ref,
                                         GLuint mask) const
{
    static const char *fnName = "glPathStencilFuncNV";

    beforeCommand(fnName, _api.glPathStencilFunc);
    _api.glPathStencilFunc(toScalar(func), ref, mask);
    afterCommand(fnName);
}

// Calls glPathStringNV().
void NVPathRenderingAPI::pathString(GLuint path, PathStringFormat format,
                                    GLsizei length, const void *pathString) const
{
    static const char *fnName = "glPathStringNV";

    beforeCommand(fnName, _api.glPathString);
    _api.glPathString(path, toScalar(format), length, pathString);
    afterCommand(fnName);
}

// Calls glPathSubCommandsNV().
void NVPathRenderingAPI::pathSubCommands(GLuint path, GLsizei commandStart,
                                         GLsizei commandsToDelete,
                                         GLsizei numCommands,
                                         const GLubyte *commands,
                                         GLsizei numCoords,
                                         PathCoordType coordType,
                                         const void *coords) const
{
    static const char *fnName = "glPathSubCommandsNV";

    beforeCommand(fnName, _api.glPathSubCommands);
    _api.glPathSubCommands(path, commandStart, commandsToDelete, numCommands,
                           commands, numCoords, toScalar(coordType), coords);
    afterCommand(fnName);
}

// Calls glPathSubCoordsNV().
void NVPathRenderingAPI::pathSubCoords(GLuint path, GLsizei coordStart,
                                       GLsizei numCoords,
                                       PathCoordType coordType,
                                       const void *coords) const
{
    static const char *fnName = "glPathSubCoordsNV";

    beforeCommand(fnName, _api.glPathSubCoords);
    _api.glPathSubCoords(path, coordStart, numCoords, toScalar(coordType),
                         coords);
    afterCommand(fnName);
}

// Calls glPointAlongPathNV().
Boolean NVPathRenderingAPI::pointAlongPath(GLuint path, GLsizei startSegment,
                                           GLsizei numSegments, GLfloat distance,
                                           GLfloat *x, GLfloat *y,
                                           GLfloat *tangentX, GLfloat *tangentY) const
{
    static const char *fnName = "glPointAlongPathNV";

    beforeCommand(fnName, _api.glPointAlongPath);
    GLboolean result = _api.glPointAlongPath(path, startSegment, numSegments,
                                             distance, x, y, tangentX, tangentY);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glProgramPathFragmentInputGenNV().
void NVPathRenderingAPI::programPathFragmentInputGen(ProgramName program,
                                                     GLint location,
                                                     GLenum genMode,
                                                     GLint components,
                                                     const GLfloat *coeffs) const
{
    static const char *fnName = "glProgramPathFragmentInputGenNV";

    beforeCommand(fnName, _api.glProgramPathFragmentInputGen);
    _api.glProgramPathFragmentInputGen(program.ID, location, genMode, components,
                                       coeffs);
    afterCommand(fnName);
}

// Calls glStencilFillPathInstancedNV().
void NVPathRenderingAPI::stencilFillPathInstanced(GLsizei numPaths,
                                                  PathElementType pathNameType,
                                                  const void *paths,
                                                  GLuint pathBase,
                                                  PathFillMode fillMode,
                                                  GLuint mask,
                                                  PathTransformType transformType,
                                                  const GLfloat *transformValues) const
{
    static const char *fnName = "glStencilFillPathInstancedNV";

    beforeCommand(fnName, _api.glStencilFillPathInstanced);
    _api.glStencilFillPathInstanced(numPaths, toScalar(pathNameType), paths,
                                    pathBase, toScalar(fillMode), mask,
                                    toScalar(transformType), transformValues);
    afterCommand(fnName);
}

// Calls glStencilFillPathNV().
void NVPathRenderingAPI::stencilFillPath(GLuint path, PathFillMode fillMode,
                                         GLuint mask) const
{
    static const char *fnName = "glStencilFillPathNV";

    beforeCommand(fnName, _api.glStencilFillPath);
    _api.glStencilFillPath(path, toScalar(fillMode), mask);
    afterCommand(fnName);
}

// Calls glStencilStrokePathInstancedNV().
void NVPathRenderingAPI::stencilStrokePathInstanced(GLsizei numPaths,
                                                    PathElementType pathNameType,
                                                    const void *paths,
                                                    GLuint pathBase,
                                                    GLint reference, GLuint mask,
                                                    PathTransformType transformType,
                                                    const GLfloat *transformValues) const
{
    static const char *fnName = "glStencilStrokePathInstancedNV";

    beforeCommand(fnName, _api.glStencilStrokePathInstanced);
    _api.glStencilStrokePathInstanced(numPaths, toScalar(pathNameType), paths,
                                      pathBase, reference, mask,
                                      toScalar(transformType), transformValues);
    afterCommand(fnName);
}

// Calls glStencilStrokePathNV().
void NVPathRenderingAPI::stencilStrokePath(GLuint path, GLint reference,
                                           GLuint mask) const
{
    static const char *fnName = "glStencilStrokePathNV";

    beforeCommand(fnName, _api.glStencilStrokePath);
    _api.glStencilStrokePath(path, reference, mask);
    afterCommand(fnName);
}

// Calls glStencilThenCoverFillPathInstancedNV().
void NVPathRenderingAPI::stencilThenCoverFillPathInstanced(GLsizei numPaths,
                                                           GLenum pathNameType,
                                                           const void *paths,
                                                           GLuint pathBase,
                                                           GLenum fillMode,
                                                           GLuint mask,
                                                           GLenum coverMode,
                                                           GLenum transformType,
                                                           const GLfloat *transformValues) const
{
    static const char *fnName = "glStencilThenCoverFillPathInstancedNV";

    beforeCommand(fnName, _api.glStencilThenCoverFillPathInstanced);
    _api.glStencilThenCoverFillPathInstanced(numPaths, pathNameType, paths,
                                             pathBase, fillMode, mask, coverMode,
                                             transformType, transformValues);
    afterCommand(fnName);
}

// Calls glStencilThenCoverFillPathNV().
void NVPathRenderingAPI::stencilThenCoverFillPath(GLuint path, GLenum fillMode,
                                                  GLuint mask, GLenum coverMode) const
{
    static const char *fnName = "glStencilThenCoverFillPathNV";

    beforeCommand(fnName, _api.glStencilThenCoverFillPath);
    _api.glStencilThenCoverFillPath(path, fillMode, mask, coverMode);
    afterCommand(fnName);
}

// Calls glStencilThenCoverStrokePathInstancedNV().
void NVPathRenderingAPI::stencilThenCoverStrokePathInstanced(GLsizei numPaths,
                                                             GLenum pathNameType,
                                                             const void *paths,
                                                             GLuint pathBase,
                                                             GLint reference,
                                                             GLuint mask,
                                                             GLenum coverMode,
                                                             GLenum transformType,
                                                             const GLfloat *transformValues) const
{
    static const char *fnName = "glStencilThenCoverStrokePathInstancedNV";

    beforeCommand(fnName, _api.glStencilThenCoverStrokePathInstanced);
    _api.glStencilThenCoverStrokePathInstanced(numPaths, pathNameType, paths,
                                               pathBase, reference, mask,
                                               coverMode, transformType,
                                               transformValues);
    afterCommand(fnName);
}

// Calls glStencilThenCoverStrokePathNV().
void NVPathRenderingAPI::stencilThenCoverStrokePath(GLuint path, GLint reference,
                                                    GLuint mask,
                                                    GLenum coverMode) const
{
    static const char *fnName = "glStencilThenCoverStrokePathNV";

    beforeCommand(fnName, _api.glStencilThenCoverStrokePath);
    _api.glStencilThenCoverStrokePath(path, reference, mask, coverMode);
    afterCommand(fnName);
}

// Calls glTransformPathNV().
void NVPathRenderingAPI::transformPath(GLuint resultPath, GLuint srcPath,
                                       PathTransformType transformType,
                                       const GLfloat *transformValues) const
{
    static const char *fnName = "glTransformPathNV";

    beforeCommand(fnName, _api.glTransformPath);
    _api.glTransformPath(resultPath, srcPath, toScalar(transformType),
                         transformValues);
    afterCommand(fnName);
}

// Calls glWeightPathsNV().
void NVPathRenderingAPI::weightPaths(GLuint resultPath, GLsizei numPaths,
                                     const GLuint *paths, const GLfloat *weights) const
{
    static const char *fnName = "glWeightPathsNV";

    beforeCommand(fnName, _api.glWeightPaths);
    _api.glWeightPaths(resultPath, numPaths, paths, weights);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVPixelDataRangeAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_pixel_data_range extension.
NVPixelDataRangeAPI::NVPixelDataRangeAPI() :
    BaseExtension("GL_NV_pixel_data_range")
{
}

// Grant read-only access to the underlying function pointers.
const NVPixelDataRange &NVPixelDataRangeAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_pixel_data_range entry points.
void NVPixelDataRangeAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFlushPixelDataRangeNV().
void NVPixelDataRangeAPI::flushPixelDataRange(PixelDataRangeTargetNV target) const
{
    static const char *fnName = "glFlushPixelDataRangeNV";

    beforeCommand(fnName, _api.glFlushPixelDataRange);
    _api.glFlushPixelDataRange(toScalar(target));
    afterCommand(fnName);
}

// Calls glPixelDataRangeNV().
void NVPixelDataRangeAPI::pixelDataRange(PixelDataRangeTargetNV target,
                                         GLsizei length, const void *pointer) const
{
    static const char *fnName = "glPixelDataRangeNV";

    beforeCommand(fnName, _api.glPixelDataRange);
    _api.glPixelDataRange(toScalar(target), length, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVPointSpriteAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_point_sprite extension.
NVPointSpriteAPI::NVPointSpriteAPI() :
    BaseExtension("GL_NV_point_sprite")
{
}

// Grant read-only access to the underlying function pointers.
const NVPointSprite &NVPointSpriteAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_point_sprite entry points.
void NVPointSpriteAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPointParameteriNV().
void NVPointSpriteAPI::pointParameterI(PointParameterNameARB pname, GLint param) const
{
    static const char *fnName = "glPointParameteriNV";

    beforeCommand(fnName, _api.glPointParameteri);
    _api.glPointParameteri(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPointParameterivNV().
void NVPointSpriteAPI::pointParameterIV(PointParameterNameARB pname,
                                        const GLint *params) const
{
    static const char *fnName = "glPointParameterivNV";

    beforeCommand(fnName, _api.glPointParameteriv);
    _api.glPointParameteriv(toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVPresentVideoAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_present_video extension.
NVPresentVideoAPI::NVPresentVideoAPI() :
    BaseExtension("GL_NV_present_video")
{
}

// Grant read-only access to the underlying function pointers.
const NVPresentVideo &NVPresentVideoAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_present_video entry points.
void NVPresentVideoAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetVideoi64vNV().
void NVPresentVideoAPI::getVideoI64V(GLuint video_slot, GLenum pname,
                                     GLint64EXT *params) const
{
    static const char *fnName = "glGetVideoi64vNV";

    beforeCommand(fnName, _api.glGetVideoi64v);
    _api.glGetVideoi64v(video_slot, pname, params);
    afterCommand(fnName);
}

// Calls glGetVideoivNV().
void NVPresentVideoAPI::getVideoIV(GLuint video_slot, GLenum pname,
                                   GLint *params) const
{
    static const char *fnName = "glGetVideoivNV";

    beforeCommand(fnName, _api.glGetVideoiv);
    _api.glGetVideoiv(video_slot, pname, params);
    afterCommand(fnName);
}

// Calls glGetVideoui64vNV().
void NVPresentVideoAPI::getVideoUI64(GLuint video_slot, GLenum pname,
                                     GLuint64EXT *params) const
{
    static const char *fnName = "glGetVideoui64vNV";

    beforeCommand(fnName, _api.glGetVideoui64v);
    _api.glGetVideoui64v(video_slot, pname, params);
    afterCommand(fnName);
}

// Calls glGetVideouivNV().
void NVPresentVideoAPI::getVideoUIV(GLuint video_slot, GLenum pname,
                                    GLuint *params) const
{
    static const char *fnName = "glGetVideouivNV";

    beforeCommand(fnName, _api.glGetVideouiv);
    _api.glGetVideouiv(video_slot, pname, params);
    afterCommand(fnName);
}

// Calls glPresentFrameDualFillNV().
void NVPresentVideoAPI::presentFrameDualFill(GLuint video_slot,
                                             GLuint64EXT minPresentTime,
                                             GLuint beginPresentTimeId,
                                             GLuint presentDurationId,
                                             GLenum type, GLenum target0,
                                             GLuint fill0, GLenum target1,
                                             GLuint fill1, GLenum target2,
                                             GLuint fill2, GLenum target3,
                                             GLuint fill3) const
{
    static const char *fnName = "glPresentFrameDualFillNV";

    beforeCommand(fnName, _api.glPresentFrameDualFill);
    _api.glPresentFrameDualFill(video_slot, minPresentTime, beginPresentTimeId,
                                presentDurationId, type, target0, fill0, target1,
                                fill1, target2, fill2, target3, fill3);
    afterCommand(fnName);
}

// Calls glPresentFrameKeyedNV().
void NVPresentVideoAPI::presentFrameKeyed(GLuint video_slot,
                                          GLuint64EXT minPresentTime,
                                          GLuint beginPresentTimeId,
                                          GLuint presentDurationId, GLenum type,
                                          GLenum target0, GLuint fill0,
                                          GLuint key0, GLenum target1,
                                          GLuint fill1, GLuint key1) const
{
    static const char *fnName = "glPresentFrameKeyedNV";

    beforeCommand(fnName, _api.glPresentFrameKeyed);
    _api.glPresentFrameKeyed(video_slot, minPresentTime, beginPresentTimeId,
                             presentDurationId, type, target0, fill0, key0,
                             target1, fill1, key1);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVPrimitiveRestartAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_primitive_restart extension.
NVPrimitiveRestartAPI::NVPrimitiveRestartAPI() :
    BaseExtension("GL_NV_primitive_restart")
{
}

// Grant read-only access to the underlying function pointers.
const NVPrimitiveRestart &NVPrimitiveRestartAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_primitive_restart entry points.
void NVPrimitiveRestartAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPrimitiveRestartIndexNV().
void NVPrimitiveRestartAPI::primitiveRestartIndex(GLuint index) const
{
    static const char *fnName = "glPrimitiveRestartIndexNV";

    beforeCommand(fnName, _api.glPrimitiveRestartIndex);
    _api.glPrimitiveRestartIndex(index);
    afterCommand(fnName);
}

// Calls glPrimitiveRestartNV().
void NVPrimitiveRestartAPI::primitiveRestart() const
{
    static const char *fnName = "glPrimitiveRestartNV";

    beforeCommand(fnName, _api.glPrimitiveRestart);
    _api.glPrimitiveRestart();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVQueryResourceAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_query_resource extension.
NVQueryResourceAPI::NVQueryResourceAPI() :
    BaseExtension("GL_NV_query_resource")
{
}

// Grant read-only access to the underlying function pointers.
const NVQueryResource &NVQueryResourceAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_query_resource entry points.
void NVQueryResourceAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glQueryResourceNV().
GLint NVQueryResourceAPI::queryResource(GLenum queryType, GLint tagId,
                                        GLuint count, GLint *buffer) const
{
    static const char *fnName = "glQueryResourceNV";

    beforeCommand(fnName, _api.glQueryResource);
    GLint result = _api.glQueryResource(queryType, tagId, count, buffer);
    afterCommand(fnName);

    return result;
}

////////////////////////////////////////////////////////////////////////////////
// NVQueryResourceTagAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_query_resource_tag extension.
NVQueryResourceTagAPI::NVQueryResourceTagAPI() :
    BaseExtension("GL_NV_query_resource_tag")
{
}

// Grant read-only access to the underlying function pointers.
const NVQueryResourceTag &NVQueryResourceTagAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_query_resource_tag entry points.
void NVQueryResourceTagAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDeleteQueryResourceTagNV().
void NVQueryResourceTagAPI::deleteQueryResourceTag(GLsizei n,
                                                   const GLint *tagIds) const
{
    static const char *fnName = "glDeleteQueryResourceTagNV";

    beforeCommand(fnName, _api.glDeleteQueryResourceTag);
    _api.glDeleteQueryResourceTag(n, tagIds);
    afterCommand(fnName);
}

// Calls glGenQueryResourceTagNV().
void NVQueryResourceTagAPI::genQueryResourceTag(GLsizei n, GLint *tagIds) const
{
    static const char *fnName = "glGenQueryResourceTagNV";

    beforeCommand(fnName, _api.glGenQueryResourceTag);
    _api.glGenQueryResourceTag(n, tagIds);
    afterCommand(fnName);
}

// Calls glQueryResourceTagNV().
void NVQueryResourceTagAPI::queryResourceTag(GLint tagId,
                                             const GLchar *tagString) const
{
    static const char *fnName = "glQueryResourceTagNV";

    beforeCommand(fnName, _api.glQueryResourceTag);
    _api.glQueryResourceTag(tagId, tagString);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVRegisterCombinersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_register_combiners extension.
NVRegisterCombinersAPI::NVRegisterCombinersAPI() :
    BaseExtension("GL_NV_register_combiners")
{
}

// Grant read-only access to the underlying function pointers.
const NVRegisterCombiners &NVRegisterCombinersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_register_combiners entry points.
void NVRegisterCombinersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCombinerInputNV().
void NVRegisterCombinersAPI::combinerInput(CombinerStageNV stage,
                                           CombinerPortionNV portion,
                                           CombinerVariableNV variable,
                                           CombinerRegisterNV input,
                                           CombinerMappingNV mapping,
                                           CombinerComponentUsageNV componentUsage) const
{
    static const char *fnName = "glCombinerInputNV";

    beforeCommand(fnName, _api.glCombinerInput);
    _api.glCombinerInput(toScalar(stage), toScalar(portion), toScalar(variable),
                         toScalar(input), toScalar(mapping),
                         toScalar(componentUsage));
    afterCommand(fnName);
}

// Calls glCombinerOutputNV().
void NVRegisterCombinersAPI::combinerOutput(CombinerStageNV stage,
                                            CombinerPortionNV portion,
                                            CombinerRegisterNV abOutput,
                                            CombinerRegisterNV cdOutput,
                                            CombinerRegisterNV sumOutput,
                                            CombinerScaleNV scale,
                                            CombinerBiasNV bias,
                                            Boolean abDotProduct,
                                            Boolean cdDotProduct, Boolean muxSum) const
{
    static const char *fnName = "glCombinerOutputNV";

    beforeCommand(fnName, _api.glCombinerOutput);
    _api.glCombinerOutput(toScalar(stage), toScalar(portion), toScalar(abOutput),
                          toScalar(cdOutput), toScalar(sumOutput),
                          toScalar(scale), toScalar(bias),
                          toScalar(abDotProduct), toScalar(cdDotProduct),
                          toScalar(muxSum));
    afterCommand(fnName);
}

// Calls glCombinerParameterfNV().
void NVRegisterCombinersAPI::combinerParameterF(CombinerParameterNV pname,
                                                GLfloat param) const
{
    static const char *fnName = "glCombinerParameterfNV";

    beforeCommand(fnName, _api.glCombinerParameterf);
    _api.glCombinerParameterf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glCombinerParameterfvNV().
void NVRegisterCombinersAPI::combinerParameterFV(CombinerParameterNV pname,
                                                 const GLfloat *params) const
{
    static const char *fnName = "glCombinerParameterfvNV";

    beforeCommand(fnName, _api.glCombinerParameterfv);
    _api.glCombinerParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glCombinerParameteriNV().
void NVRegisterCombinersAPI::combinerParameterI(CombinerParameterNV pname,
                                                GLint param) const
{
    static const char *fnName = "glCombinerParameteriNV";

    beforeCommand(fnName, _api.glCombinerParameteri);
    _api.glCombinerParameteri(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glCombinerParameterivNV().
void NVRegisterCombinersAPI::combinerParameterIV(CombinerParameterNV pname,
                                                 const GLint *params) const
{
    static const char *fnName = "glCombinerParameterivNV";

    beforeCommand(fnName, _api.glCombinerParameteriv);
    _api.glCombinerParameteriv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glFinalCombinerInputNV().
void NVRegisterCombinersAPI::finalCombinerInput(CombinerVariableNV variable,
                                                CombinerRegisterNV input,
                                                CombinerMappingNV mapping,
                                                CombinerComponentUsageNV componentUsage) const
{
    static const char *fnName = "glFinalCombinerInputNV";

    beforeCommand(fnName, _api.glFinalCombinerInput);
    _api.glFinalCombinerInput(toScalar(variable), toScalar(input),
                              toScalar(mapping), toScalar(componentUsage));
    afterCommand(fnName);
}

// Calls glGetCombinerInputParameterfvNV().
void NVRegisterCombinersAPI::getCombinerInputParameterFV(CombinerStageNV stage,
                                                         CombinerPortionNV portion,
                                                         CombinerVariableNV variable,
                                                         CombinerParameterNV pname,
                                                         GLfloat *params) const
{
    static const char *fnName = "glGetCombinerInputParameterfvNV";

    beforeCommand(fnName, _api.glGetCombinerInputParameterfv);
    _api.glGetCombinerInputParameterfv(toScalar(stage), toScalar(portion),
                                       toScalar(variable), toScalar(pname),
                                       params);
    afterCommand(fnName);
}

// Calls glGetCombinerInputParameterivNV().
void NVRegisterCombinersAPI::getCombinerInputParameterIV(CombinerStageNV stage,
                                                         CombinerPortionNV portion,
                                                         CombinerVariableNV variable,
                                                         CombinerParameterNV pname,
                                                         GLint *params) const
{
    static const char *fnName = "glGetCombinerInputParameterivNV";

    beforeCommand(fnName, _api.glGetCombinerInputParameteriv);
    _api.glGetCombinerInputParameteriv(toScalar(stage), toScalar(portion),
                                       toScalar(variable), toScalar(pname),
                                       params);
    afterCommand(fnName);
}

// Calls glGetCombinerOutputParameterfvNV().
void NVRegisterCombinersAPI::getCombinerOutputParameterFV(CombinerStageNV stage,
                                                          CombinerPortionNV portion,
                                                          CombinerParameterNV pname,
                                                          GLfloat *params) const
{
    static const char *fnName = "glGetCombinerOutputParameterfvNV";

    beforeCommand(fnName, _api.glGetCombinerOutputParameterfv);
    _api.glGetCombinerOutputParameterfv(toScalar(stage), toScalar(portion),
                                        toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetCombinerOutputParameterivNV().
void NVRegisterCombinersAPI::getCombinerOutputParameterIV(CombinerStageNV stage,
                                                          CombinerPortionNV portion,
                                                          CombinerParameterNV pname,
                                                          GLint *params) const
{
    static const char *fnName = "glGetCombinerOutputParameterivNV";

    beforeCommand(fnName, _api.glGetCombinerOutputParameteriv);
    _api.glGetCombinerOutputParameteriv(toScalar(stage), toScalar(portion),
                                        toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetFinalCombinerInputParameterfvNV().
void NVRegisterCombinersAPI::getFinalCombinerInputParameterFV(CombinerVariableNV variable,
                                                              CombinerParameterNV pname,
                                                              GLfloat *params) const
{
    static const char *fnName = "glGetFinalCombinerInputParameterfvNV";

    beforeCommand(fnName, _api.glGetFinalCombinerInputParameterfv);
    _api.glGetFinalCombinerInputParameterfv(toScalar(variable), toScalar(pname),
                                            params);
    afterCommand(fnName);
}

// Calls glGetFinalCombinerInputParameterivNV().
void NVRegisterCombinersAPI::getFinalCombinerInputParameterIV(CombinerVariableNV variable,
                                                              CombinerParameterNV pname,
                                                              GLint *params) const
{
    static const char *fnName = "glGetFinalCombinerInputParameterivNV";

    beforeCommand(fnName, _api.glGetFinalCombinerInputParameteriv);
    _api.glGetFinalCombinerInputParameteriv(toScalar(variable), toScalar(pname),
                                            params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVRegisterCOMBINERS2API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_register_combiners2 extension.
NVRegisterCOMBINERS2API::NVRegisterCOMBINERS2API() :
    BaseExtension("GL_NV_register_combiners2")
{
}

// Grant read-only access to the underlying function pointers.
const NVRegisterCOMBINERS2 &NVRegisterCOMBINERS2API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_register_combiners2 entry points.
void NVRegisterCOMBINERS2API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCombinerStageParameterfvNV().
void NVRegisterCOMBINERS2API::combinerStageParameterFV(CombinerStageNV stage,
                                                       CombinerParameterNV pname,
                                                       const GLfloat *params) const
{
    static const char *fnName = "glCombinerStageParameterfvNV";

    beforeCommand(fnName, _api.glCombinerStageParameterfv);
    _api.glCombinerStageParameterfv(toScalar(stage), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetCombinerStageParameterfvNV().
void NVRegisterCOMBINERS2API::getCombinerStageParameterFV(CombinerStageNV stage,
                                                          CombinerParameterNV pname,
                                                          GLfloat *params) const
{
    static const char *fnName = "glGetCombinerStageParameterfvNV";

    beforeCommand(fnName, _api.glGetCombinerStageParameterfv);
    _api.glGetCombinerStageParameterfv(toScalar(stage), toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVSampleLocationsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_sample_locations extension.
NVSampleLocationsAPI::NVSampleLocationsAPI() :
    BaseExtension("GL_NV_sample_locations")
{
}

// Grant read-only access to the underlying function pointers.
const NVSampleLocations &NVSampleLocationsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_sample_locations entry points.
void NVSampleLocationsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFramebufferSampleLocationsfvNV().
void NVSampleLocationsAPI::framebufferSampleLocationsFV(FramebufferTarget target,
                                                        GLuint start,
                                                        GLsizei count,
                                                        const GLfloat *v) const
{
    static const char *fnName = "glFramebufferSampleLocationsfvNV";

    beforeCommand(fnName, _api.glFramebufferSampleLocationsfv);
    _api.glFramebufferSampleLocationsfv(toScalar(target), start, count, v);
    afterCommand(fnName);
}

// Calls glNamedFramebufferSampleLocationsfvNV().
void NVSampleLocationsAPI::namedFramebufferSampleLocationsFV(FrameBufferName framebuffer,
                                                             GLuint start,
                                                             GLsizei count,
                                                             const GLfloat *v) const
{
    static const char *fnName = "glNamedFramebufferSampleLocationsfvNV";

    beforeCommand(fnName, _api.glNamedFramebufferSampleLocationsfv);
    _api.glNamedFramebufferSampleLocationsfv(framebuffer.ID, start, count, v);
    afterCommand(fnName);
}

// Calls glResolveDepthValuesNV().
void NVSampleLocationsAPI::resolveDepthValues() const
{
    static const char *fnName = "glResolveDepthValuesNV";

    beforeCommand(fnName, _api.glResolveDepthValues);
    _api.glResolveDepthValues();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVScissorExclusiveAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_scissor_exclusive extension.
NVScissorExclusiveAPI::NVScissorExclusiveAPI() :
    BaseExtension("GL_NV_scissor_exclusive")
{
}

// Grant read-only access to the underlying function pointers.
const NVScissorExclusive &NVScissorExclusiveAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_scissor_exclusive entry points.
void NVScissorExclusiveAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glScissorExclusiveArrayvNV().
void NVScissorExclusiveAPI::scissorExclusiveArrayV(GLuint first, GLsizei count,
                                                   const GLint *v) const
{
    static const char *fnName = "glScissorExclusiveArrayvNV";

    beforeCommand(fnName, _api.glScissorExclusiveArrayv);
    _api.glScissorExclusiveArrayv(first, count, v);
    afterCommand(fnName);
}

// Calls glScissorExclusiveNV().
void NVScissorExclusiveAPI::scissorExclusive(GLint x, GLint y, GLsizei width,
                                             GLsizei height) const
{
    static const char *fnName = "glScissorExclusiveNV";

    beforeCommand(fnName, _api.glScissorExclusive);
    _api.glScissorExclusive(x, y, width, height);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVShaderBufferLoadAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_shader_buffer_load extension.
NVShaderBufferLoadAPI::NVShaderBufferLoadAPI() :
    BaseExtension("GL_NV_shader_buffer_load")
{
}

// Grant read-only access to the underlying function pointers.
const NVShaderBufferLoad &NVShaderBufferLoadAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_shader_buffer_load entry points.
void NVShaderBufferLoadAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetBufferParameterui64vNV().
void NVShaderBufferLoadAPI::getBufferParameterUI64(BufferTarget target,
                                                   GLenum pname,
                                                   GLuint64EXT *params) const
{
    static const char *fnName = "glGetBufferParameterui64vNV";

    beforeCommand(fnName, _api.glGetBufferParameterui64v);
    _api.glGetBufferParameterui64v(toScalar(target), pname, params);
    afterCommand(fnName);
}

// Calls glGetIntegerui64vNV().
void NVShaderBufferLoadAPI::getIntegerUI64(GLenum value, GLuint64EXT *result) const
{
    static const char *fnName = "glGetIntegerui64vNV";

    beforeCommand(fnName, _api.glGetIntegerui64v);
    _api.glGetIntegerui64v(value, result);
    afterCommand(fnName);
}

// Calls glGetNamedBufferParameterui64vNV().
void NVShaderBufferLoadAPI::getNamedBufferParameterUI64(BufferName buffer,
                                                        BufferPNameARB pname,
                                                        GLuint64EXT *params) const
{
    static const char *fnName = "glGetNamedBufferParameterui64vNV";

    beforeCommand(fnName, _api.glGetNamedBufferParameterui64v);
    _api.glGetNamedBufferParameterui64v(buffer.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsBufferResidentNV().
Boolean NVShaderBufferLoadAPI::isBufferResident(GLenum target) const
{
    static const char *fnName = "glIsBufferResidentNV";

    beforeCommand(fnName, _api.glIsBufferResident);
    GLboolean result = _api.glIsBufferResident(target);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glIsNamedBufferResidentNV().
Boolean NVShaderBufferLoadAPI::isNamedBufferResident(BufferName buffer) const
{
    static const char *fnName = "glIsNamedBufferResidentNV";

    beforeCommand(fnName, _api.glIsNamedBufferResident);
    GLboolean result = _api.glIsNamedBufferResident(buffer.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glMakeBufferNonResidentNV().
void NVShaderBufferLoadAPI::makeBufferNonResident(GLenum target) const
{
    static const char *fnName = "glMakeBufferNonResidentNV";

    beforeCommand(fnName, _api.glMakeBufferNonResident);
    _api.glMakeBufferNonResident(target);
    afterCommand(fnName);
}

// Calls glMakeBufferResidentNV().
void NVShaderBufferLoadAPI::makeBufferResident(GLenum target, GLenum access) const
{
    static const char *fnName = "glMakeBufferResidentNV";

    beforeCommand(fnName, _api.glMakeBufferResident);
    _api.glMakeBufferResident(target, access);
    afterCommand(fnName);
}

// Calls glMakeNamedBufferNonResidentNV().
void NVShaderBufferLoadAPI::makeNamedBufferNonResident(BufferName buffer) const
{
    static const char *fnName = "glMakeNamedBufferNonResidentNV";

    beforeCommand(fnName, _api.glMakeNamedBufferNonResident);
    _api.glMakeNamedBufferNonResident(buffer.ID);
    afterCommand(fnName);
}

// Calls glMakeNamedBufferResidentNV().
void NVShaderBufferLoadAPI::makeNamedBufferResident(BufferName buffer,
                                                    GLenum access) const
{
    static const char *fnName = "glMakeNamedBufferResidentNV";

    beforeCommand(fnName, _api.glMakeNamedBufferResident);
    _api.glMakeNamedBufferResident(buffer.ID, access);
    afterCommand(fnName);
}

// Calls glProgramUniformui64NV().
void NVShaderBufferLoadAPI::programUniformUI64(ProgramName program,
                                               GLint location, GLuint64EXT value) const
{
    static const char *fnName = "glProgramUniformui64NV";

    beforeCommand(fnName, _api.glProgramUniformui64);
    _api.glProgramUniformui64(program.ID, location, value);
    afterCommand(fnName);
}

// Calls glProgramUniformui64vNV().
void NVShaderBufferLoadAPI::programUniformUI64(ProgramName program,
                                               GLint location, GLsizei count,
                                               const GLuint64EXT *value) const
{
    static const char *fnName = "glProgramUniformui64vNV";

    beforeCommand(fnName, _api.glProgramUniformui64v);
    _api.glProgramUniformui64v(program.ID, location, count, value);
    afterCommand(fnName);
}

// Calls glUniformui64NV().
void NVShaderBufferLoadAPI::uniformUI64(GLint location, GLuint64EXT value) const
{
    static const char *fnName = "glUniformui64NV";

    beforeCommand(fnName, _api.glUniformui64);
    _api.glUniformui64(location, value);
    afterCommand(fnName);
}

// Calls glUniformui64vNV().
void NVShaderBufferLoadAPI::uniformUI64(GLint location, GLsizei count,
                                        const GLuint64EXT *value) const
{
    static const char *fnName = "glUniformui64vNV";

    beforeCommand(fnName, _api.glUniformui64v);
    _api.glUniformui64v(location, count, value);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVShadingRateImageAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_shading_rate_image extension.
NVShadingRateImageAPI::NVShadingRateImageAPI() :
    BaseExtension("GL_NV_shading_rate_image")
{
}

// Grant read-only access to the underlying function pointers.
const NVShadingRateImage &NVShadingRateImageAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_shading_rate_image entry points.
void NVShadingRateImageAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindShadingRateImageNV().
void NVShadingRateImageAPI::bindShadingRateImage(TextureName texture) const
{
    static const char *fnName = "glBindShadingRateImageNV";

    beforeCommand(fnName, _api.glBindShadingRateImage);
    _api.glBindShadingRateImage(texture.ID);
    afterCommand(fnName);
}

// Calls glGetShadingRateImagePaletteNV().
void NVShadingRateImageAPI::getShadingRateImagePalette(GLuint viewport,
                                                       GLuint entry,
                                                       GLenum *rate) const
{
    static const char *fnName = "glGetShadingRateImagePaletteNV";

    beforeCommand(fnName, _api.glGetShadingRateImagePalette);
    _api.glGetShadingRateImagePalette(viewport, entry, rate);
    afterCommand(fnName);
}

// Calls glGetShadingRateSampleLocationivNV().
void NVShadingRateImageAPI::getShadingRateSampleLocationIV(GLenum rate,
                                                           GLuint samples,
                                                           GLuint index,
                                                           GLint *location) const
{
    static const char *fnName = "glGetShadingRateSampleLocationivNV";

    beforeCommand(fnName, _api.glGetShadingRateSampleLocationiv);
    _api.glGetShadingRateSampleLocationiv(rate, samples, index, location);
    afterCommand(fnName);
}

// Calls glShadingRateImageBarrierNV().
void NVShadingRateImageAPI::shadingRateImageBarrier(Boolean synchronize) const
{
    static const char *fnName = "glShadingRateImageBarrierNV";

    beforeCommand(fnName, _api.glShadingRateImageBarrier);
    _api.glShadingRateImageBarrier(toScalar(synchronize));
    afterCommand(fnName);
}

// Calls glShadingRateImagePaletteNV().
void NVShadingRateImageAPI::shadingRateImagePalette(GLuint viewport,
                                                    GLuint first, GLsizei count,
                                                    const GLenum *rates) const
{
    static const char *fnName = "glShadingRateImagePaletteNV";

    beforeCommand(fnName, _api.glShadingRateImagePalette);
    _api.glShadingRateImagePalette(viewport, first, count, rates);
    afterCommand(fnName);
}

// Calls glShadingRateSampleOrderCustomNV().
void NVShadingRateImageAPI::shadingRateSampleOrderCustom(GLenum rate,
                                                         GLuint samples,
                                                         const GLint *locations) const
{
    static const char *fnName = "glShadingRateSampleOrderCustomNV";

    beforeCommand(fnName, _api.glShadingRateSampleOrderCustom);
    _api.glShadingRateSampleOrderCustom(rate, samples, locations);
    afterCommand(fnName);
}

// Calls glShadingRateSampleOrderNV().
void NVShadingRateImageAPI::shadingRateSampleOrder(GLenum order) const
{
    static const char *fnName = "glShadingRateSampleOrderNV";

    beforeCommand(fnName, _api.glShadingRateSampleOrder);
    _api.glShadingRateSampleOrder(order);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVTextureBarrierAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_texture_barrier extension.
NVTextureBarrierAPI::NVTextureBarrierAPI() :
    BaseExtension("GL_NV_texture_barrier")
{
}

// Grant read-only access to the underlying function pointers.
const NVTextureBarrier &NVTextureBarrierAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_texture_barrier entry points.
void NVTextureBarrierAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTextureBarrierNV().
void NVTextureBarrierAPI::textureBarrier() const
{
    static const char *fnName = "glTextureBarrierNV";

    beforeCommand(fnName, _api.glTextureBarrier);
    _api.glTextureBarrier();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVTextureMultisampleAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_texture_multisample extension.
NVTextureMultisampleAPI::NVTextureMultisampleAPI() :
    BaseExtension("GL_NV_texture_multisample")
{
}

// Grant read-only access to the underlying function pointers.
const NVTextureMultisample &NVTextureMultisampleAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_texture_multisample entry points.
void NVTextureMultisampleAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexImage2DMultisampleCoverageNV().
void NVTextureMultisampleAPI::texImage2DMultisampleCoverage(TextureTarget target,
                                                            GLsizei coverageSamples,
                                                            GLsizei colorSamples,
                                                            InternalFormat internalFormat,
                                                            GLsizei width,
                                                            GLsizei height,
                                                            Boolean fixedSampleLocations) const
{
    static const char *fnName = "glTexImage2DMultisampleCoverageNV";

    beforeCommand(fnName, _api.glTexImage2DMultisampleCoverage);
    _api.glTexImage2DMultisampleCoverage(toScalar(target), coverageSamples,
                                         colorSamples, toScalar(internalFormat),
                                         width, height,
                                         toScalar(fixedSampleLocations));
    afterCommand(fnName);
}

// Calls glTexImage3DMultisampleCoverageNV().
void NVTextureMultisampleAPI::texImage3DMultisampleCoverage(TextureTarget target,
                                                            GLsizei coverageSamples,
                                                            GLsizei colorSamples,
                                                            InternalFormat internalFormat,
                                                            GLsizei width,
                                                            GLsizei height,
                                                            GLsizei depth,
                                                            Boolean fixedSampleLocations) const
{
    static const char *fnName = "glTexImage3DMultisampleCoverageNV";

    beforeCommand(fnName, _api.glTexImage3DMultisampleCoverage);
    _api.glTexImage3DMultisampleCoverage(toScalar(target), coverageSamples,
                                         colorSamples, toScalar(internalFormat),
                                         width, height, depth,
                                         toScalar(fixedSampleLocations));
    afterCommand(fnName);
}

// Calls glTextureImage2DMultisampleCoverageNV().
void NVTextureMultisampleAPI::textureImage2DMultisampleCoverage(TextureName texture,
                                                                TextureTarget target,
                                                                GLsizei coverageSamples,
                                                                GLsizei colorSamples,
                                                                InternalFormat internalFormat,
                                                                GLsizei width,
                                                                GLsizei height,
                                                                Boolean fixedSampleLocations) const
{
    static const char *fnName = "glTextureImage2DMultisampleCoverageNV";

    beforeCommand(fnName, _api.glTextureImage2DMultisampleCoverage);
    _api.glTextureImage2DMultisampleCoverage(texture.ID, toScalar(target),
                                             coverageSamples, colorSamples,
                                             toScalar(internalFormat), width,
                                             height,
                                             toScalar(fixedSampleLocations));
    afterCommand(fnName);
}

// Calls glTextureImage2DMultisampleNV().
void NVTextureMultisampleAPI::textureImage2DMultisample(TextureName texture,
                                                        TextureTarget target,
                                                        GLsizei samples,
                                                        InternalFormat internalFormat,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        Boolean fixedSampleLocations) const
{
    static const char *fnName = "glTextureImage2DMultisampleNV";

    beforeCommand(fnName, _api.glTextureImage2DMultisample);
    _api.glTextureImage2DMultisample(texture.ID, toScalar(target), samples,
                                     toScalar(internalFormat), width, height,
                                     toScalar(fixedSampleLocations));
    afterCommand(fnName);
}

// Calls glTextureImage3DMultisampleCoverageNV().
void NVTextureMultisampleAPI::textureImage3DMultisampleCoverage(TextureName texture,
                                                                TextureTarget target,
                                                                GLsizei coverageSamples,
                                                                GLsizei colorSamples,
                                                                InternalFormat internalFormat,
                                                                GLsizei width,
                                                                GLsizei height,
                                                                GLsizei depth,
                                                                Boolean fixedSampleLocations) const
{
    static const char *fnName = "glTextureImage3DMultisampleCoverageNV";

    beforeCommand(fnName, _api.glTextureImage3DMultisampleCoverage);
    _api.glTextureImage3DMultisampleCoverage(texture.ID, toScalar(target),
                                             coverageSamples, colorSamples,
                                             toScalar(internalFormat), width,
                                             height, depth,
                                             toScalar(fixedSampleLocations));
    afterCommand(fnName);
}

// Calls glTextureImage3DMultisampleNV().
void NVTextureMultisampleAPI::textureImage3DMultisample(TextureName texture,
                                                        TextureTarget target,
                                                        GLsizei samples,
                                                        InternalFormat internalFormat,
                                                        GLsizei width,
                                                        GLsizei height,
                                                        GLsizei depth,
                                                        Boolean fixedSampleLocations) const
{
    static const char *fnName = "glTextureImage3DMultisampleNV";

    beforeCommand(fnName, _api.glTextureImage3DMultisample);
    _api.glTextureImage3DMultisample(texture.ID, toScalar(target), samples,
                                     toScalar(internalFormat), width, height,
                                     depth, toScalar(fixedSampleLocations));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVTimelineSemaphoreAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_timeline_semaphore extension.
NVTimelineSemaphoreAPI::NVTimelineSemaphoreAPI() :
    BaseExtension("GL_NV_timeline_semaphore")
{
}

// Grant read-only access to the underlying function pointers.
const NVTimelineSemaphore &NVTimelineSemaphoreAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_timeline_semaphore entry points.
void NVTimelineSemaphoreAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glCreateSemaphoresNV().
void NVTimelineSemaphoreAPI::createSemaphores(GLsizei n, GLuint *semaphores) const
{
    static const char *fnName = "glCreateSemaphoresNV";

    beforeCommand(fnName, _api.glCreateSemaphores);
    _api.glCreateSemaphores(n, semaphores);
    afterCommand(fnName);
}

// Calls glGetSemaphoreParameterivNV().
void NVTimelineSemaphoreAPI::getSemaphoreParameterIV(GLuint semaphore,
                                                     SemaphoreParameterName pname,
                                                     GLint *params) const
{
    static const char *fnName = "glGetSemaphoreParameterivNV";

    beforeCommand(fnName, _api.glGetSemaphoreParameteriv);
    _api.glGetSemaphoreParameteriv(semaphore, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glSemaphoreParameterivNV().
void NVTimelineSemaphoreAPI::semaphoreParameterIV(GLuint semaphore,
                                                  SemaphoreParameterName pname,
                                                  const GLint *params) const
{
    static const char *fnName = "glSemaphoreParameterivNV";

    beforeCommand(fnName, _api.glSemaphoreParameteriv);
    _api.glSemaphoreParameteriv(semaphore, toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVTransformFeedbackAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_transform_feedback extension.
NVTransformFeedbackAPI::NVTransformFeedbackAPI() :
    BaseExtension("GL_NV_transform_feedback")
{
}

// Grant read-only access to the underlying function pointers.
const NVTransformFeedback &NVTransformFeedbackAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_transform_feedback entry points.
void NVTransformFeedbackAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glActiveVaryingNV().
void NVTransformFeedbackAPI::activeVarying(ProgramName program,
                                           const GLchar *name) const
{
    static const char *fnName = "glActiveVaryingNV";

    beforeCommand(fnName, _api.glActiveVarying);
    _api.glActiveVarying(program.ID, name);
    afterCommand(fnName);
}

// Calls glBeginTransformFeedbackNV().
void NVTransformFeedbackAPI::beginTransformFeedback(PrimitiveType primitiveMode) const
{
    static const char *fnName = "glBeginTransformFeedbackNV";

    beforeCommand(fnName, _api.glBeginTransformFeedback);
    _api.glBeginTransformFeedback(toScalar(primitiveMode));
    afterCommand(fnName);
}

// Calls glBindBufferBaseNV().
void NVTransformFeedbackAPI::bindBufferBase(BufferTarget target, GLuint index,
                                            BufferName buffer) const
{
    static const char *fnName = "glBindBufferBaseNV";

    beforeCommand(fnName, _api.glBindBufferBase);
    _api.glBindBufferBase(toScalar(target), index, buffer.ID);
    afterCommand(fnName);
}

// Calls glBindBufferOffsetNV().
void NVTransformFeedbackAPI::bindBufferOffset(BufferTarget target,
                                              GLuint index, BufferName buffer,
                                              GLintptr offset) const
{
    static const char *fnName = "glBindBufferOffsetNV";

    beforeCommand(fnName, _api.glBindBufferOffset);
    _api.glBindBufferOffset(toScalar(target), index, buffer.ID, offset);
    afterCommand(fnName);
}

// Calls glBindBufferRangeNV().
void NVTransformFeedbackAPI::bindBufferRange(BufferTarget target,
                                             GLuint index, BufferName buffer,
                                             GLintptr offset, GLsizeiptr size) const
{
    static const char *fnName = "glBindBufferRangeNV";

    beforeCommand(fnName, _api.glBindBufferRange);
    _api.glBindBufferRange(toScalar(target), index, buffer.ID, offset, size);
    afterCommand(fnName);
}

// Calls glEndTransformFeedbackNV().
void NVTransformFeedbackAPI::endTransformFeedback() const
{
    static const char *fnName = "glEndTransformFeedbackNV";

    beforeCommand(fnName, _api.glEndTransformFeedback);
    _api.glEndTransformFeedback();
    afterCommand(fnName);
}

// Calls glGetActiveVaryingNV().
void NVTransformFeedbackAPI::getActiveVarying(ProgramName program, GLuint index,
                                              GLsizei bufSize, GLsizei *length,
                                              GLsizei *size, GLenum *type,
                                              GLchar *name) const
{
    static const char *fnName = "glGetActiveVaryingNV";

    beforeCommand(fnName, _api.glGetActiveVarying);
    _api.glGetActiveVarying(program.ID, index, bufSize, length, size, type, name);
    afterCommand(fnName);
}

// Calls glGetTransformFeedbackVaryingNV().
void NVTransformFeedbackAPI::getTransformFeedbackVarying(ProgramName program,
                                                         GLuint index,
                                                         GLint *location) const
{
    static const char *fnName = "glGetTransformFeedbackVaryingNV";

    beforeCommand(fnName, _api.glGetTransformFeedbackVarying);
    _api.glGetTransformFeedbackVarying(program.ID, index, location);
    afterCommand(fnName);
}

// Calls glGetVaryingLocationNV().
GLint NVTransformFeedbackAPI::getVaryingLocation(ProgramName program,
                                                 const GLchar *name) const
{
    static const char *fnName = "glGetVaryingLocationNV";

    beforeCommand(fnName, _api.glGetVaryingLocation);
    GLint result = _api.glGetVaryingLocation(program.ID, name);
    afterCommand(fnName);

    return result;
}

// Calls glTransformFeedbackAttribsNV().
void NVTransformFeedbackAPI::transformFeedbackAttribs(GLsizei count,
                                                      const GLint *attribs,
                                                      GLenum bufferMode) const
{
    static const char *fnName = "glTransformFeedbackAttribsNV";

    beforeCommand(fnName, _api.glTransformFeedbackAttribs);
    _api.glTransformFeedbackAttribs(count, attribs, bufferMode);
    afterCommand(fnName);
}

// Calls glTransformFeedbackStreamAttribsNV().
void NVTransformFeedbackAPI::transformFeedbackStreamAttribs(GLsizei count,
                                                            const GLint *attribs,
                                                            GLsizei nbuffers,
                                                            const GLint *bufstreams,
                                                            GLenum bufferMode) const
{
    static const char *fnName = "glTransformFeedbackStreamAttribsNV";

    beforeCommand(fnName, _api.glTransformFeedbackStreamAttribs);
    _api.glTransformFeedbackStreamAttribs(count, attribs, nbuffers, bufstreams,
                                          bufferMode);
    afterCommand(fnName);
}

// Calls glTransformFeedbackVaryingsNV().
void NVTransformFeedbackAPI::transformFeedbackVaryings(ProgramName program,
                                                       GLsizei count,
                                                       const GLint *locations,
                                                       GLenum bufferMode) const
{
    static const char *fnName = "glTransformFeedbackVaryingsNV";

    beforeCommand(fnName, _api.glTransformFeedbackVaryings);
    _api.glTransformFeedbackVaryings(program.ID, count, locations, bufferMode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVTransformFeedback2API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_transform_feedback2 extension.
NVTransformFeedback2API::NVTransformFeedback2API() :
    BaseExtension("GL_NV_transform_feedback2")
{
}

// Grant read-only access to the underlying function pointers.
const NVTransformFeedback2 &NVTransformFeedback2API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_transform_feedback2 entry points.
void NVTransformFeedback2API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBindTransformFeedbackNV().
void NVTransformFeedback2API::bindTransformFeedback(BufferTarget target,
                                                    TransformFeedbackName id) const
{
    static const char *fnName = "glBindTransformFeedbackNV";

    beforeCommand(fnName, _api.glBindTransformFeedback);
    _api.glBindTransformFeedback(toScalar(target), id.ID);
    afterCommand(fnName);
}

// Calls glDeleteTransformFeedbacksNV().
void NVTransformFeedback2API::deleteTransformFeedbacks(GLsizei n,
                                                       const TransformFeedbackName *ids) const
{
    static const char *fnName = "glDeleteTransformFeedbacksNV";

    beforeCommand(fnName, _api.glDeleteTransformFeedbacks);
    _api.glDeleteTransformFeedbacks(n, reinterpret_cast<const GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glDrawTransformFeedbackNV().
void NVTransformFeedback2API::drawTransformFeedback(PrimitiveType mode,
                                                    TransformFeedbackName id) const
{
    static const char *fnName = "glDrawTransformFeedbackNV";

    beforeCommand(fnName, _api.glDrawTransformFeedback);
    _api.glDrawTransformFeedback(toScalar(mode), id.ID);
    afterCommand(fnName);
}

// Calls glGenTransformFeedbacksNV().
void NVTransformFeedback2API::genTransformFeedbacks(GLsizei n,
                                                    TransformFeedbackName *ids) const
{
    static const char *fnName = "glGenTransformFeedbacksNV";

    beforeCommand(fnName, _api.glGenTransformFeedbacks);
    _api.glGenTransformFeedbacks(n, reinterpret_cast<GLuint *>(ids));
    afterCommand(fnName);
}

// Calls glIsTransformFeedbackNV().
Boolean NVTransformFeedback2API::isTransformFeedback(TransformFeedbackName id) const
{
    static const char *fnName = "glIsTransformFeedbackNV";

    beforeCommand(fnName, _api.glIsTransformFeedback);
    GLboolean result = _api.glIsTransformFeedback(id.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glPauseTransformFeedbackNV().
void NVTransformFeedback2API::pauseTransformFeedback() const
{
    static const char *fnName = "glPauseTransformFeedbackNV";

    beforeCommand(fnName, _api.glPauseTransformFeedback);
    _api.glPauseTransformFeedback();
    afterCommand(fnName);
}

// Calls glResumeTransformFeedbackNV().
void NVTransformFeedback2API::resumeTransformFeedback() const
{
    static const char *fnName = "glResumeTransformFeedbackNV";

    beforeCommand(fnName, _api.glResumeTransformFeedback);
    _api.glResumeTransformFeedback();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVVdpauInteropAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_vdpau_interop extension.
NVVdpauInteropAPI::NVVdpauInteropAPI() :
    BaseExtension("GL_NV_vdpau_interop")
{
}

// Grant read-only access to the underlying function pointers.
const NVVdpauInterop &NVVdpauInteropAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_vdpau_interop entry points.
void NVVdpauInteropAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glVDPAUFiniNV().
void NVVdpauInteropAPI::vdpauFini() const
{
    static const char *fnName = "glVDPAUFiniNV";

    beforeCommand(fnName, _api.glVDPAUFini);
    _api.glVDPAUFini();
    afterCommand(fnName);
}

// Calls glVDPAUGetSurfaceivNV().
void NVVdpauInteropAPI::vdpauGetSurfaceIV(GLvdpauSurfaceNV surface, GLenum pname,
                                          GLsizei count, GLsizei *length,
                                          GLint *values) const
{
    static const char *fnName = "glVDPAUGetSurfaceivNV";

    beforeCommand(fnName, _api.glVDPAUGetSurfaceiv);
    _api.glVDPAUGetSurfaceiv(surface, pname, count, length, values);
    afterCommand(fnName);
}

// Calls glVDPAUInitNV().
void NVVdpauInteropAPI::vdpauInit(const void *vdpDevice,
                                  const void *getProcAddress) const
{
    static const char *fnName = "glVDPAUInitNV";

    beforeCommand(fnName, _api.glVDPAUInit);
    _api.glVDPAUInit(vdpDevice, getProcAddress);
    afterCommand(fnName);
}

// Calls glVDPAUIsSurfaceNV().
Boolean NVVdpauInteropAPI::vdpauIsSurface(GLvdpauSurfaceNV surface) const
{
    static const char *fnName = "glVDPAUIsSurfaceNV";

    beforeCommand(fnName, _api.glVDPAUIsSurface);
    GLboolean result = _api.glVDPAUIsSurface(surface);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glVDPAUMapSurfacesNV().
void NVVdpauInteropAPI::vdpauMapSurfaces(GLsizei numSurfaces,
                                         const GLvdpauSurfaceNV *surfaces) const
{
    static const char *fnName = "glVDPAUMapSurfacesNV";

    beforeCommand(fnName, _api.glVDPAUMapSurfaces);
    _api.glVDPAUMapSurfaces(numSurfaces, surfaces);
    afterCommand(fnName);
}

// Calls glVDPAURegisterOutputSurfaceNV().
GLvdpauSurfaceNV NVVdpauInteropAPI::vdpauRegisterOutputSurface(const void *vdpSurface,
                                                               GLenum target,
                                                               GLsizei numTextureNames,
                                                               const GLuint *textureNames) const
{
    static const char *fnName = "glVDPAURegisterOutputSurfaceNV";

    beforeCommand(fnName, _api.glVDPAURegisterOutputSurface);
    GLvdpauSurfaceNV result = _api.glVDPAURegisterOutputSurface(vdpSurface,
                                                                target,
                                                                numTextureNames,
                                                                textureNames);
    afterCommand(fnName);

    return result;
}

// Calls glVDPAURegisterVideoSurfaceNV().
GLvdpauSurfaceNV NVVdpauInteropAPI::vdpauRegisterVideoSurface(const void *vdpSurface,
                                                              GLenum target,
                                                              GLsizei numTextureNames,
                                                              const GLuint *textureNames) const
{
    static const char *fnName = "glVDPAURegisterVideoSurfaceNV";

    beforeCommand(fnName, _api.glVDPAURegisterVideoSurface);
    GLvdpauSurfaceNV result = _api.glVDPAURegisterVideoSurface(vdpSurface,
                                                               target,
                                                               numTextureNames,
                                                               textureNames);
    afterCommand(fnName);

    return result;
}

// Calls glVDPAUSurfaceAccessNV().
void NVVdpauInteropAPI::vdpauSurfaceAccess(GLvdpauSurfaceNV surface,
                                           GLenum access) const
{
    static const char *fnName = "glVDPAUSurfaceAccessNV";

    beforeCommand(fnName, _api.glVDPAUSurfaceAccess);
    _api.glVDPAUSurfaceAccess(surface, access);
    afterCommand(fnName);
}

// Calls glVDPAUUnmapSurfacesNV().
void NVVdpauInteropAPI::vdpauUnmapSurfaces(GLsizei numSurface,
                                           const GLvdpauSurfaceNV *surfaces) const
{
    static const char *fnName = "glVDPAUUnmapSurfacesNV";

    beforeCommand(fnName, _api.glVDPAUUnmapSurfaces);
    _api.glVDPAUUnmapSurfaces(numSurface, surfaces);
    afterCommand(fnName);
}

// Calls glVDPAUUnregisterSurfaceNV().
void NVVdpauInteropAPI::vdpauUnregisterSurface(GLvdpauSurfaceNV surface) const
{
    static const char *fnName = "glVDPAUUnregisterSurfaceNV";

    beforeCommand(fnName, _api.glVDPAUUnregisterSurface);
    _api.glVDPAUUnregisterSurface(surface);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVVdpauINTEROP2API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_vdpau_interop2 extension.
NVVdpauINTEROP2API::NVVdpauINTEROP2API() :
    BaseExtension("GL_NV_vdpau_interop2")
{
}

// Grant read-only access to the underlying function pointers.
const NVVdpauINTEROP2 &NVVdpauINTEROP2API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_vdpau_interop2 entry points.
void NVVdpauINTEROP2API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glVDPAURegisterVideoSurfaceWithPictureStructureNV().
GLvdpauSurfaceNV NVVdpauINTEROP2API::vdpauRegisterVideoSurfaceWithPictureStructure(const void *vdpSurface,
                                                                                   GLenum target,
                                                                                   GLsizei numTextureNames,
                                                                                   const GLuint *textureNames,
                                                                                   Boolean isFrameStructure) const
{
    static const char *fnName = "glVDPAURegisterVideoSurfaceWithPictureStructureNV";

    beforeCommand(fnName, _api.glVDPAURegisterVideoSurfaceWithPictureStructure);
    GLvdpauSurfaceNV result = _api.glVDPAURegisterVideoSurfaceWithPictureStructure(vdpSurface,
                                                                                   target,
                                                                                   numTextureNames,
                                                                                   textureNames,
                                                                                   toScalar(isFrameStructure));
    afterCommand(fnName);

    return result;
}

////////////////////////////////////////////////////////////////////////////////
// NVVertexArrayRangeAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_vertex_array_range extension.
NVVertexArrayRangeAPI::NVVertexArrayRangeAPI() :
    BaseExtension("GL_NV_vertex_array_range")
{
}

// Grant read-only access to the underlying function pointers.
const NVVertexArrayRange &NVVertexArrayRangeAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_vertex_array_range entry points.
void NVVertexArrayRangeAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFlushVertexArrayRangeNV().
void NVVertexArrayRangeAPI::flushVertexArrayRange() const
{
    static const char *fnName = "glFlushVertexArrayRangeNV";

    beforeCommand(fnName, _api.glFlushVertexArrayRange);
    _api.glFlushVertexArrayRange();
    afterCommand(fnName);
}

// Calls glVertexArrayRangeNV().
void NVVertexArrayRangeAPI::vertexArrayRange(GLsizei length, const void *pointer) const
{
    static const char *fnName = "glVertexArrayRangeNV";

    beforeCommand(fnName, _api.glVertexArrayRange);
    _api.glVertexArrayRange(length, pointer);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVVertexAttribInteger64BITAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_vertex_attrib_integer_64bit extension.
NVVertexAttribInteger64BITAPI::NVVertexAttribInteger64BITAPI() :
    BaseExtension("GL_NV_vertex_attrib_integer_64bit")
{
}

// Grant read-only access to the underlying function pointers.
const NVVertexAttribInteger64BIT &NVVertexAttribInteger64BITAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_vertex_attrib_integer_64bit entry points.
void NVVertexAttribInteger64BITAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetVertexAttribLi64vNV().
void NVVertexAttribInteger64BITAPI::getVertexAttribLI64V(GLuint index,
                                                         VertexAttribEnum pname,
                                                         GLint64EXT *params) const
{
    static const char *fnName = "glGetVertexAttribLi64vNV";

    beforeCommand(fnName, _api.glGetVertexAttribLi64v);
    _api.glGetVertexAttribLi64v(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribLui64vNV().
void NVVertexAttribInteger64BITAPI::getVertexAttribLUI64(GLuint index,
                                                         VertexAttribEnum pname,
                                                         GLuint64EXT *params) const
{
    static const char *fnName = "glGetVertexAttribLui64vNV";

    beforeCommand(fnName, _api.glGetVertexAttribLui64v);
    _api.glGetVertexAttribLui64v(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glVertexAttribL1i64NV().
void NVVertexAttribInteger64BITAPI::vertexAttribL1I64(GLuint index, GLint64EXT x) const
{
    static const char *fnName = "glVertexAttribL1i64NV";

    beforeCommand(fnName, _api.glVertexAttribL1i64);
    _api.glVertexAttribL1i64(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribL1i64vNV().
void NVVertexAttribInteger64BITAPI::vertexAttribL1I64V(GLuint index,
                                                       const GLint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL1i64vNV";

    beforeCommand(fnName, _api.glVertexAttribL1i64v);
    _api.glVertexAttribL1i64v(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL1ui64NV().
void NVVertexAttribInteger64BITAPI::vertexAttribL1UI64(GLuint index,
                                                       GLuint64EXT x) const
{
    static const char *fnName = "glVertexAttribL1ui64NV";

    beforeCommand(fnName, _api.glVertexAttribL1ui64);
    _api.glVertexAttribL1ui64(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttribL1ui64vNV().
void NVVertexAttribInteger64BITAPI::vertexAttribL1UI64(GLuint index,
                                                       const GLuint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL1ui64vNV";

    beforeCommand(fnName, _api.glVertexAttribL1ui64v);
    _api.glVertexAttribL1ui64v(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL2i64NV().
void NVVertexAttribInteger64BITAPI::vertexAttribL2I64(GLuint index, GLint64EXT x,
                                                      GLint64EXT y) const
{
    static const char *fnName = "glVertexAttribL2i64NV";

    beforeCommand(fnName, _api.glVertexAttribL2i64);
    _api.glVertexAttribL2i64(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttribL2i64vNV().
void NVVertexAttribInteger64BITAPI::vertexAttribL2I64V(GLuint index,
                                                       const GLint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL2i64vNV";

    beforeCommand(fnName, _api.glVertexAttribL2i64v);
    _api.glVertexAttribL2i64v(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL2ui64NV().
void NVVertexAttribInteger64BITAPI::vertexAttribL2UI64(GLuint index,
                                                       GLuint64EXT x,
                                                       GLuint64EXT y) const
{
    static const char *fnName = "glVertexAttribL2ui64NV";

    beforeCommand(fnName, _api.glVertexAttribL2ui64);
    _api.glVertexAttribL2ui64(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttribL2ui64vNV().
void NVVertexAttribInteger64BITAPI::vertexAttribL2UI64(GLuint index,
                                                       const GLuint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL2ui64vNV";

    beforeCommand(fnName, _api.glVertexAttribL2ui64v);
    _api.glVertexAttribL2ui64v(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL3i64NV().
void NVVertexAttribInteger64BITAPI::vertexAttribL3I64(GLuint index, GLint64EXT x,
                                                      GLint64EXT y, GLint64EXT z) const
{
    static const char *fnName = "glVertexAttribL3i64NV";

    beforeCommand(fnName, _api.glVertexAttribL3i64);
    _api.glVertexAttribL3i64(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttribL3i64vNV().
void NVVertexAttribInteger64BITAPI::vertexAttribL3I64V(GLuint index,
                                                       const GLint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL3i64vNV";

    beforeCommand(fnName, _api.glVertexAttribL3i64v);
    _api.glVertexAttribL3i64v(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL3ui64NV().
void NVVertexAttribInteger64BITAPI::vertexAttribL3UI64(GLuint index,
                                                       GLuint64EXT x,
                                                       GLuint64EXT y,
                                                       GLuint64EXT z) const
{
    static const char *fnName = "glVertexAttribL3ui64NV";

    beforeCommand(fnName, _api.glVertexAttribL3ui64);
    _api.glVertexAttribL3ui64(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttribL3ui64vNV().
void NVVertexAttribInteger64BITAPI::vertexAttribL3UI64(GLuint index,
                                                       const GLuint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL3ui64vNV";

    beforeCommand(fnName, _api.glVertexAttribL3ui64v);
    _api.glVertexAttribL3ui64v(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL4i64NV().
void NVVertexAttribInteger64BITAPI::vertexAttribL4I64(GLuint index, GLint64EXT x,
                                                      GLint64EXT y, GLint64EXT z,
                                                      GLint64EXT w) const
{
    static const char *fnName = "glVertexAttribL4i64NV";

    beforeCommand(fnName, _api.glVertexAttribL4i64);
    _api.glVertexAttribL4i64(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttribL4i64vNV().
void NVVertexAttribInteger64BITAPI::vertexAttribL4I64V(GLuint index,
                                                       const GLint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL4i64vNV";

    beforeCommand(fnName, _api.glVertexAttribL4i64v);
    _api.glVertexAttribL4i64v(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribL4ui64NV().
void NVVertexAttribInteger64BITAPI::vertexAttribL4UI64(GLuint index,
                                                       GLuint64EXT x,
                                                       GLuint64EXT y,
                                                       GLuint64EXT z,
                                                       GLuint64EXT w) const
{
    static const char *fnName = "glVertexAttribL4ui64NV";

    beforeCommand(fnName, _api.glVertexAttribL4ui64);
    _api.glVertexAttribL4ui64(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttribL4ui64vNV().
void NVVertexAttribInteger64BITAPI::vertexAttribL4UI64(GLuint index,
                                                       const GLuint64EXT *v) const
{
    static const char *fnName = "glVertexAttribL4ui64vNV";

    beforeCommand(fnName, _api.glVertexAttribL4ui64v);
    _api.glVertexAttribL4ui64v(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribLFormatNV().
void NVVertexAttribInteger64BITAPI::vertexAttribLFormat(GLuint index, GLint size,
                                                        VertexAttribLType type,
                                                        GLsizei stride) const
{
    static const char *fnName = "glVertexAttribLFormatNV";

    beforeCommand(fnName, _api.glVertexAttribLFormat);
    _api.glVertexAttribLFormat(index, size, toScalar(type), stride);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVVertexBufferUnifiedMemoryAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_vertex_buffer_unified_memory extension.
NVVertexBufferUnifiedMemoryAPI::NVVertexBufferUnifiedMemoryAPI() :
    BaseExtension("GL_NV_vertex_buffer_unified_memory")
{
}

// Grant read-only access to the underlying function pointers.
const NVVertexBufferUnifiedMemory &NVVertexBufferUnifiedMemoryAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_vertex_buffer_unified_memory entry points.
void NVVertexBufferUnifiedMemoryAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBufferAddressRangeNV().
void NVVertexBufferUnifiedMemoryAPI::bufferAddressRange(GLenum pname,
                                                        GLuint index,
                                                        GLuint64EXT address,
                                                        GLsizeiptr length) const
{
    static const char *fnName = "glBufferAddressRangeNV";

    beforeCommand(fnName, _api.glBufferAddressRange);
    _api.glBufferAddressRange(pname, index, address, length);
    afterCommand(fnName);
}

// Calls glColorFormatNV().
void NVVertexBufferUnifiedMemoryAPI::colorFormat(GLint size, GLenum type,
                                                 GLsizei stride) const
{
    static const char *fnName = "glColorFormatNV";

    beforeCommand(fnName, _api.glColorFormat);
    _api.glColorFormat(size, type, stride);
    afterCommand(fnName);
}

// Calls glEdgeFlagFormatNV().
void NVVertexBufferUnifiedMemoryAPI::edgeFlagFormat(GLsizei stride) const
{
    static const char *fnName = "glEdgeFlagFormatNV";

    beforeCommand(fnName, _api.glEdgeFlagFormat);
    _api.glEdgeFlagFormat(stride);
    afterCommand(fnName);
}

// Calls glFogCoordFormatNV().
void NVVertexBufferUnifiedMemoryAPI::fogCoordFormat(GLenum type, GLsizei stride) const
{
    static const char *fnName = "glFogCoordFormatNV";

    beforeCommand(fnName, _api.glFogCoordFormat);
    _api.glFogCoordFormat(type, stride);
    afterCommand(fnName);
}

// Calls glGetIntegerui64i_vNV().
void NVVertexBufferUnifiedMemoryAPI::getIntegerUI64(GLenum value, GLuint index,
                                                    GLuint64EXT *result) const
{
    static const char *fnName = "glGetIntegerui64i_vNV";

    beforeCommand(fnName, _api.glGetIntegerui64i_v);
    _api.glGetIntegerui64i_v(value, index, result);
    afterCommand(fnName);
}

// Calls glIndexFormatNV().
void NVVertexBufferUnifiedMemoryAPI::indexFormat(GLenum type, GLsizei stride) const
{
    static const char *fnName = "glIndexFormatNV";

    beforeCommand(fnName, _api.glIndexFormat);
    _api.glIndexFormat(type, stride);
    afterCommand(fnName);
}

// Calls glNormalFormatNV().
void NVVertexBufferUnifiedMemoryAPI::normalFormat(GLenum type, GLsizei stride) const
{
    static const char *fnName = "glNormalFormatNV";

    beforeCommand(fnName, _api.glNormalFormat);
    _api.glNormalFormat(type, stride);
    afterCommand(fnName);
}

// Calls glSecondaryColorFormatNV().
void NVVertexBufferUnifiedMemoryAPI::secondaryColorFormat(GLint size,
                                                          ColorPointerType type,
                                                          GLsizei stride) const
{
    static const char *fnName = "glSecondaryColorFormatNV";

    beforeCommand(fnName, _api.glSecondaryColorFormat);
    _api.glSecondaryColorFormat(size, toScalar(type), stride);
    afterCommand(fnName);
}

// Calls glTexCoordFormatNV().
void NVVertexBufferUnifiedMemoryAPI::texCoordFormat(GLint size, GLenum type,
                                                    GLsizei stride) const
{
    static const char *fnName = "glTexCoordFormatNV";

    beforeCommand(fnName, _api.glTexCoordFormat);
    _api.glTexCoordFormat(size, type, stride);
    afterCommand(fnName);
}

// Calls glVertexAttribFormatNV().
void NVVertexBufferUnifiedMemoryAPI::vertexAttribFormat(GLuint index, GLint size,
                                                        VertexAttribType type,
                                                        Boolean normalized,
                                                        GLsizei stride) const
{
    static const char *fnName = "glVertexAttribFormatNV";

    beforeCommand(fnName, _api.glVertexAttribFormat);
    _api.glVertexAttribFormat(index, size, toScalar(type), toScalar(normalized),
                              stride);
    afterCommand(fnName);
}

// Calls glVertexAttribIFormatNV().
void NVVertexBufferUnifiedMemoryAPI::vertexAttribIFormat(GLuint index,
                                                         GLint size,
                                                         VertexAttribIType type,
                                                         GLsizei stride) const
{
    static const char *fnName = "glVertexAttribIFormatNV";

    beforeCommand(fnName, _api.glVertexAttribIFormat);
    _api.glVertexAttribIFormat(index, size, toScalar(type), stride);
    afterCommand(fnName);
}

// Calls glVertexFormatNV().
void NVVertexBufferUnifiedMemoryAPI::vertexFormat(GLint size,
                                                  VertexPointerType type,
                                                  GLsizei stride) const
{
    static const char *fnName = "glVertexFormatNV";

    beforeCommand(fnName, _api.glVertexFormat);
    _api.glVertexFormat(size, toScalar(type), stride);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVVertexProgramAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_vertex_program extension.
NVVertexProgramAPI::NVVertexProgramAPI() :
    BaseExtension("GL_NV_vertex_program")
{
}

// Grant read-only access to the underlying function pointers.
const NVVertexProgram &NVVertexProgramAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_vertex_program entry points.
void NVVertexProgramAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAreProgramsResidentNV().
Boolean NVVertexProgramAPI::areProgramsResident(GLsizei n,
                                                const ProgramName *programs,
                                                Boolean *residences) const
{
    static const char *fnName = "glAreProgramsResidentNV";

    beforeCommand(fnName, _api.glAreProgramsResident);
    GLboolean result = _api.glAreProgramsResident(n,
                                                  reinterpret_cast<const GLuint *>(programs),
                                                  toScalarPtr(residences));
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glBindProgramNV().
void NVVertexProgramAPI::bindProgram(VertexAttribEnumNV target, ProgramName id) const
{
    static const char *fnName = "glBindProgramNV";

    beforeCommand(fnName, _api.glBindProgram);
    _api.glBindProgram(toScalar(target), id.ID);
    afterCommand(fnName);
}

// Calls glDeleteProgramsNV().
void NVVertexProgramAPI::deletePrograms(GLsizei n, const ProgramName *programs) const
{
    static const char *fnName = "glDeleteProgramsNV";

    beforeCommand(fnName, _api.glDeletePrograms);
    _api.glDeletePrograms(n, reinterpret_cast<const GLuint *>(programs));
    afterCommand(fnName);
}

// Calls glExecuteProgramNV().
void NVVertexProgramAPI::executeProgram(VertexAttribEnumNV target, GLuint id,
                                        const GLfloat *params) const
{
    static const char *fnName = "glExecuteProgramNV";

    beforeCommand(fnName, _api.glExecuteProgram);
    _api.glExecuteProgram(toScalar(target), id, params);
    afterCommand(fnName);
}

// Calls glGenProgramsNV().
void NVVertexProgramAPI::genPrograms(GLsizei n, ProgramName *programs) const
{
    static const char *fnName = "glGenProgramsNV";

    beforeCommand(fnName, _api.glGenPrograms);
    _api.glGenPrograms(n, reinterpret_cast<GLuint *>(programs));
    afterCommand(fnName);
}

// Calls glGetProgramParameterdvNV().
void NVVertexProgramAPI::getProgramParameterDV(VertexAttribEnumNV target,
                                               GLuint index,
                                               VertexAttribEnumNV pname,
                                               GLdouble *params) const
{
    static const char *fnName = "glGetProgramParameterdvNV";

    beforeCommand(fnName, _api.glGetProgramParameterdv);
    _api.glGetProgramParameterdv(toScalar(target), index, toScalar(pname),
                                 params);
    afterCommand(fnName);
}

// Calls glGetProgramParameterfvNV().
void NVVertexProgramAPI::getProgramParameterFV(VertexAttribEnumNV target,
                                               GLuint index,
                                               VertexAttribEnumNV pname,
                                               GLfloat *params) const
{
    static const char *fnName = "glGetProgramParameterfvNV";

    beforeCommand(fnName, _api.glGetProgramParameterfv);
    _api.glGetProgramParameterfv(toScalar(target), index, toScalar(pname),
                                 params);
    afterCommand(fnName);
}

// Calls glGetProgramStringNV().
void NVVertexProgramAPI::getProgramString(ProgramName id,
                                          VertexAttribEnumNV pname,
                                          GLubyte *program) const
{
    static const char *fnName = "glGetProgramStringNV";

    beforeCommand(fnName, _api.glGetProgramString);
    _api.glGetProgramString(id.ID, toScalar(pname), program);
    afterCommand(fnName);
}

// Calls glGetProgramivNV().
void NVVertexProgramAPI::getProgramIV(ProgramName id, VertexAttribEnumNV pname,
                                      GLint *params) const
{
    static const char *fnName = "glGetProgramivNV";

    beforeCommand(fnName, _api.glGetProgramiv);
    _api.glGetProgramiv(id.ID, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTrackMatrixivNV().
void NVVertexProgramAPI::getTrackMatrixIV(VertexAttribEnumNV target,
                                          GLuint address,
                                          VertexAttribEnumNV pname,
                                          GLint *params) const
{
    static const char *fnName = "glGetTrackMatrixivNV";

    beforeCommand(fnName, _api.glGetTrackMatrixiv);
    _api.glGetTrackMatrixiv(toScalar(target), address, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribPointervNV().
void NVVertexProgramAPI::getVertexAttribPointerV(GLuint index,
                                                 VertexAttribEnumNV pname,
                                                 void **pointer) const
{
    static const char *fnName = "glGetVertexAttribPointervNV";

    beforeCommand(fnName, _api.glGetVertexAttribPointerv);
    _api.glGetVertexAttribPointerv(index, toScalar(pname), pointer);
    afterCommand(fnName);
}

// Calls glGetVertexAttribdvNV().
void NVVertexProgramAPI::getVertexAttribDV(GLuint index,
                                           VertexAttribEnumNV pname,
                                           GLdouble *params) const
{
    static const char *fnName = "glGetVertexAttribdvNV";

    beforeCommand(fnName, _api.glGetVertexAttribdv);
    _api.glGetVertexAttribdv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribfvNV().
void NVVertexProgramAPI::getVertexAttribFV(GLuint index,
                                           VertexAttribEnumNV pname,
                                           GLfloat *params) const
{
    static const char *fnName = "glGetVertexAttribfvNV";

    beforeCommand(fnName, _api.glGetVertexAttribfv);
    _api.glGetVertexAttribfv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetVertexAttribivNV().
void NVVertexProgramAPI::getVertexAttribIV(GLuint index,
                                           VertexAttribEnumNV pname,
                                           GLint *params) const
{
    static const char *fnName = "glGetVertexAttribivNV";

    beforeCommand(fnName, _api.glGetVertexAttribiv);
    _api.glGetVertexAttribiv(index, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIsProgramNV().
Boolean NVVertexProgramAPI::isProgram(ProgramName id) const
{
    static const char *fnName = "glIsProgramNV";

    beforeCommand(fnName, _api.glIsProgram);
    GLboolean result = _api.glIsProgram(id.ID);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glLoadProgramNV().
void NVVertexProgramAPI::loadProgram(VertexAttribEnumNV target, GLuint id,
                                     GLsizei len, const GLubyte *program) const
{
    static const char *fnName = "glLoadProgramNV";

    beforeCommand(fnName, _api.glLoadProgram);
    _api.glLoadProgram(toScalar(target), id, len, program);
    afterCommand(fnName);
}

// Calls glProgramParameter4dNV().
void NVVertexProgramAPI::programParameter4D(VertexAttribEnumNV target,
                                            GLuint index, GLdouble x, GLdouble y,
                                            GLdouble z, GLdouble w) const
{
    static const char *fnName = "glProgramParameter4dNV";

    beforeCommand(fnName, _api.glProgramParameter4d);
    _api.glProgramParameter4d(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramParameter4dvNV().
void NVVertexProgramAPI::programParameter4DV(VertexAttribEnumNV target,
                                             GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glProgramParameter4dvNV";

    beforeCommand(fnName, _api.glProgramParameter4dv);
    _api.glProgramParameter4dv(toScalar(target), index, v);
    afterCommand(fnName);
}

// Calls glProgramParameter4fNV().
void NVVertexProgramAPI::programParameter4F(VertexAttribEnumNV target,
                                            GLuint index, GLfloat x, GLfloat y,
                                            GLfloat z, GLfloat w) const
{
    static const char *fnName = "glProgramParameter4fNV";

    beforeCommand(fnName, _api.glProgramParameter4f);
    _api.glProgramParameter4f(toScalar(target), index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glProgramParameter4fvNV().
void NVVertexProgramAPI::programParameter4FV(VertexAttribEnumNV target,
                                             GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glProgramParameter4fvNV";

    beforeCommand(fnName, _api.glProgramParameter4fv);
    _api.glProgramParameter4fv(toScalar(target), index, v);
    afterCommand(fnName);
}

// Calls glProgramParameters4dvNV().
void NVVertexProgramAPI::programParameters4DV(VertexAttribEnumNV target,
                                              GLuint index, GLsizei count,
                                              const GLdouble *v) const
{
    static const char *fnName = "glProgramParameters4dvNV";

    beforeCommand(fnName, _api.glProgramParameters4dv);
    _api.glProgramParameters4dv(toScalar(target), index, count, v);
    afterCommand(fnName);
}

// Calls glProgramParameters4fvNV().
void NVVertexProgramAPI::programParameters4FV(VertexAttribEnumNV target,
                                              GLuint index, GLsizei count,
                                              const GLfloat *v) const
{
    static const char *fnName = "glProgramParameters4fvNV";

    beforeCommand(fnName, _api.glProgramParameters4fv);
    _api.glProgramParameters4fv(toScalar(target), index, count, v);
    afterCommand(fnName);
}

// Calls glRequestResidentProgramsNV().
void NVVertexProgramAPI::requestResidentPrograms(GLsizei n,
                                                 const ProgramName *programs) const
{
    static const char *fnName = "glRequestResidentProgramsNV";

    beforeCommand(fnName, _api.glRequestResidentPrograms);
    _api.glRequestResidentPrograms(n, reinterpret_cast<const GLuint *>(programs));
    afterCommand(fnName);
}

// Calls glTrackMatrixNV().
void NVVertexProgramAPI::trackMatrix(VertexAttribEnumNV target, GLuint address,
                                     VertexAttribEnumNV matrix,
                                     VertexAttribEnumNV transform) const
{
    static const char *fnName = "glTrackMatrixNV";

    beforeCommand(fnName, _api.glTrackMatrix);
    _api.glTrackMatrix(toScalar(target), address, toScalar(matrix),
                       toScalar(transform));
    afterCommand(fnName);
}

// Calls glVertexAttrib1dNV().
void NVVertexProgramAPI::vertexAttrib1D(GLuint index, GLdouble x) const
{
    static const char *fnName = "glVertexAttrib1dNV";

    beforeCommand(fnName, _api.glVertexAttrib1d);
    _api.glVertexAttrib1d(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1dvNV().
void NVVertexProgramAPI::vertexAttrib1DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib1dvNV";

    beforeCommand(fnName, _api.glVertexAttrib1dv);
    _api.glVertexAttrib1dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib1fNV().
void NVVertexProgramAPI::vertexAttrib1F(GLuint index, GLfloat x) const
{
    static const char *fnName = "glVertexAttrib1fNV";

    beforeCommand(fnName, _api.glVertexAttrib1f);
    _api.glVertexAttrib1f(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1fvNV().
void NVVertexProgramAPI::vertexAttrib1FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib1fvNV";

    beforeCommand(fnName, _api.glVertexAttrib1fv);
    _api.glVertexAttrib1fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib1sNV().
void NVVertexProgramAPI::vertexAttrib1S(GLuint index, GLshort x) const
{
    static const char *fnName = "glVertexAttrib1sNV";

    beforeCommand(fnName, _api.glVertexAttrib1s);
    _api.glVertexAttrib1s(index, x);
    afterCommand(fnName);
}

// Calls glVertexAttrib1svNV().
void NVVertexProgramAPI::vertexAttrib1SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib1svNV";

    beforeCommand(fnName, _api.glVertexAttrib1sv);
    _api.glVertexAttrib1sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2dNV().
void NVVertexProgramAPI::vertexAttrib2D(GLuint index, GLdouble x, GLdouble y) const
{
    static const char *fnName = "glVertexAttrib2dNV";

    beforeCommand(fnName, _api.glVertexAttrib2d);
    _api.glVertexAttrib2d(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2dvNV().
void NVVertexProgramAPI::vertexAttrib2DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib2dvNV";

    beforeCommand(fnName, _api.glVertexAttrib2dv);
    _api.glVertexAttrib2dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2fNV().
void NVVertexProgramAPI::vertexAttrib2F(GLuint index, GLfloat x, GLfloat y) const
{
    static const char *fnName = "glVertexAttrib2fNV";

    beforeCommand(fnName, _api.glVertexAttrib2f);
    _api.glVertexAttrib2f(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2fvNV().
void NVVertexProgramAPI::vertexAttrib2FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib2fvNV";

    beforeCommand(fnName, _api.glVertexAttrib2fv);
    _api.glVertexAttrib2fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib2sNV().
void NVVertexProgramAPI::vertexAttrib2S(GLuint index, GLshort x, GLshort y) const
{
    static const char *fnName = "glVertexAttrib2sNV";

    beforeCommand(fnName, _api.glVertexAttrib2s);
    _api.glVertexAttrib2s(index, x, y);
    afterCommand(fnName);
}

// Calls glVertexAttrib2svNV().
void NVVertexProgramAPI::vertexAttrib2SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib2svNV";

    beforeCommand(fnName, _api.glVertexAttrib2sv);
    _api.glVertexAttrib2sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3dNV().
void NVVertexProgramAPI::vertexAttrib3D(GLuint index, GLdouble x, GLdouble y,
                                        GLdouble z) const
{
    static const char *fnName = "glVertexAttrib3dNV";

    beforeCommand(fnName, _api.glVertexAttrib3d);
    _api.glVertexAttrib3d(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3dvNV().
void NVVertexProgramAPI::vertexAttrib3DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib3dvNV";

    beforeCommand(fnName, _api.glVertexAttrib3dv);
    _api.glVertexAttrib3dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3fNV().
void NVVertexProgramAPI::vertexAttrib3F(GLuint index, GLfloat x, GLfloat y,
                                        GLfloat z) const
{
    static const char *fnName = "glVertexAttrib3fNV";

    beforeCommand(fnName, _api.glVertexAttrib3f);
    _api.glVertexAttrib3f(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3fvNV().
void NVVertexProgramAPI::vertexAttrib3FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib3fvNV";

    beforeCommand(fnName, _api.glVertexAttrib3fv);
    _api.glVertexAttrib3fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib3sNV().
void NVVertexProgramAPI::vertexAttrib3S(GLuint index, GLshort x, GLshort y,
                                        GLshort z) const
{
    static const char *fnName = "glVertexAttrib3sNV";

    beforeCommand(fnName, _api.glVertexAttrib3s);
    _api.glVertexAttrib3s(index, x, y, z);
    afterCommand(fnName);
}

// Calls glVertexAttrib3svNV().
void NVVertexProgramAPI::vertexAttrib3SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib3svNV";

    beforeCommand(fnName, _api.glVertexAttrib3sv);
    _api.glVertexAttrib3sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4dNV().
void NVVertexProgramAPI::vertexAttrib4D(GLuint index, GLdouble x, GLdouble y,
                                        GLdouble z, GLdouble w) const
{
    static const char *fnName = "glVertexAttrib4dNV";

    beforeCommand(fnName, _api.glVertexAttrib4d);
    _api.glVertexAttrib4d(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4dvNV().
void NVVertexProgramAPI::vertexAttrib4DV(GLuint index, const GLdouble *v) const
{
    static const char *fnName = "glVertexAttrib4dvNV";

    beforeCommand(fnName, _api.glVertexAttrib4dv);
    _api.glVertexAttrib4dv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4fNV().
void NVVertexProgramAPI::vertexAttrib4F(GLuint index, GLfloat x, GLfloat y,
                                        GLfloat z, GLfloat w) const
{
    static const char *fnName = "glVertexAttrib4fNV";

    beforeCommand(fnName, _api.glVertexAttrib4f);
    _api.glVertexAttrib4f(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4fvNV().
void NVVertexProgramAPI::vertexAttrib4FV(GLuint index, const GLfloat *v) const
{
    static const char *fnName = "glVertexAttrib4fvNV";

    beforeCommand(fnName, _api.glVertexAttrib4fv);
    _api.glVertexAttrib4fv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4sNV().
void NVVertexProgramAPI::vertexAttrib4S(GLuint index, GLshort x, GLshort y,
                                        GLshort z, GLshort w) const
{
    static const char *fnName = "glVertexAttrib4sNV";

    beforeCommand(fnName, _api.glVertexAttrib4s);
    _api.glVertexAttrib4s(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4svNV().
void NVVertexProgramAPI::vertexAttrib4SV(GLuint index, const GLshort *v) const
{
    static const char *fnName = "glVertexAttrib4svNV";

    beforeCommand(fnName, _api.glVertexAttrib4sv);
    _api.glVertexAttrib4sv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttrib4ubNV().
void NVVertexProgramAPI::vertexAttrib4UB(GLuint index, GLubyte x, GLubyte y,
                                         GLubyte z, GLubyte w) const
{
    static const char *fnName = "glVertexAttrib4ubNV";

    beforeCommand(fnName, _api.glVertexAttrib4ub);
    _api.glVertexAttrib4ub(index, x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertexAttrib4ubvNV().
void NVVertexProgramAPI::vertexAttrib4UBV(GLuint index, const GLubyte *v) const
{
    static const char *fnName = "glVertexAttrib4ubvNV";

    beforeCommand(fnName, _api.glVertexAttrib4ubv);
    _api.glVertexAttrib4ubv(index, v);
    afterCommand(fnName);
}

// Calls glVertexAttribPointerNV().
void NVVertexProgramAPI::vertexAttribPointer(GLuint index, GLint fsize,
                                             VertexAttribEnumNV type,
                                             GLsizei stride, const void *pointer) const
{
    static const char *fnName = "glVertexAttribPointerNV";

    beforeCommand(fnName, _api.glVertexAttribPointer);
    _api.glVertexAttribPointer(index, fsize, toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glVertexAttribs1dvNV().
void NVVertexProgramAPI::vertexAttribs1DV(GLuint index, GLsizei count,
                                          const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribs1dvNV";

    beforeCommand(fnName, _api.glVertexAttribs1dv);
    _api.glVertexAttribs1dv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs1fvNV().
void NVVertexProgramAPI::vertexAttribs1FV(GLuint index, GLsizei count,
                                          const GLfloat *v) const
{
    static const char *fnName = "glVertexAttribs1fvNV";

    beforeCommand(fnName, _api.glVertexAttribs1fv);
    _api.glVertexAttribs1fv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs1svNV().
void NVVertexProgramAPI::vertexAttribs1SV(GLuint index, GLsizei count,
                                          const GLshort *v) const
{
    static const char *fnName = "glVertexAttribs1svNV";

    beforeCommand(fnName, _api.glVertexAttribs1sv);
    _api.glVertexAttribs1sv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs2dvNV().
void NVVertexProgramAPI::vertexAttribs2DV(GLuint index, GLsizei count,
                                          const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribs2dvNV";

    beforeCommand(fnName, _api.glVertexAttribs2dv);
    _api.glVertexAttribs2dv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs2fvNV().
void NVVertexProgramAPI::vertexAttribs2FV(GLuint index, GLsizei count,
                                          const GLfloat *v) const
{
    static const char *fnName = "glVertexAttribs2fvNV";

    beforeCommand(fnName, _api.glVertexAttribs2fv);
    _api.glVertexAttribs2fv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs2svNV().
void NVVertexProgramAPI::vertexAttribs2SV(GLuint index, GLsizei count,
                                          const GLshort *v) const
{
    static const char *fnName = "glVertexAttribs2svNV";

    beforeCommand(fnName, _api.glVertexAttribs2sv);
    _api.glVertexAttribs2sv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs3dvNV().
void NVVertexProgramAPI::vertexAttribs3DV(GLuint index, GLsizei count,
                                          const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribs3dvNV";

    beforeCommand(fnName, _api.glVertexAttribs3dv);
    _api.glVertexAttribs3dv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs3fvNV().
void NVVertexProgramAPI::vertexAttribs3FV(GLuint index, GLsizei count,
                                          const GLfloat *v) const
{
    static const char *fnName = "glVertexAttribs3fvNV";

    beforeCommand(fnName, _api.glVertexAttribs3fv);
    _api.glVertexAttribs3fv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs3svNV().
void NVVertexProgramAPI::vertexAttribs3SV(GLuint index, GLsizei count,
                                          const GLshort *v) const
{
    static const char *fnName = "glVertexAttribs3svNV";

    beforeCommand(fnName, _api.glVertexAttribs3sv);
    _api.glVertexAttribs3sv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs4dvNV().
void NVVertexProgramAPI::vertexAttribs4DV(GLuint index, GLsizei count,
                                          const GLdouble *v) const
{
    static const char *fnName = "glVertexAttribs4dvNV";

    beforeCommand(fnName, _api.glVertexAttribs4dv);
    _api.glVertexAttribs4dv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs4fvNV().
void NVVertexProgramAPI::vertexAttribs4FV(GLuint index, GLsizei count,
                                          const GLfloat *v) const
{
    static const char *fnName = "glVertexAttribs4fvNV";

    beforeCommand(fnName, _api.glVertexAttribs4fv);
    _api.glVertexAttribs4fv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs4svNV().
void NVVertexProgramAPI::vertexAttribs4SV(GLuint index, GLsizei count,
                                          const GLshort *v) const
{
    static const char *fnName = "glVertexAttribs4svNV";

    beforeCommand(fnName, _api.glVertexAttribs4sv);
    _api.glVertexAttribs4sv(index, count, v);
    afterCommand(fnName);
}

// Calls glVertexAttribs4ubvNV().
void NVVertexProgramAPI::vertexAttribs4UBV(GLuint index, GLsizei count,
                                           const GLubyte *v) const
{
    static const char *fnName = "glVertexAttribs4ubvNV";

    beforeCommand(fnName, _api.glVertexAttribs4ubv);
    _api.glVertexAttribs4ubv(index, count, v);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVVideoCaptureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_video_capture extension.
NVVideoCaptureAPI::NVVideoCaptureAPI() :
    BaseExtension("GL_NV_video_capture")
{
}

// Grant read-only access to the underlying function pointers.
const NVVideoCapture &NVVideoCaptureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_video_capture entry points.
void NVVideoCaptureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glBeginVideoCaptureNV().
void NVVideoCaptureAPI::beginVideoCapture(GLuint video_capture_slot) const
{
    static const char *fnName = "glBeginVideoCaptureNV";

    beforeCommand(fnName, _api.glBeginVideoCapture);
    _api.glBeginVideoCapture(video_capture_slot);
    afterCommand(fnName);
}

// Calls glBindVideoCaptureStreamBufferNV().
void NVVideoCaptureAPI::bindVideoCaptureStreamBuffer(GLuint video_capture_slot,
                                                     GLuint stream,
                                                     GLenum frame_region,
                                                     GLintptrARB offset) const
{
    static const char *fnName = "glBindVideoCaptureStreamBufferNV";

    beforeCommand(fnName, _api.glBindVideoCaptureStreamBuffer);
    _api.glBindVideoCaptureStreamBuffer(video_capture_slot, stream, frame_region,
                                        offset);
    afterCommand(fnName);
}

// Calls glBindVideoCaptureStreamTextureNV().
void NVVideoCaptureAPI::bindVideoCaptureStreamTexture(GLuint video_capture_slot,
                                                      GLuint stream,
                                                      GLenum frame_region,
                                                      GLenum target,
                                                      TextureName texture) const
{
    static const char *fnName = "glBindVideoCaptureStreamTextureNV";

    beforeCommand(fnName, _api.glBindVideoCaptureStreamTexture);
    _api.glBindVideoCaptureStreamTexture(video_capture_slot, stream,
                                         frame_region, target, texture.ID);
    afterCommand(fnName);
}

// Calls glEndVideoCaptureNV().
void NVVideoCaptureAPI::endVideoCapture(GLuint video_capture_slot) const
{
    static const char *fnName = "glEndVideoCaptureNV";

    beforeCommand(fnName, _api.glEndVideoCapture);
    _api.glEndVideoCapture(video_capture_slot);
    afterCommand(fnName);
}

// Calls glGetVideoCaptureStreamdvNV().
void NVVideoCaptureAPI::getVideoCaptureStreamDV(GLuint video_capture_slot,
                                                GLuint stream, GLenum pname,
                                                GLdouble *params) const
{
    static const char *fnName = "glGetVideoCaptureStreamdvNV";

    beforeCommand(fnName, _api.glGetVideoCaptureStreamdv);
    _api.glGetVideoCaptureStreamdv(video_capture_slot, stream, pname, params);
    afterCommand(fnName);
}

// Calls glGetVideoCaptureStreamfvNV().
void NVVideoCaptureAPI::getVideoCaptureStreamFV(GLuint video_capture_slot,
                                                GLuint stream, GLenum pname,
                                                GLfloat *params) const
{
    static const char *fnName = "glGetVideoCaptureStreamfvNV";

    beforeCommand(fnName, _api.glGetVideoCaptureStreamfv);
    _api.glGetVideoCaptureStreamfv(video_capture_slot, stream, pname, params);
    afterCommand(fnName);
}

// Calls glGetVideoCaptureStreamivNV().
void NVVideoCaptureAPI::getVideoCaptureStreamIV(GLuint video_capture_slot,
                                                GLuint stream, GLenum pname,
                                                GLint *params) const
{
    static const char *fnName = "glGetVideoCaptureStreamivNV";

    beforeCommand(fnName, _api.glGetVideoCaptureStreamiv);
    _api.glGetVideoCaptureStreamiv(video_capture_slot, stream, pname, params);
    afterCommand(fnName);
}

// Calls glGetVideoCaptureivNV().
void NVVideoCaptureAPI::getVideoCaptureIV(GLuint video_capture_slot,
                                          GLenum pname, GLint *params) const
{
    static const char *fnName = "glGetVideoCaptureivNV";

    beforeCommand(fnName, _api.glGetVideoCaptureiv);
    _api.glGetVideoCaptureiv(video_capture_slot, pname, params);
    afterCommand(fnName);
}

// Calls glVideoCaptureNV().
GLenum NVVideoCaptureAPI::videoCapture(GLuint video_capture_slot,
                                       GLuint *sequence_num,
                                       GLuint64EXT *capture_time) const
{
    static const char *fnName = "glVideoCaptureNV";

    beforeCommand(fnName, _api.glVideoCapture);
    GLenum result = _api.glVideoCapture(video_capture_slot, sequence_num,
                                        capture_time);
    afterCommand(fnName);

    return result;
}

// Calls glVideoCaptureStreamParameterdvNV().
void NVVideoCaptureAPI::videoCaptureStreamParameterDV(GLuint video_capture_slot,
                                                      GLuint stream,
                                                      GLenum pname,
                                                      const GLdouble *params) const
{
    static const char *fnName = "glVideoCaptureStreamParameterdvNV";

    beforeCommand(fnName, _api.glVideoCaptureStreamParameterdv);
    _api.glVideoCaptureStreamParameterdv(video_capture_slot, stream, pname,
                                         params);
    afterCommand(fnName);
}

// Calls glVideoCaptureStreamParameterfvNV().
void NVVideoCaptureAPI::videoCaptureStreamParameterFV(GLuint video_capture_slot,
                                                      GLuint stream,
                                                      GLenum pname,
                                                      const GLfloat *params) const
{
    static const char *fnName = "glVideoCaptureStreamParameterfvNV";

    beforeCommand(fnName, _api.glVideoCaptureStreamParameterfv);
    _api.glVideoCaptureStreamParameterfv(video_capture_slot, stream, pname,
                                         params);
    afterCommand(fnName);
}

// Calls glVideoCaptureStreamParameterivNV().
void NVVideoCaptureAPI::videoCaptureStreamParameterIV(GLuint video_capture_slot,
                                                      GLuint stream,
                                                      GLenum pname,
                                                      const GLint *params) const
{
    static const char *fnName = "glVideoCaptureStreamParameterivNV";

    beforeCommand(fnName, _api.glVideoCaptureStreamParameteriv);
    _api.glVideoCaptureStreamParameteriv(video_capture_slot, stream, pname,
                                         params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// NVViewportSwizzleAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_NV_viewport_swizzle extension.
NVViewportSwizzleAPI::NVViewportSwizzleAPI() :
    BaseExtension("GL_NV_viewport_swizzle")
{
}

// Grant read-only access to the underlying function pointers.
const NVViewportSwizzle &NVViewportSwizzleAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_NV_viewport_swizzle entry points.
void NVViewportSwizzleAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glViewportSwizzleNV().
void NVViewportSwizzleAPI::viewportSwizzle(GLuint index, GLenum swizzlex,
                                           GLenum swizzley, GLenum swizzlez,
                                           GLenum swizzlew) const
{
    static const char *fnName = "glViewportSwizzleNV";

    beforeCommand(fnName, _api.glViewportSwizzle);
    _api.glViewportSwizzle(index, swizzlex, swizzley, swizzlez, swizzlew);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// OESByteCoordinatesAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_OES_byte_coordinates extension.
OESByteCoordinatesAPI::OESByteCoordinatesAPI() :
    BaseExtension("GL_OES_byte_coordinates")
{
}

// Grant read-only access to the underlying function pointers.
const OESByteCoordinates &OESByteCoordinatesAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_OES_byte_coordinates entry points.
void OESByteCoordinatesAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glMultiTexCoord1bOES().
void OESByteCoordinatesAPI::multiTexCoord1B(TextureUnit texture, GLbyte s) const
{
    static const char *fnName = "glMultiTexCoord1bOES";

    beforeCommand(fnName, _api.glMultiTexCoord1b);
    _api.glMultiTexCoord1b(toScalar(texture), s);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1bvOES().
void OESByteCoordinatesAPI::multiTexCoord1BV(TextureUnit texture,
                                             const GLbyte *coords) const
{
    static const char *fnName = "glMultiTexCoord1bvOES";

    beforeCommand(fnName, _api.glMultiTexCoord1bv);
    _api.glMultiTexCoord1bv(toScalar(texture), coords);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2bOES().
void OESByteCoordinatesAPI::multiTexCoord2B(TextureUnit texture, GLbyte s,
                                            GLbyte t) const
{
    static const char *fnName = "glMultiTexCoord2bOES";

    beforeCommand(fnName, _api.glMultiTexCoord2b);
    _api.glMultiTexCoord2b(toScalar(texture), s, t);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2bvOES().
void OESByteCoordinatesAPI::multiTexCoord2BV(TextureUnit texture,
                                             const GLbyte *coords) const
{
    static const char *fnName = "glMultiTexCoord2bvOES";

    beforeCommand(fnName, _api.glMultiTexCoord2bv);
    _api.glMultiTexCoord2bv(toScalar(texture), coords);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3bOES().
void OESByteCoordinatesAPI::multiTexCoord3B(TextureUnit texture, GLbyte s,
                                            GLbyte t, GLbyte r) const
{
    static const char *fnName = "glMultiTexCoord3bOES";

    beforeCommand(fnName, _api.glMultiTexCoord3b);
    _api.glMultiTexCoord3b(toScalar(texture), s, t, r);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3bvOES().
void OESByteCoordinatesAPI::multiTexCoord3BV(TextureUnit texture,
                                             const GLbyte *coords) const
{
    static const char *fnName = "glMultiTexCoord3bvOES";

    beforeCommand(fnName, _api.glMultiTexCoord3bv);
    _api.glMultiTexCoord3bv(toScalar(texture), coords);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4bOES().
void OESByteCoordinatesAPI::multiTexCoord4B(TextureUnit texture, GLbyte s,
                                            GLbyte t, GLbyte r, GLbyte q) const
{
    static const char *fnName = "glMultiTexCoord4bOES";

    beforeCommand(fnName, _api.glMultiTexCoord4b);
    _api.glMultiTexCoord4b(toScalar(texture), s, t, r, q);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4bvOES().
void OESByteCoordinatesAPI::multiTexCoord4BV(TextureUnit texture,
                                             const GLbyte *coords) const
{
    static const char *fnName = "glMultiTexCoord4bvOES";

    beforeCommand(fnName, _api.glMultiTexCoord4bv);
    _api.glMultiTexCoord4bv(toScalar(texture), coords);
    afterCommand(fnName);
}

// Calls glTexCoord1bOES().
void OESByteCoordinatesAPI::texCoord1B(GLbyte s) const
{
    static const char *fnName = "glTexCoord1bOES";

    beforeCommand(fnName, _api.glTexCoord1b);
    _api.glTexCoord1b(s);
    afterCommand(fnName);
}

// Calls glTexCoord1bvOES().
void OESByteCoordinatesAPI::texCoord1BV(const GLbyte *coords) const
{
    static const char *fnName = "glTexCoord1bvOES";

    beforeCommand(fnName, _api.glTexCoord1bv);
    _api.glTexCoord1bv(coords);
    afterCommand(fnName);
}

// Calls glTexCoord2bOES().
void OESByteCoordinatesAPI::texCoord2B(GLbyte s, GLbyte t) const
{
    static const char *fnName = "glTexCoord2bOES";

    beforeCommand(fnName, _api.glTexCoord2b);
    _api.glTexCoord2b(s, t);
    afterCommand(fnName);
}

// Calls glTexCoord2bvOES().
void OESByteCoordinatesAPI::texCoord2BV(const GLbyte *coords) const
{
    static const char *fnName = "glTexCoord2bvOES";

    beforeCommand(fnName, _api.glTexCoord2bv);
    _api.glTexCoord2bv(coords);
    afterCommand(fnName);
}

// Calls glTexCoord3bOES().
void OESByteCoordinatesAPI::texCoord3B(GLbyte s, GLbyte t, GLbyte r) const
{
    static const char *fnName = "glTexCoord3bOES";

    beforeCommand(fnName, _api.glTexCoord3b);
    _api.glTexCoord3b(s, t, r);
    afterCommand(fnName);
}

// Calls glTexCoord3bvOES().
void OESByteCoordinatesAPI::texCoord3BV(const GLbyte *coords) const
{
    static const char *fnName = "glTexCoord3bvOES";

    beforeCommand(fnName, _api.glTexCoord3bv);
    _api.glTexCoord3bv(coords);
    afterCommand(fnName);
}

// Calls glTexCoord4bOES().
void OESByteCoordinatesAPI::texCoord4B(GLbyte s, GLbyte t, GLbyte r, GLbyte q) const
{
    static const char *fnName = "glTexCoord4bOES";

    beforeCommand(fnName, _api.glTexCoord4b);
    _api.glTexCoord4b(s, t, r, q);
    afterCommand(fnName);
}

// Calls glTexCoord4bvOES().
void OESByteCoordinatesAPI::texCoord4BV(const GLbyte *coords) const
{
    static const char *fnName = "glTexCoord4bvOES";

    beforeCommand(fnName, _api.glTexCoord4bv);
    _api.glTexCoord4bv(coords);
    afterCommand(fnName);
}

// Calls glVertex2bOES().
void OESByteCoordinatesAPI::vertex2B(GLbyte x, GLbyte y) const
{
    static const char *fnName = "glVertex2bOES";

    beforeCommand(fnName, _api.glVertex2b);
    _api.glVertex2b(x, y);
    afterCommand(fnName);
}

// Calls glVertex2bvOES().
void OESByteCoordinatesAPI::vertex2BV(const GLbyte *coords) const
{
    static const char *fnName = "glVertex2bvOES";

    beforeCommand(fnName, _api.glVertex2bv);
    _api.glVertex2bv(coords);
    afterCommand(fnName);
}

// Calls glVertex3bOES().
void OESByteCoordinatesAPI::vertex3B(GLbyte x, GLbyte y, GLbyte z) const
{
    static const char *fnName = "glVertex3bOES";

    beforeCommand(fnName, _api.glVertex3b);
    _api.glVertex3b(x, y, z);
    afterCommand(fnName);
}

// Calls glVertex3bvOES().
void OESByteCoordinatesAPI::vertex3BV(const GLbyte *coords) const
{
    static const char *fnName = "glVertex3bvOES";

    beforeCommand(fnName, _api.glVertex3bv);
    _api.glVertex3bv(coords);
    afterCommand(fnName);
}

// Calls glVertex4bOES().
void OESByteCoordinatesAPI::vertex4B(GLbyte x, GLbyte y, GLbyte z, GLbyte w) const
{
    static const char *fnName = "glVertex4bOES";

    beforeCommand(fnName, _api.glVertex4b);
    _api.glVertex4b(x, y, z, w);
    afterCommand(fnName);
}

// Calls glVertex4bvOES().
void OESByteCoordinatesAPI::vertex4BV(const GLbyte *coords) const
{
    static const char *fnName = "glVertex4bvOES";

    beforeCommand(fnName, _api.glVertex4bv);
    _api.glVertex4bv(coords);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// OESFixedPointAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_OES_fixed_point extension.
OESFixedPointAPI::OESFixedPointAPI() :
    BaseExtension("GL_OES_fixed_point")
{
}

// Grant read-only access to the underlying function pointers.
const OESFixedPoint &OESFixedPointAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_OES_fixed_point entry points.
void OESFixedPointAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAccumxOES().
void OESFixedPointAPI::accumx(GLenum op, GLfixed value) const
{
    static const char *fnName = "glAccumxOES";

    beforeCommand(fnName, _api.glAccumx);
    _api.glAccumx(op, value);
    afterCommand(fnName);
}

// Calls glAlphaFuncxOES().
void OESFixedPointAPI::alphaFuncx(AlphaFunction func, GLfixed ref) const
{
    static const char *fnName = "glAlphaFuncxOES";

    beforeCommand(fnName, _api.glAlphaFuncx);
    _api.glAlphaFuncx(toScalar(func), ref);
    afterCommand(fnName);
}

// Calls glBitmapxOES().
void OESFixedPointAPI::bitmapx(GLsizei width, GLsizei height, GLfixed xorig,
                               GLfixed yorig, GLfixed xmove, GLfixed ymove,
                               const GLubyte *bitmap) const
{
    static const char *fnName = "glBitmapxOES";

    beforeCommand(fnName, _api.glBitmapx);
    _api.glBitmapx(width, height, xorig, yorig, xmove, ymove, bitmap);
    afterCommand(fnName);
}

// Calls glBlendColorxOES().
void OESFixedPointAPI::blendColorx(GLfixed red, GLfixed green, GLfixed blue,
                                   GLfixed alpha) const
{
    static const char *fnName = "glBlendColorxOES";

    beforeCommand(fnName, _api.glBlendColorx);
    _api.glBlendColorx(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glClearAccumxOES().
void OESFixedPointAPI::clearAccumx(GLfixed red, GLfixed green, GLfixed blue,
                                   GLfixed alpha) const
{
    static const char *fnName = "glClearAccumxOES";

    beforeCommand(fnName, _api.glClearAccumx);
    _api.glClearAccumx(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glClearColorxOES().
void OESFixedPointAPI::clearColorx(GLfixed red, GLfixed green, GLfixed blue,
                                   GLfixed alpha) const
{
    static const char *fnName = "glClearColorxOES";

    beforeCommand(fnName, _api.glClearColorx);
    _api.glClearColorx(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glClearDepthxOES().
void OESFixedPointAPI::clearDepthx(GLfixed depth) const
{
    static const char *fnName = "glClearDepthxOES";

    beforeCommand(fnName, _api.glClearDepthx);
    _api.glClearDepthx(depth);
    afterCommand(fnName);
}

// Calls glClipPlanexOES().
void OESFixedPointAPI::clipPlanex(ClipPlaneName plane, const GLfixed *equation) const
{
    static const char *fnName = "glClipPlanexOES";

    beforeCommand(fnName, _api.glClipPlanex);
    _api.glClipPlanex(toScalar(plane), equation);
    afterCommand(fnName);
}

// Calls glColor3xOES().
void OESFixedPointAPI::color3X(GLfixed red, GLfixed green, GLfixed blue) const
{
    static const char *fnName = "glColor3xOES";

    beforeCommand(fnName, _api.glColor3x);
    _api.glColor3x(red, green, blue);
    afterCommand(fnName);
}

// Calls glColor3xvOES().
void OESFixedPointAPI::color3XV(const GLfixed *components) const
{
    static const char *fnName = "glColor3xvOES";

    beforeCommand(fnName, _api.glColor3xv);
    _api.glColor3xv(components);
    afterCommand(fnName);
}

// Calls glColor4xOES().
void OESFixedPointAPI::color4X(GLfixed red, GLfixed green, GLfixed blue,
                               GLfixed alpha) const
{
    static const char *fnName = "glColor4xOES";

    beforeCommand(fnName, _api.glColor4x);
    _api.glColor4x(red, green, blue, alpha);
    afterCommand(fnName);
}

// Calls glColor4xvOES().
void OESFixedPointAPI::color4XV(const GLfixed *components) const
{
    static const char *fnName = "glColor4xvOES";

    beforeCommand(fnName, _api.glColor4xv);
    _api.glColor4xv(components);
    afterCommand(fnName);
}

// Calls glConvolutionParameterxOES().
void OESFixedPointAPI::convolutionParameterx(ConvolutionTargetEXT target,
                                             ConvolutionParameterEXT pname,
                                             GLfixed param) const
{
    static const char *fnName = "glConvolutionParameterxOES";

    beforeCommand(fnName, _api.glConvolutionParameterx);
    _api.glConvolutionParameterx(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glConvolutionParameterxvOES().
void OESFixedPointAPI::convolutionParameterxV(ConvolutionTargetEXT target,
                                              ConvolutionParameterEXT pname,
                                              const GLfixed *params) const
{
    static const char *fnName = "glConvolutionParameterxvOES";

    beforeCommand(fnName, _api.glConvolutionParameterxv);
    _api.glConvolutionParameterxv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glDepthRangexOES().
void OESFixedPointAPI::depthRangex(GLfixed n, GLfixed f) const
{
    static const char *fnName = "glDepthRangexOES";

    beforeCommand(fnName, _api.glDepthRangex);
    _api.glDepthRangex(n, f);
    afterCommand(fnName);
}

// Calls glEvalCoord1xOES().
void OESFixedPointAPI::evalCoord1X(GLfixed u) const
{
    static const char *fnName = "glEvalCoord1xOES";

    beforeCommand(fnName, _api.glEvalCoord1x);
    _api.glEvalCoord1x(u);
    afterCommand(fnName);
}

// Calls glEvalCoord1xvOES().
void OESFixedPointAPI::evalCoord1XV(const GLfixed *coords) const
{
    static const char *fnName = "glEvalCoord1xvOES";

    beforeCommand(fnName, _api.glEvalCoord1xv);
    _api.glEvalCoord1xv(coords);
    afterCommand(fnName);
}

// Calls glEvalCoord2xOES().
void OESFixedPointAPI::evalCoord2X(GLfixed u, GLfixed v) const
{
    static const char *fnName = "glEvalCoord2xOES";

    beforeCommand(fnName, _api.glEvalCoord2x);
    _api.glEvalCoord2x(u, v);
    afterCommand(fnName);
}

// Calls glEvalCoord2xvOES().
void OESFixedPointAPI::evalCoord2XV(const GLfixed *coords) const
{
    static const char *fnName = "glEvalCoord2xvOES";

    beforeCommand(fnName, _api.glEvalCoord2xv);
    _api.glEvalCoord2xv(coords);
    afterCommand(fnName);
}

// Calls glFeedbackBufferxOES().
void OESFixedPointAPI::feedbackBufferx(GLsizei n, GLenum type,
                                       const GLfixed *buffer) const
{
    static const char *fnName = "glFeedbackBufferxOES";

    beforeCommand(fnName, _api.glFeedbackBufferx);
    _api.glFeedbackBufferx(n, type, buffer);
    afterCommand(fnName);
}

// Calls glFogxOES().
void OESFixedPointAPI::fogx(GLenum pname, GLfixed param) const
{
    static const char *fnName = "glFogxOES";

    beforeCommand(fnName, _api.glFogx);
    _api.glFogx(pname, param);
    afterCommand(fnName);
}

// Calls glFogxvOES().
void OESFixedPointAPI::fogxV(GLenum pname, const GLfixed *param) const
{
    static const char *fnName = "glFogxvOES";

    beforeCommand(fnName, _api.glFogxv);
    _api.glFogxv(pname, param);
    afterCommand(fnName);
}

// Calls glFrustumxOES().
void OESFixedPointAPI::frustumx(GLfixed l, GLfixed r, GLfixed b, GLfixed t,
                                GLfixed n, GLfixed f) const
{
    static const char *fnName = "glFrustumxOES";

    beforeCommand(fnName, _api.glFrustumx);
    _api.glFrustumx(l, r, b, t, n, f);
    afterCommand(fnName);
}

// Calls glGetClipPlanexOES().
void OESFixedPointAPI::getClipPlanex(ClipPlaneName plane, GLfixed *equation) const
{
    static const char *fnName = "glGetClipPlanexOES";

    beforeCommand(fnName, _api.glGetClipPlanex);
    _api.glGetClipPlanex(toScalar(plane), equation);
    afterCommand(fnName);
}

// Calls glGetConvolutionParameterxvOES().
void OESFixedPointAPI::getConvolutionParameterxV(GLenum target, GLenum pname,
                                                 GLfixed *params) const
{
    static const char *fnName = "glGetConvolutionParameterxvOES";

    beforeCommand(fnName, _api.glGetConvolutionParameterxv);
    _api.glGetConvolutionParameterxv(target, pname, params);
    afterCommand(fnName);
}

// Calls glGetFixedvOES().
void OESFixedPointAPI::getFixedv(GetPName pname, GLfixed *params) const
{
    static const char *fnName = "glGetFixedvOES";

    beforeCommand(fnName, _api.glGetFixedv);
    _api.glGetFixedv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetHistogramParameterxvOES().
void OESFixedPointAPI::getHistogramParameterxV(HistogramTargetEXT target,
                                               GetHistogramParameterPNameEXT pname,
                                               GLfixed *params) const
{
    static const char *fnName = "glGetHistogramParameterxvOES";

    beforeCommand(fnName, _api.glGetHistogramParameterxv);
    _api.glGetHistogramParameterxv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetLightxOES().
void OESFixedPointAPI::getLightx(LightName light, GLenum pname, GLfixed *params) const
{
    static const char *fnName = "glGetLightxOES";

    beforeCommand(fnName, _api.glGetLightx);
    _api.glGetLightx(toScalar(light), pname, params);
    afterCommand(fnName);
}

// Calls glGetMapxvOES().
void OESFixedPointAPI::getMapxV(MapTarget target, GLenum query, GLfixed *v) const
{
    static const char *fnName = "glGetMapxvOES";

    beforeCommand(fnName, _api.glGetMapxv);
    _api.glGetMapxv(toScalar(target), query, v);
    afterCommand(fnName);
}

// Calls glGetMaterialxOES().
void OESFixedPointAPI::getMaterialx(MaterialFace face, GLenum pname,
                                    GLfixed param) const
{
    static const char *fnName = "glGetMaterialxOES";

    beforeCommand(fnName, _api.glGetMaterialx);
    _api.glGetMaterialx(toScalar(face), pname, param);
    afterCommand(fnName);
}

// Calls glGetPixelMapxv().
void OESFixedPointAPI::getPixelMapxV(GLenum map, GLint size, GLfixed *values) const
{
    static const char *fnName = "glGetPixelMapxv";

    beforeCommand(fnName, _api.glGetPixelMapxv);
    _api.glGetPixelMapxv(map, size, values);
    afterCommand(fnName);
}

// Calls glGetTexEnvxvOES().
void OESFixedPointAPI::getTexEnvxV(GLenum target, GLenum pname, GLfixed *params) const
{
    static const char *fnName = "glGetTexEnvxvOES";

    beforeCommand(fnName, _api.glGetTexEnvxv);
    _api.glGetTexEnvxv(target, pname, params);
    afterCommand(fnName);
}

// Calls glGetTexGenxvOES().
void OESFixedPointAPI::getTexGenxV(GLenum coord, TextureGenParameter pname,
                                   GLfixed *params) const
{
    static const char *fnName = "glGetTexGenxvOES";

    beforeCommand(fnName, _api.glGetTexGenxv);
    _api.glGetTexGenxv(coord, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetTexLevelParameterxvOES().
void OESFixedPointAPI::getTexLevelParameterxV(TextureTarget target, GLint level,
                                              GetTextureParameter pname,
                                              GLfixed *params) const
{
    static const char *fnName = "glGetTexLevelParameterxvOES";

    beforeCommand(fnName, _api.glGetTexLevelParameterxv);
    _api.glGetTexLevelParameterxv(toScalar(target), level, toScalar(pname),
                                  params);
    afterCommand(fnName);
}

// Calls glGetTexParameterxvOES().
void OESFixedPointAPI::getTexParameterxV(TextureTarget target,
                                         GetTextureParameter pname,
                                         GLfixed *params) const
{
    static const char *fnName = "glGetTexParameterxvOES";

    beforeCommand(fnName, _api.glGetTexParameterxv);
    _api.glGetTexParameterxv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glIndexxOES().
void OESFixedPointAPI::indexx(GLfixed component) const
{
    static const char *fnName = "glIndexxOES";

    beforeCommand(fnName, _api.glIndexx);
    _api.glIndexx(component);
    afterCommand(fnName);
}

// Calls glIndexxvOES().
void OESFixedPointAPI::indexxV(const GLfixed *component) const
{
    static const char *fnName = "glIndexxvOES";

    beforeCommand(fnName, _api.glIndexxv);
    _api.glIndexxv(component);
    afterCommand(fnName);
}

// Calls glLightModelxOES().
void OESFixedPointAPI::lightModelx(LightModelParameter pname, GLfixed param) const
{
    static const char *fnName = "glLightModelxOES";

    beforeCommand(fnName, _api.glLightModelx);
    _api.glLightModelx(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glLightModelxvOES().
void OESFixedPointAPI::lightModelxV(LightModelParameter pname,
                                    const GLfixed *param) const
{
    static const char *fnName = "glLightModelxvOES";

    beforeCommand(fnName, _api.glLightModelxv);
    _api.glLightModelxv(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glLightxOES().
void OESFixedPointAPI::lightx(LightName light, GLenum pname, GLfixed param) const
{
    static const char *fnName = "glLightxOES";

    beforeCommand(fnName, _api.glLightx);
    _api.glLightx(toScalar(light), pname, param);
    afterCommand(fnName);
}

// Calls glLightxvOES().
void OESFixedPointAPI::lightxV(LightName light, GLenum pname,
                               const GLfixed *params) const
{
    static const char *fnName = "glLightxvOES";

    beforeCommand(fnName, _api.glLightxv);
    _api.glLightxv(toScalar(light), pname, params);
    afterCommand(fnName);
}

// Calls glLineWidthxOES().
void OESFixedPointAPI::lineWidthx(GLfixed width) const
{
    static const char *fnName = "glLineWidthxOES";

    beforeCommand(fnName, _api.glLineWidthx);
    _api.glLineWidthx(width);
    afterCommand(fnName);
}

// Calls glLoadMatrixxOES().
void OESFixedPointAPI::loadMatrixx(const GLfixed *m) const
{
    static const char *fnName = "glLoadMatrixxOES";

    beforeCommand(fnName, _api.glLoadMatrixx);
    _api.glLoadMatrixx(m);
    afterCommand(fnName);
}

// Calls glLoadTransposeMatrixxOES().
void OESFixedPointAPI::loadTransposeMatrixx(const GLfixed *m) const
{
    static const char *fnName = "glLoadTransposeMatrixxOES";

    beforeCommand(fnName, _api.glLoadTransposeMatrixx);
    _api.glLoadTransposeMatrixx(m);
    afterCommand(fnName);
}

// Calls glMap1xOES().
void OESFixedPointAPI::map1X(MapTarget target, GLfixed u1, GLfixed u2,
                             GLint stride, GLint order, GLfixed points) const
{
    static const char *fnName = "glMap1xOES";

    beforeCommand(fnName, _api.glMap1x);
    _api.glMap1x(toScalar(target), u1, u2, stride, order, points);
    afterCommand(fnName);
}

// Calls glMap2xOES().
void OESFixedPointAPI::map2X(MapTarget target, GLfixed u1, GLfixed u2,
                             GLint ustride, GLint uorder, GLfixed v1, GLfixed v2,
                             GLint vstride, GLint vorder, GLfixed points) const
{
    static const char *fnName = "glMap2xOES";

    beforeCommand(fnName, _api.glMap2x);
    _api.glMap2x(toScalar(target), u1, u2, ustride, uorder, v1, v2, vstride,
                 vorder, points);
    afterCommand(fnName);
}

// Calls glMapGrid1xOES().
void OESFixedPointAPI::mapGRID1X(GLint n, GLfixed u1, GLfixed u2) const
{
    static const char *fnName = "glMapGrid1xOES";

    beforeCommand(fnName, _api.glMapGrid1x);
    _api.glMapGrid1x(n, u1, u2);
    afterCommand(fnName);
}

// Calls glMapGrid2xOES().
void OESFixedPointAPI::mapGRID2X(GLint n, GLfixed u1, GLfixed u2, GLfixed v1,
                                 GLfixed v2) const
{
    static const char *fnName = "glMapGrid2xOES";

    beforeCommand(fnName, _api.glMapGrid2x);
    _api.glMapGrid2x(n, u1, u2, v1, v2);
    afterCommand(fnName);
}

// Calls glMaterialxOES().
void OESFixedPointAPI::materialx(MaterialFace face, GLenum pname, GLfixed param) const
{
    static const char *fnName = "glMaterialxOES";

    beforeCommand(fnName, _api.glMaterialx);
    _api.glMaterialx(toScalar(face), pname, param);
    afterCommand(fnName);
}

// Calls glMaterialxvOES().
void OESFixedPointAPI::materialxV(MaterialFace face, GLenum pname,
                                  const GLfixed *param) const
{
    static const char *fnName = "glMaterialxvOES";

    beforeCommand(fnName, _api.glMaterialxv);
    _api.glMaterialxv(toScalar(face), pname, param);
    afterCommand(fnName);
}

// Calls glMultMatrixxOES().
void OESFixedPointAPI::multMatrixx(const GLfixed *m) const
{
    static const char *fnName = "glMultMatrixxOES";

    beforeCommand(fnName, _api.glMultMatrixx);
    _api.glMultMatrixx(m);
    afterCommand(fnName);
}

// Calls glMultTransposeMatrixxOES().
void OESFixedPointAPI::multTransposeMatrixx(const GLfixed *m) const
{
    static const char *fnName = "glMultTransposeMatrixxOES";

    beforeCommand(fnName, _api.glMultTransposeMatrixx);
    _api.glMultTransposeMatrixx(m);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1xOES().
void OESFixedPointAPI::multiTexCoord1X(TextureUnit texture, GLfixed s) const
{
    static const char *fnName = "glMultiTexCoord1xOES";

    beforeCommand(fnName, _api.glMultiTexCoord1x);
    _api.glMultiTexCoord1x(toScalar(texture), s);
    afterCommand(fnName);
}

// Calls glMultiTexCoord1xvOES().
void OESFixedPointAPI::multiTexCoord1XV(TextureUnit texture,
                                        const GLfixed *coords) const
{
    static const char *fnName = "glMultiTexCoord1xvOES";

    beforeCommand(fnName, _api.glMultiTexCoord1xv);
    _api.glMultiTexCoord1xv(toScalar(texture), coords);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2xOES().
void OESFixedPointAPI::multiTexCoord2X(TextureUnit texture, GLfixed s, GLfixed t) const
{
    static const char *fnName = "glMultiTexCoord2xOES";

    beforeCommand(fnName, _api.glMultiTexCoord2x);
    _api.glMultiTexCoord2x(toScalar(texture), s, t);
    afterCommand(fnName);
}

// Calls glMultiTexCoord2xvOES().
void OESFixedPointAPI::multiTexCoord2XV(TextureUnit texture,
                                        const GLfixed *coords) const
{
    static const char *fnName = "glMultiTexCoord2xvOES";

    beforeCommand(fnName, _api.glMultiTexCoord2xv);
    _api.glMultiTexCoord2xv(toScalar(texture), coords);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3xOES().
void OESFixedPointAPI::multiTexCoord3X(TextureUnit texture, GLfixed s, GLfixed t,
                                       GLfixed r) const
{
    static const char *fnName = "glMultiTexCoord3xOES";

    beforeCommand(fnName, _api.glMultiTexCoord3x);
    _api.glMultiTexCoord3x(toScalar(texture), s, t, r);
    afterCommand(fnName);
}

// Calls glMultiTexCoord3xvOES().
void OESFixedPointAPI::multiTexCoord3XV(TextureUnit texture,
                                        const GLfixed *coords) const
{
    static const char *fnName = "glMultiTexCoord3xvOES";

    beforeCommand(fnName, _api.glMultiTexCoord3xv);
    _api.glMultiTexCoord3xv(toScalar(texture), coords);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4xOES().
void OESFixedPointAPI::multiTexCoord4X(TextureUnit texture, GLfixed s, GLfixed t,
                                       GLfixed r, GLfixed q) const
{
    static const char *fnName = "glMultiTexCoord4xOES";

    beforeCommand(fnName, _api.glMultiTexCoord4x);
    _api.glMultiTexCoord4x(toScalar(texture), s, t, r, q);
    afterCommand(fnName);
}

// Calls glMultiTexCoord4xvOES().
void OESFixedPointAPI::multiTexCoord4XV(TextureUnit texture,
                                        const GLfixed *coords) const
{
    static const char *fnName = "glMultiTexCoord4xvOES";

    beforeCommand(fnName, _api.glMultiTexCoord4xv);
    _api.glMultiTexCoord4xv(toScalar(texture), coords);
    afterCommand(fnName);
}

// Calls glNormal3xOES().
void OESFixedPointAPI::normal3X(GLfixed nx, GLfixed ny, GLfixed nz) const
{
    static const char *fnName = "glNormal3xOES";

    beforeCommand(fnName, _api.glNormal3x);
    _api.glNormal3x(nx, ny, nz);
    afterCommand(fnName);
}

// Calls glNormal3xvOES().
void OESFixedPointAPI::normal3XV(const GLfixed *coords) const
{
    static const char *fnName = "glNormal3xvOES";

    beforeCommand(fnName, _api.glNormal3xv);
    _api.glNormal3xv(coords);
    afterCommand(fnName);
}

// Calls glOrthoxOES().
void OESFixedPointAPI::orthox(GLfixed l, GLfixed r, GLfixed b, GLfixed t,
                              GLfixed n, GLfixed f) const
{
    static const char *fnName = "glOrthoxOES";

    beforeCommand(fnName, _api.glOrthox);
    _api.glOrthox(l, r, b, t, n, f);
    afterCommand(fnName);
}

// Calls glPassThroughxOES().
void OESFixedPointAPI::passThroughx(GLfixed token) const
{
    static const char *fnName = "glPassThroughxOES";

    beforeCommand(fnName, _api.glPassThroughx);
    _api.glPassThroughx(token);
    afterCommand(fnName);
}

// Calls glPixelMapx().
void OESFixedPointAPI::pixelMapx(GLenum map, GLint size, const GLfixed *values) const
{
    static const char *fnName = "glPixelMapx";

    beforeCommand(fnName, _api.glPixelMapx);
    _api.glPixelMapx(map, size, values);
    afterCommand(fnName);
}

// Calls glPixelStorex().
void OESFixedPointAPI::pixelStorex(PixelStoreParameter pname, GLfixed param) const
{
    static const char *fnName = "glPixelStorex";

    beforeCommand(fnName, _api.glPixelStorex);
    _api.glPixelStorex(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPixelTransferxOES().
void OESFixedPointAPI::pixelTransferx(PixelTransferParameter pname,
                                      GLfixed param) const
{
    static const char *fnName = "glPixelTransferxOES";

    beforeCommand(fnName, _api.glPixelTransferx);
    _api.glPixelTransferx(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPixelZoomxOES().
void OESFixedPointAPI::pixelZoomx(GLfixed xfactor, GLfixed yfactor) const
{
    static const char *fnName = "glPixelZoomxOES";

    beforeCommand(fnName, _api.glPixelZoomx);
    _api.glPixelZoomx(xfactor, yfactor);
    afterCommand(fnName);
}

// Calls glPointParameterxvOES().
void OESFixedPointAPI::pointParameterxV(PointParameterNameARB pname,
                                        const GLfixed *params) const
{
    static const char *fnName = "glPointParameterxvOES";

    beforeCommand(fnName, _api.glPointParameterxv);
    _api.glPointParameterxv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glPointSizexOES().
void OESFixedPointAPI::pointSizex(GLfixed size) const
{
    static const char *fnName = "glPointSizexOES";

    beforeCommand(fnName, _api.glPointSizex);
    _api.glPointSizex(size);
    afterCommand(fnName);
}

// Calls glPolygonOffsetxOES().
void OESFixedPointAPI::polygonOffsetx(GLfixed factor, GLfixed units) const
{
    static const char *fnName = "glPolygonOffsetxOES";

    beforeCommand(fnName, _api.glPolygonOffsetx);
    _api.glPolygonOffsetx(factor, units);
    afterCommand(fnName);
}

// Calls glPrioritizeTexturesxOES().
void OESFixedPointAPI::prioritizeTexturesx(GLsizei n,
                                           const TextureName *textures,
                                           const GLfixed *priorities) const
{
    static const char *fnName = "glPrioritizeTexturesxOES";

    beforeCommand(fnName, _api.glPrioritizeTexturesx);
    _api.glPrioritizeTexturesx(n, reinterpret_cast<const GLuint *>(textures),
                               priorities);
    afterCommand(fnName);
}

// Calls glRasterPos2xOES().
void OESFixedPointAPI::rasterPOS2X(GLfixed x, GLfixed y) const
{
    static const char *fnName = "glRasterPos2xOES";

    beforeCommand(fnName, _api.glRasterPos2x);
    _api.glRasterPos2x(x, y);
    afterCommand(fnName);
}

// Calls glRasterPos2xvOES().
void OESFixedPointAPI::rasterPOS2XV(const GLfixed *coords) const
{
    static const char *fnName = "glRasterPos2xvOES";

    beforeCommand(fnName, _api.glRasterPos2xv);
    _api.glRasterPos2xv(coords);
    afterCommand(fnName);
}

// Calls glRasterPos3xOES().
void OESFixedPointAPI::rasterPOS3X(GLfixed x, GLfixed y, GLfixed z) const
{
    static const char *fnName = "glRasterPos3xOES";

    beforeCommand(fnName, _api.glRasterPos3x);
    _api.glRasterPos3x(x, y, z);
    afterCommand(fnName);
}

// Calls glRasterPos3xvOES().
void OESFixedPointAPI::rasterPOS3XV(const GLfixed *coords) const
{
    static const char *fnName = "glRasterPos3xvOES";

    beforeCommand(fnName, _api.glRasterPos3xv);
    _api.glRasterPos3xv(coords);
    afterCommand(fnName);
}

// Calls glRasterPos4xOES().
void OESFixedPointAPI::rasterPOS4X(GLfixed x, GLfixed y, GLfixed z, GLfixed w) const
{
    static const char *fnName = "glRasterPos4xOES";

    beforeCommand(fnName, _api.glRasterPos4x);
    _api.glRasterPos4x(x, y, z, w);
    afterCommand(fnName);
}

// Calls glRasterPos4xvOES().
void OESFixedPointAPI::rasterPOS4XV(const GLfixed *coords) const
{
    static const char *fnName = "glRasterPos4xvOES";

    beforeCommand(fnName, _api.glRasterPos4xv);
    _api.glRasterPos4xv(coords);
    afterCommand(fnName);
}

// Calls glRectxOES().
void OESFixedPointAPI::rectx(GLfixed x1, GLfixed y1, GLfixed x2, GLfixed y2) const
{
    static const char *fnName = "glRectxOES";

    beforeCommand(fnName, _api.glRectx);
    _api.glRectx(x1, y1, x2, y2);
    afterCommand(fnName);
}

// Calls glRectxvOES().
void OESFixedPointAPI::rectxV(const GLfixed *v1, const GLfixed *v2) const
{
    static const char *fnName = "glRectxvOES";

    beforeCommand(fnName, _api.glRectxv);
    _api.glRectxv(v1, v2);
    afterCommand(fnName);
}

// Calls glRotatexOES().
void OESFixedPointAPI::rotatex(GLfixed angle, GLfixed x, GLfixed y, GLfixed z) const
{
    static const char *fnName = "glRotatexOES";

    beforeCommand(fnName, _api.glRotatex);
    _api.glRotatex(angle, x, y, z);
    afterCommand(fnName);
}

// Calls glScalexOES().
void OESFixedPointAPI::scalex(GLfixed x, GLfixed y, GLfixed z) const
{
    static const char *fnName = "glScalexOES";

    beforeCommand(fnName, _api.glScalex);
    _api.glScalex(x, y, z);
    afterCommand(fnName);
}

// Calls glTexCoord1xOES().
void OESFixedPointAPI::texCoord1X(GLfixed s) const
{
    static const char *fnName = "glTexCoord1xOES";

    beforeCommand(fnName, _api.glTexCoord1x);
    _api.glTexCoord1x(s);
    afterCommand(fnName);
}

// Calls glTexCoord1xvOES().
void OESFixedPointAPI::texCoord1XV(const GLfixed *coords) const
{
    static const char *fnName = "glTexCoord1xvOES";

    beforeCommand(fnName, _api.glTexCoord1xv);
    _api.glTexCoord1xv(coords);
    afterCommand(fnName);
}

// Calls glTexCoord2xOES().
void OESFixedPointAPI::texCoord2X(GLfixed s, GLfixed t) const
{
    static const char *fnName = "glTexCoord2xOES";

    beforeCommand(fnName, _api.glTexCoord2x);
    _api.glTexCoord2x(s, t);
    afterCommand(fnName);
}

// Calls glTexCoord2xvOES().
void OESFixedPointAPI::texCoord2XV(const GLfixed *coords) const
{
    static const char *fnName = "glTexCoord2xvOES";

    beforeCommand(fnName, _api.glTexCoord2xv);
    _api.glTexCoord2xv(coords);
    afterCommand(fnName);
}

// Calls glTexCoord3xOES().
void OESFixedPointAPI::texCoord3X(GLfixed s, GLfixed t, GLfixed r) const
{
    static const char *fnName = "glTexCoord3xOES";

    beforeCommand(fnName, _api.glTexCoord3x);
    _api.glTexCoord3x(s, t, r);
    afterCommand(fnName);
}

// Calls glTexCoord3xvOES().
void OESFixedPointAPI::texCoord3XV(const GLfixed *coords) const
{
    static const char *fnName = "glTexCoord3xvOES";

    beforeCommand(fnName, _api.glTexCoord3xv);
    _api.glTexCoord3xv(coords);
    afterCommand(fnName);
}

// Calls glTexCoord4xOES().
void OESFixedPointAPI::texCoord4X(GLfixed s, GLfixed t, GLfixed r, GLfixed q) const
{
    static const char *fnName = "glTexCoord4xOES";

    beforeCommand(fnName, _api.glTexCoord4x);
    _api.glTexCoord4x(s, t, r, q);
    afterCommand(fnName);
}

// Calls glTexCoord4xvOES().
void OESFixedPointAPI::texCoord4XV(const GLfixed *coords) const
{
    static const char *fnName = "glTexCoord4xvOES";

    beforeCommand(fnName, _api.glTexCoord4xv);
    _api.glTexCoord4xv(coords);
    afterCommand(fnName);
}

// Calls glTexEnvxOES().
void OESFixedPointAPI::texEnvx(GLenum target, GLenum pname, GLfixed param) const
{
    static const char *fnName = "glTexEnvxOES";

    beforeCommand(fnName, _api.glTexEnvx);
    _api.glTexEnvx(target, pname, param);
    afterCommand(fnName);
}

// Calls glTexEnvxvOES().
void OESFixedPointAPI::texEnvxV(GLenum target, GLenum pname,
                                const GLfixed *params) const
{
    static const char *fnName = "glTexEnvxvOES";

    beforeCommand(fnName, _api.glTexEnvxv);
    _api.glTexEnvxv(target, pname, params);
    afterCommand(fnName);
}

// Calls glTexGenxOES().
void OESFixedPointAPI::texGenx(GLenum coord, TextureGenParameter pname,
                               GLfixed param) const
{
    static const char *fnName = "glTexGenxOES";

    beforeCommand(fnName, _api.glTexGenx);
    _api.glTexGenx(coord, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTexGenxvOES().
void OESFixedPointAPI::texGenxV(GLenum coord, TextureGenParameter pname,
                                const GLfixed *params) const
{
    static const char *fnName = "glTexGenxvOES";

    beforeCommand(fnName, _api.glTexGenxv);
    _api.glTexGenxv(coord, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTexParameterxOES().
void OESFixedPointAPI::texParameterx(TextureTarget target,
                                     GetTextureParameter pname, GLfixed param) const
{
    static const char *fnName = "glTexParameterxOES";

    beforeCommand(fnName, _api.glTexParameterx);
    _api.glTexParameterx(toScalar(target), toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glTexParameterxvOES().
void OESFixedPointAPI::texParameterxV(TextureTarget target,
                                      GetTextureParameter pname,
                                      const GLfixed *params) const
{
    static const char *fnName = "glTexParameterxvOES";

    beforeCommand(fnName, _api.glTexParameterxv);
    _api.glTexParameterxv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glTranslatexOES().
void OESFixedPointAPI::translatex(GLfixed x, GLfixed y, GLfixed z) const
{
    static const char *fnName = "glTranslatexOES";

    beforeCommand(fnName, _api.glTranslatex);
    _api.glTranslatex(x, y, z);
    afterCommand(fnName);
}

// Calls glVertex2xOES().
void OESFixedPointAPI::vertex2X(GLfixed x) const
{
    static const char *fnName = "glVertex2xOES";

    beforeCommand(fnName, _api.glVertex2x);
    _api.glVertex2x(x);
    afterCommand(fnName);
}

// Calls glVertex2xvOES().
void OESFixedPointAPI::vertex2XV(const GLfixed *coords) const
{
    static const char *fnName = "glVertex2xvOES";

    beforeCommand(fnName, _api.glVertex2xv);
    _api.glVertex2xv(coords);
    afterCommand(fnName);
}

// Calls glVertex3xOES().
void OESFixedPointAPI::vertex3X(GLfixed x, GLfixed y) const
{
    static const char *fnName = "glVertex3xOES";

    beforeCommand(fnName, _api.glVertex3x);
    _api.glVertex3x(x, y);
    afterCommand(fnName);
}

// Calls glVertex3xvOES().
void OESFixedPointAPI::vertex3XV(const GLfixed *coords) const
{
    static const char *fnName = "glVertex3xvOES";

    beforeCommand(fnName, _api.glVertex3xv);
    _api.glVertex3xv(coords);
    afterCommand(fnName);
}

// Calls glVertex4xOES().
void OESFixedPointAPI::vertex4X(GLfixed x, GLfixed y, GLfixed z) const
{
    static const char *fnName = "glVertex4xOES";

    beforeCommand(fnName, _api.glVertex4x);
    _api.glVertex4x(x, y, z);
    afterCommand(fnName);
}

// Calls glVertex4xvOES().
void OESFixedPointAPI::vertex4XV(const GLfixed *coords) const
{
    static const char *fnName = "glVertex4xvOES";

    beforeCommand(fnName, _api.glVertex4xv);
    _api.glVertex4xv(coords);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// OESQueryMatrixAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_OES_query_matrix extension.
OESQueryMatrixAPI::OESQueryMatrixAPI() :
    BaseExtension("GL_OES_query_matrix")
{
}

// Grant read-only access to the underlying function pointers.
const OESQueryMatrix &OESQueryMatrixAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_OES_query_matrix entry points.
void OESQueryMatrixAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glQueryMatrixxOES().
GLbitfield OESQueryMatrixAPI::queryMatrixx(GLfixed *mantissa, GLint *exponent) const
{
    static const char *fnName = "glQueryMatrixxOES";

    beforeCommand(fnName, _api.glQueryMatrixx);
    GLbitfield result = _api.glQueryMatrixx(mantissa, exponent);
    afterCommand(fnName);

    return result;
}

////////////////////////////////////////////////////////////////////////////////
// OESSinglePrecisionAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_OES_single_precision extension.
OESSinglePrecisionAPI::OESSinglePrecisionAPI() :
    BaseExtension("GL_OES_single_precision")
{
}

// Grant read-only access to the underlying function pointers.
const OESSinglePrecision &OESSinglePrecisionAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_OES_single_precision entry points.
void OESSinglePrecisionAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glClearDepthfOES().
void OESSinglePrecisionAPI::clearDepthF(GLclampf depth) const
{
    static const char *fnName = "glClearDepthfOES";

    beforeCommand(fnName, _api.glClearDepthf);
    _api.glClearDepthf(depth);
    afterCommand(fnName);
}

// Calls glClipPlanefOES().
void OESSinglePrecisionAPI::clipPlaneF(ClipPlaneName plane,
                                       const GLfloat *equation) const
{
    static const char *fnName = "glClipPlanefOES";

    beforeCommand(fnName, _api.glClipPlanef);
    _api.glClipPlanef(toScalar(plane), equation);
    afterCommand(fnName);
}

// Calls glDepthRangefOES().
void OESSinglePrecisionAPI::depthRangeF(GLclampf n, GLclampf f) const
{
    static const char *fnName = "glDepthRangefOES";

    beforeCommand(fnName, _api.glDepthRangef);
    _api.glDepthRangef(n, f);
    afterCommand(fnName);
}

// Calls glFrustumfOES().
void OESSinglePrecisionAPI::frustumF(GLfloat l, GLfloat r, GLfloat b, GLfloat t,
                                     GLfloat n, GLfloat f) const
{
    static const char *fnName = "glFrustumfOES";

    beforeCommand(fnName, _api.glFrustumf);
    _api.glFrustumf(l, r, b, t, n, f);
    afterCommand(fnName);
}

// Calls glGetClipPlanefOES().
void OESSinglePrecisionAPI::getClipPlaneF(ClipPlaneName plane, GLfloat *equation) const
{
    static const char *fnName = "glGetClipPlanefOES";

    beforeCommand(fnName, _api.glGetClipPlanef);
    _api.glGetClipPlanef(toScalar(plane), equation);
    afterCommand(fnName);
}

// Calls glOrthofOES().
void OESSinglePrecisionAPI::orthoF(GLfloat l, GLfloat r, GLfloat b, GLfloat t,
                                   GLfloat n, GLfloat f) const
{
    static const char *fnName = "glOrthofOES";

    beforeCommand(fnName, _api.glOrthof);
    _api.glOrthof(l, r, b, t, n, f);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// OvrMultiviewAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_OVR_multiview extension.
OvrMultiviewAPI::OvrMultiviewAPI() :
    BaseExtension("GL_OVR_multiview")
{
}

// Grant read-only access to the underlying function pointers.
const OvrMultiview &OvrMultiviewAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_OVR_multiview entry points.
void OvrMultiviewAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFramebufferTextureMultiviewOVR().
void OvrMultiviewAPI::framebufferTextureMultiviewOvr(FramebufferTarget target,
                                                     FramebufferAttachment attachment,
                                                     TextureName texture,
                                                     GLint level,
                                                     GLint baseViewIndex,
                                                     GLsizei numViews) const
{
    static const char *fnName = "glFramebufferTextureMultiviewOVR";

    beforeCommand(fnName, _api.glFramebufferTextureMultiviewOVR);
    _api.glFramebufferTextureMultiviewOVR(toScalar(target), toScalar(attachment),
                                          texture.ID, level, baseViewIndex,
                                          numViews);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// PGIMiscHintsAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_PGI_misc_hints extension.
PGIMiscHintsAPI::PGIMiscHintsAPI() :
    BaseExtension("GL_PGI_misc_hints")
{
}

// Grant read-only access to the underlying function pointers.
const PGIMiscHints &PGIMiscHintsAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_PGI_misc_hints entry points.
void PGIMiscHintsAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glHintPGI().
void PGIMiscHintsAPI::hint(HintTargetPGI target, GLint mode) const
{
    static const char *fnName = "glHintPGI";

    beforeCommand(fnName, _api.glHint);
    _api.glHint(toScalar(target), mode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISDetailTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_detail_texture extension.
SGISDetailTextureAPI::SGISDetailTextureAPI() :
    BaseExtension("GL_SGIS_detail_texture")
{
}

// Grant read-only access to the underlying function pointers.
const SGISDetailTexture &SGISDetailTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_detail_texture entry points.
void SGISDetailTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDetailTexFuncSGIS().
void SGISDetailTextureAPI::detailTexFunc(TextureTarget target, GLsizei n,
                                         const GLfloat *points) const
{
    static const char *fnName = "glDetailTexFuncSGIS";

    beforeCommand(fnName, _api.glDetailTexFunc);
    _api.glDetailTexFunc(toScalar(target), n, points);
    afterCommand(fnName);
}

// Calls glGetDetailTexFuncSGIS().
void SGISDetailTextureAPI::getDetailTexFunc(TextureTarget target,
                                            GLfloat *points) const
{
    static const char *fnName = "glGetDetailTexFuncSGIS";

    beforeCommand(fnName, _api.glGetDetailTexFunc);
    _api.glGetDetailTexFunc(toScalar(target), points);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISFogFunctionAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_fog_function extension.
SGISFogFunctionAPI::SGISFogFunctionAPI() :
    BaseExtension("GL_SGIS_fog_function")
{
}

// Grant read-only access to the underlying function pointers.
const SGISFogFunction &SGISFogFunctionAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_fog_function entry points.
void SGISFogFunctionAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFogFuncSGIS().
void SGISFogFunctionAPI::fogFunc(GLsizei n, const GLfloat *points) const
{
    static const char *fnName = "glFogFuncSGIS";

    beforeCommand(fnName, _api.glFogFunc);
    _api.glFogFunc(n, points);
    afterCommand(fnName);
}

// Calls glGetFogFuncSGIS().
void SGISFogFunctionAPI::getFogFunc(GLfloat *points) const
{
    static const char *fnName = "glGetFogFuncSGIS";

    beforeCommand(fnName, _api.glGetFogFunc);
    _api.glGetFogFunc(points);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISMultisampleAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_multisample extension.
SGISMultisampleAPI::SGISMultisampleAPI() :
    BaseExtension("GL_SGIS_multisample")
{
}

// Grant read-only access to the underlying function pointers.
const SGISMultisample &SGISMultisampleAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_multisample entry points.
void SGISMultisampleAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glSampleMaskSGIS().
void SGISMultisampleAPI::sampleMask(GLclampf value, Boolean invert) const
{
    static const char *fnName = "glSampleMaskSGIS";

    beforeCommand(fnName, _api.glSampleMask);
    _api.glSampleMask(value, toScalar(invert));
    afterCommand(fnName);
}

// Calls glSamplePatternSGIS().
void SGISMultisampleAPI::samplePattern(SamplePatternSGIS pattern) const
{
    static const char *fnName = "glSamplePatternSGIS";

    beforeCommand(fnName, _api.glSamplePattern);
    _api.glSamplePattern(toScalar(pattern));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISPixelTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_pixel_texture extension.
SGISPixelTextureAPI::SGISPixelTextureAPI() :
    BaseExtension("GL_SGIS_pixel_texture")
{
}

// Grant read-only access to the underlying function pointers.
const SGISPixelTexture &SGISPixelTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_pixel_texture entry points.
void SGISPixelTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetPixelTexGenParameterfvSGIS().
void SGISPixelTextureAPI::getPixelTexGenParameterFV(PixelTexGenParameterNameSGIS pname,
                                                    GLfloat *params) const
{
    static const char *fnName = "glGetPixelTexGenParameterfvSGIS";

    beforeCommand(fnName, _api.glGetPixelTexGenParameterfv);
    _api.glGetPixelTexGenParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetPixelTexGenParameterivSGIS().
void SGISPixelTextureAPI::getPixelTexGenParameterIV(PixelTexGenParameterNameSGIS pname,
                                                    GLint *params) const
{
    static const char *fnName = "glGetPixelTexGenParameterivSGIS";

    beforeCommand(fnName, _api.glGetPixelTexGenParameteriv);
    _api.glGetPixelTexGenParameteriv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glPixelTexGenParameterfSGIS().
void SGISPixelTextureAPI::pixelTexGenParameterF(PixelTexGenParameterNameSGIS pname,
                                                GLfloat param) const
{
    static const char *fnName = "glPixelTexGenParameterfSGIS";

    beforeCommand(fnName, _api.glPixelTexGenParameterf);
    _api.glPixelTexGenParameterf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPixelTexGenParameterfvSGIS().
void SGISPixelTextureAPI::pixelTexGenParameterFV(PixelTexGenParameterNameSGIS pname,
                                                 const GLfloat *params) const
{
    static const char *fnName = "glPixelTexGenParameterfvSGIS";

    beforeCommand(fnName, _api.glPixelTexGenParameterfv);
    _api.glPixelTexGenParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glPixelTexGenParameteriSGIS().
void SGISPixelTextureAPI::pixelTexGenParameterI(PixelTexGenParameterNameSGIS pname,
                                                GLint param) const
{
    static const char *fnName = "glPixelTexGenParameteriSGIS";

    beforeCommand(fnName, _api.glPixelTexGenParameteri);
    _api.glPixelTexGenParameteri(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPixelTexGenParameterivSGIS().
void SGISPixelTextureAPI::pixelTexGenParameterIV(PixelTexGenParameterNameSGIS pname,
                                                 const GLint *params) const
{
    static const char *fnName = "glPixelTexGenParameterivSGIS";

    beforeCommand(fnName, _api.glPixelTexGenParameteriv);
    _api.glPixelTexGenParameteriv(toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISPointParametersAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_point_parameters extension.
SGISPointParametersAPI::SGISPointParametersAPI() :
    BaseExtension("GL_SGIS_point_parameters")
{
}

// Grant read-only access to the underlying function pointers.
const SGISPointParameters &SGISPointParametersAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_point_parameters entry points.
void SGISPointParametersAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPointParameterfSGIS().
void SGISPointParametersAPI::pointParameterF(PointParameterNameARB pname,
                                             GLfloat param) const
{
    static const char *fnName = "glPointParameterfSGIS";

    beforeCommand(fnName, _api.glPointParameterf);
    _api.glPointParameterf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glPointParameterfvSGIS().
void SGISPointParametersAPI::pointParameterFV(PointParameterNameARB pname,
                                              const GLfloat *params) const
{
    static const char *fnName = "glPointParameterfvSGIS";

    beforeCommand(fnName, _api.glPointParameterfv);
    _api.glPointParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISSharpenTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_sharpen_texture extension.
SGISSharpenTextureAPI::SGISSharpenTextureAPI() :
    BaseExtension("GL_SGIS_sharpen_texture")
{
}

// Grant read-only access to the underlying function pointers.
const SGISSharpenTexture &SGISSharpenTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_sharpen_texture entry points.
void SGISSharpenTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetSharpenTexFuncSGIS().
void SGISSharpenTextureAPI::getSharpenTexFunc(TextureTarget target,
                                              GLfloat *points) const
{
    static const char *fnName = "glGetSharpenTexFuncSGIS";

    beforeCommand(fnName, _api.glGetSharpenTexFunc);
    _api.glGetSharpenTexFunc(toScalar(target), points);
    afterCommand(fnName);
}

// Calls glSharpenTexFuncSGIS().
void SGISSharpenTextureAPI::sharpenTexFunc(TextureTarget target, GLsizei n,
                                           const GLfloat *points) const
{
    static const char *fnName = "glSharpenTexFuncSGIS";

    beforeCommand(fnName, _api.glSharpenTexFunc);
    _api.glSharpenTexFunc(toScalar(target), n, points);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISTEXTURE4DAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_texture4D extension.
SGISTEXTURE4DAPI::SGISTEXTURE4DAPI() :
    BaseExtension("GL_SGIS_texture4D")
{
}

// Grant read-only access to the underlying function pointers.
const SGISTEXTURE4D &SGISTEXTURE4DAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_texture4D entry points.
void SGISTEXTURE4DAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTexImage4DSGIS().
void SGISTEXTURE4DAPI::texImage4D(TextureTarget target, GLint level,
                                  InternalFormat internalformat, GLsizei width,
                                  GLsizei height, GLsizei depth, GLsizei size4d,
                                  GLint border, PixelFormat format,
                                  PixelType type, const void *pixels) const
{
    static const char *fnName = "glTexImage4DSGIS";

    beforeCommand(fnName, _api.glTexImage4D);
    _api.glTexImage4D(toScalar(target), level, toScalar(internalformat), width,
                      height, depth, size4d, border, toScalar(format),
                      toScalar(type), pixels);
    afterCommand(fnName);
}

// Calls glTexSubImage4DSGIS().
void SGISTEXTURE4DAPI::texSubImage4D(TextureTarget target, GLint level,
                                     GLint xoffset, GLint yoffset, GLint zoffset,
                                     GLint woffset, GLsizei width,
                                     GLsizei height, GLsizei depth,
                                     GLsizei size4d, PixelFormat format,
                                     PixelType type, const void *pixels) const
{
    static const char *fnName = "glTexSubImage4DSGIS";

    beforeCommand(fnName, _api.glTexSubImage4D);
    _api.glTexSubImage4D(toScalar(target), level, xoffset, yoffset, zoffset,
                         woffset, width, height, depth, size4d, toScalar(format),
                         toScalar(type), pixels);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISTextureColorMaskAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_texture_color_mask extension.
SGISTextureColorMaskAPI::SGISTextureColorMaskAPI() :
    BaseExtension("GL_SGIS_texture_color_mask")
{
}

// Grant read-only access to the underlying function pointers.
const SGISTextureColorMask &SGISTextureColorMaskAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_texture_color_mask entry points.
void SGISTextureColorMaskAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTextureColorMaskSGIS().
void SGISTextureColorMaskAPI::textureColorMask(Boolean red, Boolean green,
                                               Boolean blue, Boolean alpha) const
{
    static const char *fnName = "glTextureColorMaskSGIS";

    beforeCommand(fnName, _api.glTextureColorMask);
    _api.glTextureColorMask(toScalar(red), toScalar(green), toScalar(blue),
                            toScalar(alpha));
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGISTextureFILTER4API Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIS_texture_filter4 extension.
SGISTextureFILTER4API::SGISTextureFILTER4API() :
    BaseExtension("GL_SGIS_texture_filter4")
{
}

// Grant read-only access to the underlying function pointers.
const SGISTextureFILTER4 &SGISTextureFILTER4API::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIS_texture_filter4 entry points.
void SGISTextureFILTER4API::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetTexFilterFuncSGIS().
void SGISTextureFILTER4API::getTexFilterFunc(TextureTarget target,
                                             TextureFilterSGIS filter,
                                             GLfloat *weights) const
{
    static const char *fnName = "glGetTexFilterFuncSGIS";

    beforeCommand(fnName, _api.glGetTexFilterFunc);
    _api.glGetTexFilterFunc(toScalar(target), toScalar(filter), weights);
    afterCommand(fnName);
}

// Calls glTexFilterFuncSGIS().
void SGISTextureFILTER4API::texFilterFunc(TextureTarget target,
                                          TextureFilterSGIS filter, GLsizei n,
                                          const GLfloat *weights) const
{
    static const char *fnName = "glTexFilterFuncSGIS";

    beforeCommand(fnName, _api.glTexFilterFunc);
    _api.glTexFilterFunc(toScalar(target), toScalar(filter), n, weights);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXAsyncAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_async extension.
SGIXAsyncAPI::SGIXAsyncAPI() :
    BaseExtension("GL_SGIX_async")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXAsync &SGIXAsyncAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_async entry points.
void SGIXAsyncAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glAsyncMarkerSGIX().
void SGIXAsyncAPI::asyncMarker(GLuint marker) const
{
    static const char *fnName = "glAsyncMarkerSGIX";

    beforeCommand(fnName, _api.glAsyncMarker);
    _api.glAsyncMarker(marker);
    afterCommand(fnName);
}

// Calls glDeleteAsyncMarkersSGIX().
void SGIXAsyncAPI::deleteAsyncMarkers(GLuint marker, GLsizei range) const
{
    static const char *fnName = "glDeleteAsyncMarkersSGIX";

    beforeCommand(fnName, _api.glDeleteAsyncMarkers);
    _api.glDeleteAsyncMarkers(marker, range);
    afterCommand(fnName);
}

// Calls glFinishAsyncSGIX().
GLint SGIXAsyncAPI::finishAsync(GLuint *markerp) const
{
    static const char *fnName = "glFinishAsyncSGIX";

    beforeCommand(fnName, _api.glFinishAsync);
    GLint result = _api.glFinishAsync(markerp);
    afterCommand(fnName);

    return result;
}

// Calls glGenAsyncMarkersSGIX().
GLuint SGIXAsyncAPI::genAsyncMarkers(GLsizei range) const
{
    static const char *fnName = "glGenAsyncMarkersSGIX";

    beforeCommand(fnName, _api.glGenAsyncMarkers);
    GLuint result = _api.glGenAsyncMarkers(range);
    afterCommand(fnName);

    return result;
}

// Calls glIsAsyncMarkerSGIX().
Boolean SGIXAsyncAPI::isAsyncMarker(GLuint marker) const
{
    static const char *fnName = "glIsAsyncMarkerSGIX";

    beforeCommand(fnName, _api.glIsAsyncMarker);
    GLboolean result = _api.glIsAsyncMarker(marker);
    afterCommand(fnName);

    return static_cast<Boolean>(result);
}

// Calls glPollAsyncSGIX().
GLint SGIXAsyncAPI::pollAsync(GLuint *markerp) const
{
    static const char *fnName = "glPollAsyncSGIX";

    beforeCommand(fnName, _api.glPollAsync);
    GLint result = _api.glPollAsync(markerp);
    afterCommand(fnName);

    return result;
}

////////////////////////////////////////////////////////////////////////////////
// SGIXFlushRasterAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_flush_raster extension.
SGIXFlushRasterAPI::SGIXFlushRasterAPI() :
    BaseExtension("GL_SGIX_flush_raster")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXFlushRaster &SGIXFlushRasterAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_flush_raster entry points.
void SGIXFlushRasterAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFlushRasterSGIX().
void SGIXFlushRasterAPI::flushRaster() const
{
    static const char *fnName = "glFlushRasterSGIX";

    beforeCommand(fnName, _api.glFlushRaster);
    _api.glFlushRaster();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXFragmentLightingAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_fragment_lighting extension.
SGIXFragmentLightingAPI::SGIXFragmentLightingAPI() :
    BaseExtension("GL_SGIX_fragment_lighting")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXFragmentLighting &SGIXFragmentLightingAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_fragment_lighting entry points.
void SGIXFragmentLightingAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFragmentColorMaterialSGIX().
void SGIXFragmentLightingAPI::fragmentColorMaterial(MaterialFace face,
                                                    GLenum mode) const
{
    static const char *fnName = "glFragmentColorMaterialSGIX";

    beforeCommand(fnName, _api.glFragmentColorMaterial);
    _api.glFragmentColorMaterial(toScalar(face), mode);
    afterCommand(fnName);
}

// Calls glFragmentLightModelfSGIX().
void SGIXFragmentLightingAPI::fragmentLightModelF(FragmentLightModelParameterSGIX pname,
                                                  GLfloat param) const
{
    static const char *fnName = "glFragmentLightModelfSGIX";

    beforeCommand(fnName, _api.glFragmentLightModelf);
    _api.glFragmentLightModelf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glFragmentLightModelfvSGIX().
void SGIXFragmentLightingAPI::fragmentLightModelFV(FragmentLightModelParameterSGIX pname,
                                                   const GLfloat *params) const
{
    static const char *fnName = "glFragmentLightModelfvSGIX";

    beforeCommand(fnName, _api.glFragmentLightModelfv);
    _api.glFragmentLightModelfv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glFragmentLightModeliSGIX().
void SGIXFragmentLightingAPI::fragmentLightModelI(FragmentLightModelParameterSGIX pname,
                                                  GLint param) const
{
    static const char *fnName = "glFragmentLightModeliSGIX";

    beforeCommand(fnName, _api.glFragmentLightModeli);
    _api.glFragmentLightModeli(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glFragmentLightModelivSGIX().
void SGIXFragmentLightingAPI::fragmentLightModelIV(FragmentLightModelParameterSGIX pname,
                                                   const GLint *params) const
{
    static const char *fnName = "glFragmentLightModelivSGIX";

    beforeCommand(fnName, _api.glFragmentLightModeliv);
    _api.glFragmentLightModeliv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glFragmentLightfSGIX().
void SGIXFragmentLightingAPI::fragmentLightF(FragmentLightNameSGIX light,
                                             GLenum pname, GLfloat param) const
{
    static const char *fnName = "glFragmentLightfSGIX";

    beforeCommand(fnName, _api.glFragmentLightf);
    _api.glFragmentLightf(toScalar(light), pname, param);
    afterCommand(fnName);
}

// Calls glFragmentLightfvSGIX().
void SGIXFragmentLightingAPI::fragmentLightFV(FragmentLightNameSGIX light,
                                              GLenum pname,
                                              const GLfloat *params) const
{
    static const char *fnName = "glFragmentLightfvSGIX";

    beforeCommand(fnName, _api.glFragmentLightfv);
    _api.glFragmentLightfv(toScalar(light), pname, params);
    afterCommand(fnName);
}

// Calls glFragmentLightiSGIX().
void SGIXFragmentLightingAPI::fragmentLightI(FragmentLightNameSGIX light,
                                             GLenum pname, GLint param) const
{
    static const char *fnName = "glFragmentLightiSGIX";

    beforeCommand(fnName, _api.glFragmentLighti);
    _api.glFragmentLighti(toScalar(light), pname, param);
    afterCommand(fnName);
}

// Calls glFragmentLightivSGIX().
void SGIXFragmentLightingAPI::fragmentLightIV(FragmentLightNameSGIX light,
                                              GLenum pname, const GLint *params) const
{
    static const char *fnName = "glFragmentLightivSGIX";

    beforeCommand(fnName, _api.glFragmentLightiv);
    _api.glFragmentLightiv(toScalar(light), pname, params);
    afterCommand(fnName);
}

// Calls glFragmentMaterialfSGIX().
void SGIXFragmentLightingAPI::fragmentMaterialF(MaterialFace face, GLenum pname,
                                                GLfloat param) const
{
    static const char *fnName = "glFragmentMaterialfSGIX";

    beforeCommand(fnName, _api.glFragmentMaterialf);
    _api.glFragmentMaterialf(toScalar(face), pname, param);
    afterCommand(fnName);
}

// Calls glFragmentMaterialfvSGIX().
void SGIXFragmentLightingAPI::fragmentMaterialFV(MaterialFace face, GLenum pname,
                                                 const GLfloat *params) const
{
    static const char *fnName = "glFragmentMaterialfvSGIX";

    beforeCommand(fnName, _api.glFragmentMaterialfv);
    _api.glFragmentMaterialfv(toScalar(face), pname, params);
    afterCommand(fnName);
}

// Calls glFragmentMaterialiSGIX().
void SGIXFragmentLightingAPI::fragmentMaterialI(MaterialFace face, GLenum pname,
                                                GLint param) const
{
    static const char *fnName = "glFragmentMaterialiSGIX";

    beforeCommand(fnName, _api.glFragmentMateriali);
    _api.glFragmentMateriali(toScalar(face), pname, param);
    afterCommand(fnName);
}

// Calls glFragmentMaterialivSGIX().
void SGIXFragmentLightingAPI::fragmentMaterialIV(MaterialFace face, GLenum pname,
                                                 const GLint *params) const
{
    static const char *fnName = "glFragmentMaterialivSGIX";

    beforeCommand(fnName, _api.glFragmentMaterialiv);
    _api.glFragmentMaterialiv(toScalar(face), pname, params);
    afterCommand(fnName);
}

// Calls glGetFragmentLightfvSGIX().
void SGIXFragmentLightingAPI::getFragmentLightFV(FragmentLightNameSGIX light,
                                                 GLenum pname, GLfloat *params) const
{
    static const char *fnName = "glGetFragmentLightfvSGIX";

    beforeCommand(fnName, _api.glGetFragmentLightfv);
    _api.glGetFragmentLightfv(toScalar(light), pname, params);
    afterCommand(fnName);
}

// Calls glGetFragmentLightivSGIX().
void SGIXFragmentLightingAPI::getFragmentLightIV(FragmentLightNameSGIX light,
                                                 GLenum pname, GLint *params) const
{
    static const char *fnName = "glGetFragmentLightivSGIX";

    beforeCommand(fnName, _api.glGetFragmentLightiv);
    _api.glGetFragmentLightiv(toScalar(light), pname, params);
    afterCommand(fnName);
}

// Calls glGetFragmentMaterialfvSGIX().
void SGIXFragmentLightingAPI::getFragmentMaterialFV(MaterialFace face,
                                                    GLenum pname,
                                                    GLfloat *params) const
{
    static const char *fnName = "glGetFragmentMaterialfvSGIX";

    beforeCommand(fnName, _api.glGetFragmentMaterialfv);
    _api.glGetFragmentMaterialfv(toScalar(face), pname, params);
    afterCommand(fnName);
}

// Calls glGetFragmentMaterialivSGIX().
void SGIXFragmentLightingAPI::getFragmentMaterialIV(MaterialFace face,
                                                    GLenum pname, GLint *params) const
{
    static const char *fnName = "glGetFragmentMaterialivSGIX";

    beforeCommand(fnName, _api.glGetFragmentMaterialiv);
    _api.glGetFragmentMaterialiv(toScalar(face), pname, params);
    afterCommand(fnName);
}

// Calls glLightEnviSGIX().
void SGIXFragmentLightingAPI::lightEnvI(LightEnvParameterSGIX pname, GLint param) const
{
    static const char *fnName = "glLightEnviSGIX";

    beforeCommand(fnName, _api.glLightEnvi);
    _api.glLightEnvi(toScalar(pname), param);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXFramezoomAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_framezoom extension.
SGIXFramezoomAPI::SGIXFramezoomAPI() :
    BaseExtension("GL_SGIX_framezoom")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXFramezoom &SGIXFramezoomAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_framezoom entry points.
void SGIXFramezoomAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFrameZoomSGIX().
void SGIXFramezoomAPI::frameZoom(GLint factor) const
{
    static const char *fnName = "glFrameZoomSGIX";

    beforeCommand(fnName, _api.glFrameZoom);
    _api.glFrameZoom(factor);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXIglooInterfaceAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_igloo_interface extension.
SGIXIglooInterfaceAPI::SGIXIglooInterfaceAPI() :
    BaseExtension("GL_SGIX_igloo_interface")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXIglooInterface &SGIXIglooInterfaceAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_igloo_interface entry points.
void SGIXIglooInterfaceAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glIglooInterfaceSGIX().
void SGIXIglooInterfaceAPI::iglooInterface(GLenum pname, const void *params) const
{
    static const char *fnName = "glIglooInterfaceSGIX";

    beforeCommand(fnName, _api.glIglooInterface);
    _api.glIglooInterface(pname, params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXInstrumentSAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_instruments extension.
SGIXInstrumentSAPI::SGIXInstrumentSAPI() :
    BaseExtension("GL_SGIX_instruments")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXInstrumentS &SGIXInstrumentSAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_instruments entry points.
void SGIXInstrumentSAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetInstrumentsSGIX().
GLint SGIXInstrumentSAPI::getInstrumentS() const
{
    static const char *fnName = "glGetInstrumentsSGIX";

    beforeCommand(fnName, _api.glGetInstruments);
    GLint result = _api.glGetInstruments();
    afterCommand(fnName);

    return result;
}

// Calls glInstrumentsBufferSGIX().
void SGIXInstrumentSAPI::instrumentSBuffer(GLsizei size, GLint *buffer) const
{
    static const char *fnName = "glInstrumentsBufferSGIX";

    beforeCommand(fnName, _api.glInstrumentsBuffer);
    _api.glInstrumentsBuffer(size, buffer);
    afterCommand(fnName);
}

// Calls glPollInstrumentsSGIX().
GLint SGIXInstrumentSAPI::pollInstrumentS(GLint *marker_p) const
{
    static const char *fnName = "glPollInstrumentsSGIX";

    beforeCommand(fnName, _api.glPollInstruments);
    GLint result = _api.glPollInstruments(marker_p);
    afterCommand(fnName);

    return result;
}

// Calls glReadInstrumentsSGIX().
void SGIXInstrumentSAPI::readInstrumentS(GLint marker) const
{
    static const char *fnName = "glReadInstrumentsSGIX";

    beforeCommand(fnName, _api.glReadInstruments);
    _api.glReadInstruments(marker);
    afterCommand(fnName);
}

// Calls glStartInstrumentsSGIX().
void SGIXInstrumentSAPI::startInstrumentS() const
{
    static const char *fnName = "glStartInstrumentsSGIX";

    beforeCommand(fnName, _api.glStartInstruments);
    _api.glStartInstruments();
    afterCommand(fnName);
}

// Calls glStopInstrumentsSGIX().
void SGIXInstrumentSAPI::stopInstrumentS(GLint marker) const
{
    static const char *fnName = "glStopInstrumentsSGIX";

    beforeCommand(fnName, _api.glStopInstruments);
    _api.glStopInstruments(marker);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXListPriorityAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_list_priority extension.
SGIXListPriorityAPI::SGIXListPriorityAPI() :
    BaseExtension("GL_SGIX_list_priority")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXListPriority &SGIXListPriorityAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_list_priority entry points.
void SGIXListPriorityAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGetListParameterfvSGIX().
void SGIXListPriorityAPI::getListParameterFV(GLuint list,
                                             ListParameterName pname,
                                             GLfloat *params) const
{
    static const char *fnName = "glGetListParameterfvSGIX";

    beforeCommand(fnName, _api.glGetListParameterfv);
    _api.glGetListParameterfv(list, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetListParameterivSGIX().
void SGIXListPriorityAPI::getListParameterIV(GLuint list,
                                             ListParameterName pname,
                                             GLint *params) const
{
    static const char *fnName = "glGetListParameterivSGIX";

    beforeCommand(fnName, _api.glGetListParameteriv);
    _api.glGetListParameteriv(list, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glListParameterfSGIX().
void SGIXListPriorityAPI::listParameterF(GLuint list, ListParameterName pname,
                                         GLfloat param) const
{
    static const char *fnName = "glListParameterfSGIX";

    beforeCommand(fnName, _api.glListParameterf);
    _api.glListParameterf(list, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glListParameterfvSGIX().
void SGIXListPriorityAPI::listParameterFV(GLuint list, ListParameterName pname,
                                          const GLfloat *params) const
{
    static const char *fnName = "glListParameterfvSGIX";

    beforeCommand(fnName, _api.glListParameterfv);
    _api.glListParameterfv(list, toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glListParameteriSGIX().
void SGIXListPriorityAPI::listParameterI(GLuint list, ListParameterName pname,
                                         GLint param) const
{
    static const char *fnName = "glListParameteriSGIX";

    beforeCommand(fnName, _api.glListParameteri);
    _api.glListParameteri(list, toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glListParameterivSGIX().
void SGIXListPriorityAPI::listParameterIV(GLuint list, ListParameterName pname,
                                          const GLint *params) const
{
    static const char *fnName = "glListParameterivSGIX";

    beforeCommand(fnName, _api.glListParameteriv);
    _api.glListParameteriv(list, toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXPixelTextureAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_pixel_texture extension.
SGIXPixelTextureAPI::SGIXPixelTextureAPI() :
    BaseExtension("GL_SGIX_pixel_texture")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXPixelTexture &SGIXPixelTextureAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_pixel_texture entry points.
void SGIXPixelTextureAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glPixelTexGenSGIX().
void SGIXPixelTextureAPI::pixelTexGen(GLenum mode) const
{
    static const char *fnName = "glPixelTexGenSGIX";

    beforeCommand(fnName, _api.glPixelTexGen);
    _api.glPixelTexGen(mode);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXPolynomialFfdAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_polynomial_ffd extension.
SGIXPolynomialFfdAPI::SGIXPolynomialFfdAPI() :
    BaseExtension("GL_SGIX_polynomial_ffd")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXPolynomialFfd &SGIXPolynomialFfdAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_polynomial_ffd entry points.
void SGIXPolynomialFfdAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDeformSGIX().
void SGIXPolynomialFfdAPI::deform(GLbitfield  /* FfdMaskSGIX */ mask) const
{
    static const char *fnName = "glDeformSGIX";

    beforeCommand(fnName, _api.glDeform);
    _api.glDeform(mask);
    afterCommand(fnName);
}

// Calls glDeformationMap3dSGIX().
void SGIXPolynomialFfdAPI::deformationMap3D(FfdTargetSGIX target, GLdouble u1,
                                            GLdouble u2, GLint ustride,
                                            GLint uorder, GLdouble v1,
                                            GLdouble v2, GLint vstride,
                                            GLint vorder, GLdouble w1,
                                            GLdouble w2, GLint wstride,
                                            GLint worder, const GLdouble *points) const
{
    static const char *fnName = "glDeformationMap3dSGIX";

    beforeCommand(fnName, _api.glDeformationMap3d);
    _api.glDeformationMap3d(toScalar(target), u1, u2, ustride, uorder, v1, v2,
                            vstride, vorder, w1, w2, wstride, worder, points);
    afterCommand(fnName);
}

// Calls glDeformationMap3fSGIX().
void SGIXPolynomialFfdAPI::deformationMap3F(FfdTargetSGIX target, GLfloat u1,
                                            GLfloat u2, GLint ustride,
                                            GLint uorder, GLfloat v1, GLfloat v2,
                                            GLint vstride, GLint vorder,
                                            GLfloat w1, GLfloat w2,
                                            GLint wstride, GLint worder,
                                            const GLfloat *points) const
{
    static const char *fnName = "glDeformationMap3fSGIX";

    beforeCommand(fnName, _api.glDeformationMap3f);
    _api.glDeformationMap3f(toScalar(target), u1, u2, ustride, uorder, v1, v2,
                            vstride, vorder, w1, w2, wstride, worder, points);
    afterCommand(fnName);
}

// Calls glLoadIdentityDeformationMapSGIX().
void SGIXPolynomialFfdAPI::loadIdentityDeformationMap(GLbitfield  /* FfdMaskSGIX */ mask) const
{
    static const char *fnName = "glLoadIdentityDeformationMapSGIX";

    beforeCommand(fnName, _api.glLoadIdentityDeformationMap);
    _api.glLoadIdentityDeformationMap(mask);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXReferencePlaneAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_reference_plane extension.
SGIXReferencePlaneAPI::SGIXReferencePlaneAPI() :
    BaseExtension("GL_SGIX_reference_plane")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXReferencePlane &SGIXReferencePlaneAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_reference_plane entry points.
void SGIXReferencePlaneAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glReferencePlaneSGIX().
void SGIXReferencePlaneAPI::referencePlane(const GLdouble *equation) const
{
    static const char *fnName = "glReferencePlaneSGIX";

    beforeCommand(fnName, _api.glReferencePlane);
    _api.glReferencePlane(equation);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXSpriteAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_sprite extension.
SGIXSpriteAPI::SGIXSpriteAPI() :
    BaseExtension("GL_SGIX_sprite")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXSprite &SGIXSpriteAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_sprite entry points.
void SGIXSpriteAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glSpriteParameterfSGIX().
void SGIXSpriteAPI::spriteParameterF(SpriteParameterNameSGIX pname,
                                     GLfloat param) const
{
    static const char *fnName = "glSpriteParameterfSGIX";

    beforeCommand(fnName, _api.glSpriteParameterf);
    _api.glSpriteParameterf(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glSpriteParameterfvSGIX().
void SGIXSpriteAPI::spriteParameterFV(SpriteParameterNameSGIX pname,
                                      const GLfloat *params) const
{
    static const char *fnName = "glSpriteParameterfvSGIX";

    beforeCommand(fnName, _api.glSpriteParameterfv);
    _api.glSpriteParameterfv(toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glSpriteParameteriSGIX().
void SGIXSpriteAPI::spriteParameterI(SpriteParameterNameSGIX pname, GLint param) const
{
    static const char *fnName = "glSpriteParameteriSGIX";

    beforeCommand(fnName, _api.glSpriteParameteri);
    _api.glSpriteParameteri(toScalar(pname), param);
    afterCommand(fnName);
}

// Calls glSpriteParameterivSGIX().
void SGIXSpriteAPI::spriteParameterIV(SpriteParameterNameSGIX pname,
                                      const GLint *params) const
{
    static const char *fnName = "glSpriteParameterivSGIX";

    beforeCommand(fnName, _api.glSpriteParameteriv);
    _api.glSpriteParameteriv(toScalar(pname), params);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIXTagSampleBufferAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGIX_tag_sample_buffer extension.
SGIXTagSampleBufferAPI::SGIXTagSampleBufferAPI() :
    BaseExtension("GL_SGIX_tag_sample_buffer")
{
}

// Grant read-only access to the underlying function pointers.
const SGIXTagSampleBuffer &SGIXTagSampleBufferAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGIX_tag_sample_buffer entry points.
void SGIXTagSampleBufferAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glTagSampleBufferSGIX().
void SGIXTagSampleBufferAPI::tagSampleBuffer() const
{
    static const char *fnName = "glTagSampleBufferSGIX";

    beforeCommand(fnName, _api.glTagSampleBuffer);
    _api.glTagSampleBuffer();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SGIColorTableAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SGI_color_table extension.
SGIColorTableAPI::SGIColorTableAPI() :
    BaseExtension("GL_SGI_color_table")
{
}

// Grant read-only access to the underlying function pointers.
const SGIColorTable &SGIColorTableAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SGI_color_table entry points.
void SGIColorTableAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glColorTableParameterfvSGI().
void SGIColorTableAPI::colorTableParameterFV(ColorTableTargetSGI target,
                                             ColorTableParameterPNameSGI pname,
                                             const GLfloat *params) const
{
    static const char *fnName = "glColorTableParameterfvSGI";

    beforeCommand(fnName, _api.glColorTableParameterfv);
    _api.glColorTableParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glColorTableParameterivSGI().
void SGIColorTableAPI::colorTableParameterIV(ColorTableTargetSGI target,
                                             ColorTableParameterPNameSGI pname,
                                             const GLint *params) const
{
    static const char *fnName = "glColorTableParameterivSGI";

    beforeCommand(fnName, _api.glColorTableParameteriv);
    _api.glColorTableParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glColorTableSGI().
void SGIColorTableAPI::colorTable(ColorTableTargetSGI target,
                                  InternalFormat internalformat, GLsizei width,
                                  PixelFormat format, PixelType type,
                                  const void *table) const
{
    static const char *fnName = "glColorTableSGI";

    beforeCommand(fnName, _api.glColorTable);
    _api.glColorTable(toScalar(target), toScalar(internalformat), width,
                      toScalar(format), toScalar(type), table);
    afterCommand(fnName);
}

// Calls glCopyColorTableSGI().
void SGIColorTableAPI::copyColorTable(ColorTableTargetSGI target,
                                      InternalFormat internalformat, GLint x,
                                      GLint y, GLsizei width) const
{
    static const char *fnName = "glCopyColorTableSGI";

    beforeCommand(fnName, _api.glCopyColorTable);
    _api.glCopyColorTable(toScalar(target), toScalar(internalformat), x, y,
                          width);
    afterCommand(fnName);
}

// Calls glGetColorTableParameterfvSGI().
void SGIColorTableAPI::getColorTableParameterFV(ColorTableTargetSGI target,
                                                GetColorTableParameterPNameSGI pname,
                                                GLfloat *params) const
{
    static const char *fnName = "glGetColorTableParameterfvSGI";

    beforeCommand(fnName, _api.glGetColorTableParameterfv);
    _api.glGetColorTableParameterfv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetColorTableParameterivSGI().
void SGIColorTableAPI::getColorTableParameterIV(ColorTableTargetSGI target,
                                                GetColorTableParameterPNameSGI pname,
                                                GLint *params) const
{
    static const char *fnName = "glGetColorTableParameterivSGI";

    beforeCommand(fnName, _api.glGetColorTableParameteriv);
    _api.glGetColorTableParameteriv(toScalar(target), toScalar(pname), params);
    afterCommand(fnName);
}

// Calls glGetColorTableSGI().
void SGIColorTableAPI::getColorTable(ColorTableTargetSGI target,
                                     PixelFormat format, PixelType type,
                                     void *table) const
{
    static const char *fnName = "glGetColorTableSGI";

    beforeCommand(fnName, _api.glGetColorTable);
    _api.glGetColorTable(toScalar(target), toScalar(format), toScalar(type),
                         table);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SUNXConstantDataAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SUNX_constant_data extension.
SUNXConstantDataAPI::SUNXConstantDataAPI() :
    BaseExtension("GL_SUNX_constant_data")
{
}

// Grant read-only access to the underlying function pointers.
const SUNXConstantData &SUNXConstantDataAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SUNX_constant_data entry points.
void SUNXConstantDataAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glFinishTextureSUNX().
void SUNXConstantDataAPI::finishTexture() const
{
    static const char *fnName = "glFinishTextureSUNX";

    beforeCommand(fnName, _api.glFinishTexture);
    _api.glFinishTexture();
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SUNGlobalAlphaAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SUN_global_alpha extension.
SUNGlobalAlphaAPI::SUNGlobalAlphaAPI() :
    BaseExtension("GL_SUN_global_alpha")
{
}

// Grant read-only access to the underlying function pointers.
const SUNGlobalAlpha &SUNGlobalAlphaAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SUN_global_alpha entry points.
void SUNGlobalAlphaAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glGlobalAlphaFactorbSUN().
void SUNGlobalAlphaAPI::globalAlphaFactorB(GLbyte factor) const
{
    static const char *fnName = "glGlobalAlphaFactorbSUN";

    beforeCommand(fnName, _api.glGlobalAlphaFactorb);
    _api.glGlobalAlphaFactorb(factor);
    afterCommand(fnName);
}

// Calls glGlobalAlphaFactordSUN().
void SUNGlobalAlphaAPI::globalAlphaFactorD(GLdouble factor) const
{
    static const char *fnName = "glGlobalAlphaFactordSUN";

    beforeCommand(fnName, _api.glGlobalAlphaFactord);
    _api.glGlobalAlphaFactord(factor);
    afterCommand(fnName);
}

// Calls glGlobalAlphaFactorfSUN().
void SUNGlobalAlphaAPI::globalAlphaFactorF(GLfloat factor) const
{
    static const char *fnName = "glGlobalAlphaFactorfSUN";

    beforeCommand(fnName, _api.glGlobalAlphaFactorf);
    _api.glGlobalAlphaFactorf(factor);
    afterCommand(fnName);
}

// Calls glGlobalAlphaFactoriSUN().
void SUNGlobalAlphaAPI::globalAlphaFactorI(GLint factor) const
{
    static const char *fnName = "glGlobalAlphaFactoriSUN";

    beforeCommand(fnName, _api.glGlobalAlphaFactori);
    _api.glGlobalAlphaFactori(factor);
    afterCommand(fnName);
}

// Calls glGlobalAlphaFactorsSUN().
void SUNGlobalAlphaAPI::globalAlphaFactors(GLshort factor) const
{
    static const char *fnName = "glGlobalAlphaFactorsSUN";

    beforeCommand(fnName, _api.glGlobalAlphaFactors);
    _api.glGlobalAlphaFactors(factor);
    afterCommand(fnName);
}

// Calls glGlobalAlphaFactorubSUN().
void SUNGlobalAlphaAPI::globalAlphaFactorUB(GLubyte factor) const
{
    static const char *fnName = "glGlobalAlphaFactorubSUN";

    beforeCommand(fnName, _api.glGlobalAlphaFactorub);
    _api.glGlobalAlphaFactorub(factor);
    afterCommand(fnName);
}

// Calls glGlobalAlphaFactoruiSUN().
void SUNGlobalAlphaAPI::globalAlphaFactorUI(GLuint factor) const
{
    static const char *fnName = "glGlobalAlphaFactoruiSUN";

    beforeCommand(fnName, _api.glGlobalAlphaFactorui);
    _api.glGlobalAlphaFactorui(factor);
    afterCommand(fnName);
}

// Calls glGlobalAlphaFactorusSUN().
void SUNGlobalAlphaAPI::globalAlphaFactorUS(GLushort factor) const
{
    static const char *fnName = "glGlobalAlphaFactorusSUN";

    beforeCommand(fnName, _api.glGlobalAlphaFactorus);
    _api.glGlobalAlphaFactorus(factor);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SUNMeshArrayAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SUN_mesh_array extension.
SUNMeshArrayAPI::SUNMeshArrayAPI() :
    BaseExtension("GL_SUN_mesh_array")
{
}

// Grant read-only access to the underlying function pointers.
const SUNMeshArray &SUNMeshArrayAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SUN_mesh_array entry points.
void SUNMeshArrayAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glDrawMeshArraysSUN().
void SUNMeshArrayAPI::drawMeshArrays(PrimitiveType mode, GLint first,
                                     GLsizei count, GLsizei width) const
{
    static const char *fnName = "glDrawMeshArraysSUN";

    beforeCommand(fnName, _api.glDrawMeshArrays);
    _api.glDrawMeshArrays(toScalar(mode), first, count, width);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SUNTriangleListAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SUN_triangle_list extension.
SUNTriangleListAPI::SUNTriangleListAPI() :
    BaseExtension("GL_SUN_triangle_list")
{
}

// Grant read-only access to the underlying function pointers.
const SUNTriangleList &SUNTriangleListAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SUN_triangle_list entry points.
void SUNTriangleListAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glReplacementCodePointerSUN().
void SUNTriangleListAPI::replacementCodePointer(ReplacementCodeTypeSUN type,
                                                GLsizei stride,
                                                const void **pointer) const
{
    static const char *fnName = "glReplacementCodePointerSUN";

    beforeCommand(fnName, _api.glReplacementCodePointer);
    _api.glReplacementCodePointer(toScalar(type), stride, pointer);
    afterCommand(fnName);
}

// Calls glReplacementCodeubSUN().
void SUNTriangleListAPI::replacementCodeUB(GLubyte code) const
{
    static const char *fnName = "glReplacementCodeubSUN";

    beforeCommand(fnName, _api.glReplacementCodeub);
    _api.glReplacementCodeub(code);
    afterCommand(fnName);
}

// Calls glReplacementCodeubvSUN().
void SUNTriangleListAPI::replacementCodeUBV(const GLubyte *code) const
{
    static const char *fnName = "glReplacementCodeubvSUN";

    beforeCommand(fnName, _api.glReplacementCodeubv);
    _api.glReplacementCodeubv(code);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiSUN().
void SUNTriangleListAPI::replacementCodeUI(GLuint code) const
{
    static const char *fnName = "glReplacementCodeuiSUN";

    beforeCommand(fnName, _api.glReplacementCodeui);
    _api.glReplacementCodeui(code);
    afterCommand(fnName);
}

// Calls glReplacementCodeuivSUN().
void SUNTriangleListAPI::replacementCodeUIV(const GLuint *code) const
{
    static const char *fnName = "glReplacementCodeuivSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiv);
    _api.glReplacementCodeuiv(code);
    afterCommand(fnName);
}

// Calls glReplacementCodeusSUN().
void SUNTriangleListAPI::replacementCodeUS(GLushort code) const
{
    static const char *fnName = "glReplacementCodeusSUN";

    beforeCommand(fnName, _api.glReplacementCodeus);
    _api.glReplacementCodeus(code);
    afterCommand(fnName);
}

// Calls glReplacementCodeusvSUN().
void SUNTriangleListAPI::replacementCodeUSV(const GLushort *code) const
{
    static const char *fnName = "glReplacementCodeusvSUN";

    beforeCommand(fnName, _api.glReplacementCodeusv);
    _api.glReplacementCodeusv(code);
    afterCommand(fnName);
}

////////////////////////////////////////////////////////////////////////////////
// SUNVertexAPI Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
// Construct an unresolved command set for the GL_SUN_vertex extension.
SUNVertexAPI::SUNVertexAPI() :
    BaseExtension("GL_SUN_vertex")
{
}

// Grant read-only access to the underlying function pointers.
const SUNVertex &SUNVertexAPI::getRawAPI() const
{
    return _api;
}

// Resolve the GL_SUN_vertex entry points.
void SUNVertexAPI::resolve(const APIResolver* resolver)
{
    if (resolver != nullptr)
    {
        _api.resolveEntryPoints(resolver);

        // Call the base class.
        BaseExtension::resolve(resolver);
    }
}

// Calls glColor3fVertex3fSUN().
void SUNVertexAPI::color3FVertex3F(GLfloat r, GLfloat g, GLfloat b, GLfloat x,
                                   GLfloat y, GLfloat z) const
{
    static const char *fnName = "glColor3fVertex3fSUN";

    beforeCommand(fnName, _api.glColor3fVertex3f);
    _api.glColor3fVertex3f(r, g, b, x, y, z);
    afterCommand(fnName);
}

// Calls glColor3fVertex3fvSUN().
void SUNVertexAPI::color3FVertex3FV(const GLfloat *c, const GLfloat *v) const
{
    static const char *fnName = "glColor3fVertex3fvSUN";

    beforeCommand(fnName, _api.glColor3fVertex3fv);
    _api.glColor3fVertex3fv(c, v);
    afterCommand(fnName);
}

// Calls glColor4fNormal3fVertex3fSUN().
void SUNVertexAPI::color4FNormal3FVertex3F(GLfloat r, GLfloat g, GLfloat b,
                                           GLfloat a, GLfloat nx, GLfloat ny,
                                           GLfloat nz, GLfloat x, GLfloat y,
                                           GLfloat z) const
{
    static const char *fnName = "glColor4fNormal3fVertex3fSUN";

    beforeCommand(fnName, _api.glColor4fNormal3fVertex3f);
    _api.glColor4fNormal3fVertex3f(r, g, b, a, nx, ny, nz, x, y, z);
    afterCommand(fnName);
}

// Calls glColor4fNormal3fVertex3fvSUN().
void SUNVertexAPI::color4FNormal3FVertex3FV(const GLfloat *c, const GLfloat *n,
                                            const GLfloat *v) const
{
    static const char *fnName = "glColor4fNormal3fVertex3fvSUN";

    beforeCommand(fnName, _api.glColor4fNormal3fVertex3fv);
    _api.glColor4fNormal3fVertex3fv(c, n, v);
    afterCommand(fnName);
}

// Calls glColor4ubVertex2fSUN().
void SUNVertexAPI::color4UBVertex2F(GLubyte r, GLubyte g, GLubyte b, GLubyte a,
                                    GLfloat x, GLfloat y) const
{
    static const char *fnName = "glColor4ubVertex2fSUN";

    beforeCommand(fnName, _api.glColor4ubVertex2f);
    _api.glColor4ubVertex2f(r, g, b, a, x, y);
    afterCommand(fnName);
}

// Calls glColor4ubVertex2fvSUN().
void SUNVertexAPI::color4UBVertex2FV(const GLubyte *c, const GLfloat *v) const
{
    static const char *fnName = "glColor4ubVertex2fvSUN";

    beforeCommand(fnName, _api.glColor4ubVertex2fv);
    _api.glColor4ubVertex2fv(c, v);
    afterCommand(fnName);
}

// Calls glColor4ubVertex3fSUN().
void SUNVertexAPI::color4UBVertex3F(GLubyte r, GLubyte g, GLubyte b, GLubyte a,
                                    GLfloat x, GLfloat y, GLfloat z) const
{
    static const char *fnName = "glColor4ubVertex3fSUN";

    beforeCommand(fnName, _api.glColor4ubVertex3f);
    _api.glColor4ubVertex3f(r, g, b, a, x, y, z);
    afterCommand(fnName);
}

// Calls glColor4ubVertex3fvSUN().
void SUNVertexAPI::color4UBVertex3FV(const GLubyte *c, const GLfloat *v) const
{
    static const char *fnName = "glColor4ubVertex3fvSUN";

    beforeCommand(fnName, _api.glColor4ubVertex3fv);
    _api.glColor4ubVertex3fv(c, v);
    afterCommand(fnName);
}

// Calls glNormal3fVertex3fSUN().
void SUNVertexAPI::normal3FVertex3F(GLfloat nx, GLfloat ny, GLfloat nz,
                                    GLfloat x, GLfloat y, GLfloat z) const
{
    static const char *fnName = "glNormal3fVertex3fSUN";

    beforeCommand(fnName, _api.glNormal3fVertex3f);
    _api.glNormal3fVertex3f(nx, ny, nz, x, y, z);
    afterCommand(fnName);
}

// Calls glNormal3fVertex3fvSUN().
void SUNVertexAPI::normal3FVertex3FV(const GLfloat *n, const GLfloat *v) const
{
    static const char *fnName = "glNormal3fVertex3fvSUN";

    beforeCommand(fnName, _api.glNormal3fVertex3fv);
    _api.glNormal3fVertex3fv(n, v);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiColor3fVertex3fSUN().
void SUNVertexAPI::replacementCodeUIColor3FVertex3F(GLuint rc, GLfloat r,
                                                    GLfloat g, GLfloat b,
                                                    GLfloat x, GLfloat y,
                                                    GLfloat z) const
{
    static const char *fnName = "glReplacementCodeuiColor3fVertex3fSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiColor3fVertex3f);
    _api.glReplacementCodeuiColor3fVertex3f(rc, r, g, b, x, y, z);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiColor3fVertex3fvSUN().
void SUNVertexAPI::replacementCodeUIColor3FVertex3FV(const GLuint *rc,
                                                     const GLfloat *c,
                                                     const GLfloat *v) const
{
    static const char *fnName = "glReplacementCodeuiColor3fVertex3fvSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiColor3fVertex3fv);
    _api.glReplacementCodeuiColor3fVertex3fv(rc, c, v);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiColor4fNormal3fVertex3fSUN().
void SUNVertexAPI::replacementCodeUIColor4FNormal3FVertex3F(GLuint rc, GLfloat r,
                                                            GLfloat g, GLfloat b,
                                                            GLfloat a,
                                                            GLfloat nx,
                                                            GLfloat ny,
                                                            GLfloat nz,
                                                            GLfloat x, GLfloat y,
                                                            GLfloat z) const
{
    static const char *fnName = "glReplacementCodeuiColor4fNormal3fVertex3fSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiColor4fNormal3fVertex3f);
    _api.glReplacementCodeuiColor4fNormal3fVertex3f(rc, r, g, b, a, nx, ny, nz,
                                                    x, y, z);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiColor4fNormal3fVertex3fvSUN().
void SUNVertexAPI::replacementCodeUIColor4FNormal3FVertex3FV(const GLuint *rc,
                                                             const GLfloat *c,
                                                             const GLfloat *n,
                                                             const GLfloat *v) const
{
    static const char *fnName = "glReplacementCodeuiColor4fNormal3fVertex3fvSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiColor4fNormal3fVertex3fv);
    _api.glReplacementCodeuiColor4fNormal3fVertex3fv(rc, c, n, v);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiColor4ubVertex3fSUN().
void SUNVertexAPI::replacementCodeUIColor4UBVertex3F(GLuint rc, GLubyte r,
                                                     GLubyte g, GLubyte b,
                                                     GLubyte a, GLfloat x,
                                                     GLfloat y, GLfloat z) const
{
    static const char *fnName = "glReplacementCodeuiColor4ubVertex3fSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiColor4ubVertex3f);
    _api.glReplacementCodeuiColor4ubVertex3f(rc, r, g, b, a, x, y, z);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiColor4ubVertex3fvSUN().
void SUNVertexAPI::replacementCodeUIColor4UBVertex3FV(const GLuint *rc,
                                                      const GLubyte *c,
                                                      const GLfloat *v) const
{
    static const char *fnName = "glReplacementCodeuiColor4ubVertex3fvSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiColor4ubVertex3fv);
    _api.glReplacementCodeuiColor4ubVertex3fv(rc, c, v);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiNormal3fVertex3fSUN().
void SUNVertexAPI::replacementCodeUINormal3FVertex3F(GLuint rc, GLfloat nx,
                                                     GLfloat ny, GLfloat nz,
                                                     GLfloat x, GLfloat y,
                                                     GLfloat z) const
{
    static const char *fnName = "glReplacementCodeuiNormal3fVertex3fSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiNormal3fVertex3f);
    _api.glReplacementCodeuiNormal3fVertex3f(rc, nx, ny, nz, x, y, z);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiNormal3fVertex3fvSUN().
void SUNVertexAPI::replacementCodeUINormal3FVertex3FV(const GLuint *rc,
                                                      const GLfloat *n,
                                                      const GLfloat *v) const
{
    static const char *fnName = "glReplacementCodeuiNormal3fVertex3fvSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiNormal3fVertex3fv);
    _api.glReplacementCodeuiNormal3fVertex3fv(rc, n, v);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN().
void SUNVertexAPI::replacementCodeUITexCoord2FColor4FNormal3FVertex3F(GLuint rc,
                                                                      GLfloat s,
                                                                      GLfloat t,
                                                                      GLfloat r,
                                                                      GLfloat g,
                                                                      GLfloat b,
                                                                      GLfloat a,
                                                                      GLfloat nx,
                                                                      GLfloat ny,
                                                                      GLfloat nz,
                                                                      GLfloat x,
                                                                      GLfloat y,
                                                                      GLfloat z) const
{
    static const char *fnName = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f);
    _api.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3f(rc, s, t, r, g, b,
                                                              a, nx, ny, nz, x,
                                                              y, z);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN().
void SUNVertexAPI::replacementCodeUITexCoord2FColor4FNormal3FVertex3FV(const GLuint *rc,
                                                                       const GLfloat *tc,
                                                                       const GLfloat *c,
                                                                       const GLfloat *n,
                                                                       const GLfloat *v) const
{
    static const char *fnName = "glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv);
    _api.glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fv(rc, tc, c, n, v);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN().
void SUNVertexAPI::replacementCodeUITexCoord2FNormal3FVertex3F(GLuint rc,
                                                               GLfloat s,
                                                               GLfloat t,
                                                               GLfloat nx,
                                                               GLfloat ny,
                                                               GLfloat nz,
                                                               GLfloat x,
                                                               GLfloat y,
                                                               GLfloat z) const
{
    static const char *fnName = "glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiTexCoord2fNormal3fVertex3f);
    _api.glReplacementCodeuiTexCoord2fNormal3fVertex3f(rc, s, t, nx, ny, nz, x,
                                                       y, z);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN().
void SUNVertexAPI::replacementCodeUITexCoord2FNormal3FVertex3FV(const GLuint *rc,
                                                                const GLfloat *tc,
                                                                const GLfloat *n,
                                                                const GLfloat *v) const
{
    static const char *fnName = "glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiTexCoord2fNormal3fVertex3fv);
    _api.glReplacementCodeuiTexCoord2fNormal3fVertex3fv(rc, tc, n, v);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiTexCoord2fVertex3fSUN().
void SUNVertexAPI::replacementCodeUITexCoord2FVertex3F(GLuint rc, GLfloat s,
                                                       GLfloat t, GLfloat x,
                                                       GLfloat y, GLfloat z) const
{
    static const char *fnName = "glReplacementCodeuiTexCoord2fVertex3fSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiTexCoord2fVertex3f);
    _api.glReplacementCodeuiTexCoord2fVertex3f(rc, s, t, x, y, z);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiTexCoord2fVertex3fvSUN().
void SUNVertexAPI::replacementCodeUITexCoord2FVertex3FV(const GLuint *rc,
                                                        const GLfloat *tc,
                                                        const GLfloat *v) const
{
    static const char *fnName = "glReplacementCodeuiTexCoord2fVertex3fvSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiTexCoord2fVertex3fv);
    _api.glReplacementCodeuiTexCoord2fVertex3fv(rc, tc, v);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiVertex3fSUN().
void SUNVertexAPI::replacementCodeUIVertex3F(GLuint rc, GLfloat x, GLfloat y,
                                             GLfloat z) const
{
    static const char *fnName = "glReplacementCodeuiVertex3fSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiVertex3f);
    _api.glReplacementCodeuiVertex3f(rc, x, y, z);
    afterCommand(fnName);
}

// Calls glReplacementCodeuiVertex3fvSUN().
void SUNVertexAPI::replacementCodeUIVertex3FV(const GLuint *rc, const GLfloat *v) const
{
    static const char *fnName = "glReplacementCodeuiVertex3fvSUN";

    beforeCommand(fnName, _api.glReplacementCodeuiVertex3fv);
    _api.glReplacementCodeuiVertex3fv(rc, v);
    afterCommand(fnName);
}

// Calls glTexCoord2fColor3fVertex3fSUN().
void SUNVertexAPI::texCoord2FColor3FVertex3F(GLfloat s, GLfloat t, GLfloat r,
                                             GLfloat g, GLfloat b, GLfloat x,
                                             GLfloat y, GLfloat z) const
{
    static const char *fnName = "glTexCoord2fColor3fVertex3fSUN";

    beforeCommand(fnName, _api.glTexCoord2fColor3fVertex3f);
    _api.glTexCoord2fColor3fVertex3f(s, t, r, g, b, x, y, z);
    afterCommand(fnName);
}

// Calls glTexCoord2fColor3fVertex3fvSUN().
void SUNVertexAPI::texCoord2FColor3FVertex3FV(const GLfloat *tc,
                                              const GLfloat *c, const GLfloat *v) const
{
    static const char *fnName = "glTexCoord2fColor3fVertex3fvSUN";

    beforeCommand(fnName, _api.glTexCoord2fColor3fVertex3fv);
    _api.glTexCoord2fColor3fVertex3fv(tc, c, v);
    afterCommand(fnName);
}

// Calls glTexCoord2fColor4fNormal3fVertex3fSUN().
void SUNVertexAPI::texCoord2FColor4FNormal3FVertex3F(GLfloat s, GLfloat t,
                                                     GLfloat r, GLfloat g,
                                                     GLfloat b, GLfloat a,
                                                     GLfloat nx, GLfloat ny,
                                                     GLfloat nz, GLfloat x,
                                                     GLfloat y, GLfloat z) const
{
    static const char *fnName = "glTexCoord2fColor4fNormal3fVertex3fSUN";

    beforeCommand(fnName, _api.glTexCoord2fColor4fNormal3fVertex3f);
    _api.glTexCoord2fColor4fNormal3fVertex3f(s, t, r, g, b, a, nx, ny, nz, x, y,
                                             z);
    afterCommand(fnName);
}

// Calls glTexCoord2fColor4fNormal3fVertex3fvSUN().
void SUNVertexAPI::texCoord2FColor4FNormal3FVertex3FV(const GLfloat *tc,
                                                      const GLfloat *c,
                                                      const GLfloat *n,
                                                      const GLfloat *v) const
{
    static const char *fnName = "glTexCoord2fColor4fNormal3fVertex3fvSUN";

    beforeCommand(fnName, _api.glTexCoord2fColor4fNormal3fVertex3fv);
    _api.glTexCoord2fColor4fNormal3fVertex3fv(tc, c, n, v);
    afterCommand(fnName);
}

// Calls glTexCoord2fColor4ubVertex3fSUN().
void SUNVertexAPI::texCoord2FColor4UBVertex3F(GLfloat s, GLfloat t, GLubyte r,
                                              GLubyte g, GLubyte b, GLubyte a,
                                              GLfloat x, GLfloat y, GLfloat z) const
{
    static const char *fnName = "glTexCoord2fColor4ubVertex3fSUN";

    beforeCommand(fnName, _api.glTexCoord2fColor4ubVertex3f);
    _api.glTexCoord2fColor4ubVertex3f(s, t, r, g, b, a, x, y, z);
    afterCommand(fnName);
}

// Calls glTexCoord2fColor4ubVertex3fvSUN().
void SUNVertexAPI::texCoord2FColor4UBVertex3FV(const GLfloat *tc,
                                               const GLubyte *c,
                                               const GLfloat *v) const
{
    static const char *fnName = "glTexCoord2fColor4ubVertex3fvSUN";

    beforeCommand(fnName, _api.glTexCoord2fColor4ubVertex3fv);
    _api.glTexCoord2fColor4ubVertex3fv(tc, c, v);
    afterCommand(fnName);
}

// Calls glTexCoord2fNormal3fVertex3fSUN().
void SUNVertexAPI::texCoord2FNormal3FVertex3F(GLfloat s, GLfloat t, GLfloat nx,
                                              GLfloat ny, GLfloat nz, GLfloat x,
                                              GLfloat y, GLfloat z) const
{
    static const char *fnName = "glTexCoord2fNormal3fVertex3fSUN";

    beforeCommand(fnName, _api.glTexCoord2fNormal3fVertex3f);
    _api.glTexCoord2fNormal3fVertex3f(s, t, nx, ny, nz, x, y, z);
    afterCommand(fnName);
}

// Calls glTexCoord2fNormal3fVertex3fvSUN().
void SUNVertexAPI::texCoord2FNormal3FVertex3FV(const GLfloat *tc,
                                               const GLfloat *n,
                                               const GLfloat *v) const
{
    static const char *fnName = "glTexCoord2fNormal3fVertex3fvSUN";

    beforeCommand(fnName, _api.glTexCoord2fNormal3fVertex3fv);
    _api.glTexCoord2fNormal3fVertex3fv(tc, n, v);
    afterCommand(fnName);
}

// Calls glTexCoord2fVertex3fSUN().
void SUNVertexAPI::texCoord2FVertex3F(GLfloat s, GLfloat t, GLfloat x, GLfloat y,
                                      GLfloat z) const
{
    static const char *fnName = "glTexCoord2fVertex3fSUN";

    beforeCommand(fnName, _api.glTexCoord2fVertex3f);
    _api.glTexCoord2fVertex3f(s, t, x, y, z);
    afterCommand(fnName);
}

// Calls glTexCoord2fVertex3fvSUN().
void SUNVertexAPI::texCoord2FVertex3FV(const GLfloat *tc, const GLfloat *v) const
{
    static const char *fnName = "glTexCoord2fVertex3fvSUN";

    beforeCommand(fnName, _api.glTexCoord2fVertex3fv);
    _api.glTexCoord2fVertex3fv(tc, v);
    afterCommand(fnName);
}

// Calls glTexCoord4fColor4fNormal3fVertex4fSUN().
void SUNVertexAPI::texCoord4FColor4FNormal3FVertex4F(GLfloat s, GLfloat t,
                                                     GLfloat p, GLfloat q,
                                                     GLfloat r, GLfloat g,
                                                     GLfloat b, GLfloat a,
                                                     GLfloat nx, GLfloat ny,
                                                     GLfloat nz, GLfloat x,
                                                     GLfloat y, GLfloat z,
                                                     GLfloat w) const
{
    static const char *fnName = "glTexCoord4fColor4fNormal3fVertex4fSUN";

    beforeCommand(fnName, _api.glTexCoord4fColor4fNormal3fVertex4f);
    _api.glTexCoord4fColor4fNormal3fVertex4f(s, t, p, q, r, g, b, a, nx, ny, nz,
                                             x, y, z, w);
    afterCommand(fnName);
}

// Calls glTexCoord4fColor4fNormal3fVertex4fvSUN().
void SUNVertexAPI::texCoord4FColor4FNormal3FVertex4FV(const GLfloat *tc,
                                                      const GLfloat *c,
                                                      const GLfloat *n,
                                                      const GLfloat *v) const
{
    static const char *fnName = "glTexCoord4fColor4fNormal3fVertex4fvSUN";

    beforeCommand(fnName, _api.glTexCoord4fColor4fNormal3fVertex4fv);
    _api.glTexCoord4fColor4fNormal3fVertex4fv(tc, c, n, v);
    afterCommand(fnName);
}

// Calls glTexCoord4fVertex4fSUN().
void SUNVertexAPI::texCoord4FVertex4F(GLfloat s, GLfloat t, GLfloat p, GLfloat q,
                                      GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
{
    static const char *fnName = "glTexCoord4fVertex4fSUN";

    beforeCommand(fnName, _api.glTexCoord4fVertex4f);
    _api.glTexCoord4fVertex4f(s, t, p, q, x, y, z, w);
    afterCommand(fnName);
}

// Calls glTexCoord4fVertex4fvSUN().
void SUNVertexAPI::texCoord4FVertex4FV(const GLfloat *tc, const GLfloat *v) const
{
    static const char *fnName = "glTexCoord4fVertex4fvSUN";

    beforeCommand(fnName, _api.glTexCoord4fVertex4fv);
    _api.glTexCoord4fVertex4fv(tc, v);
    afterCommand(fnName);
}

} // namespace gl
