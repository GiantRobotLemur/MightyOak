//! @file Test_DataTransfer.cpp
//! @brief The definition of unit test for the emulation of data transfer
//! instructions of a virtual ARM processor.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2022-2024
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header File Includes
////////////////////////////////////////////////////////////////////////////////
#include <gtest/gtest.h>

#include "Ag/Core/Exception.hpp"
#include "ArmEmu.hpp"

#include "TestTools.hpp"
#include "TestExecTools.hpp"

namespace Mo {
namespace Arm {

namespace {

////////////////////////////////////////////////////////////////////////////////
// Local Data
////////////////////////////////////////////////////////////////////////////////
const CoreTestParams basicDataTransfer[] = {
    // LDR Word/Byte
    { TLOC, "LDR_PCRelative",   "",
                                "R0=0xCAFEBABE",
                                "LDR R0,myData : BKPT 0xFFFF : .myData: EQUD 0xCAFEBABE" },
    { TLOC, "LDR_RegisterNoOffset", "R0=0x8100,LWORD[8100]=0xDEADBEEF",
                                    "R0=0x8100,R1=0xDEADBEEF",
                                    "LDR R1,[R0]" },
    { TLOC, "LDR_PreIndexedImmedOffset",    "R0=0x8100,LWORD[8104]=0xDEADBEEF",
                                            "R0=0x8100,R1=0xDEADBEEF",
                                            "LDR R1,[R0,#4]" },
    { TLOC, "LDR_PreIndexedImmedNegOffset", "R0=0x8104,LWORD[8100]=0xDEADBEEF",
                                            "R0=0x8104,R1=0xDEADBEEF",
                                            "LDR R1,[R0,#-4]" },
    { TLOC, "LDR_PreIndexedImmedOffsetWB",  "R0=0x8100,LWORD[8104]=0xDEADBEEF",
                                            "R0=0x8104,R1=0xDEADBEEF",
                                            "LDR R1,[R0,#4]!" },
    { TLOC, "LDR_PreIndexedRegOffset",  "R0=0x8100,R1=4,LWORD[8104]=0xCAFEBABE",
                                        "R0=0x8100,R1=4,R2=0xCAFEBABE",
                                        "LDR R2,[R0,R1]" },
    { TLOC, "LDR_PreIndexedRegNegOffset",   "R0=0x8104,R1=4,LWORD[8100]=0xCAFEBABE",
                                            "R0=0x8104,R1=4,R2=0xCAFEBABE",
                                            "LDR R2,[R0,-R1]" },
    { TLOC, "LDR_PreIndexedRegOffsetWB",    "R0=0x8100,R1=4,LWORD[8104]=0xCAFEBABE",
                                            "R0=0x8104,R1=4,R2=0xCAFEBABE",
                                            "LDR R2,[R0,R1]!" },
    { TLOC, "LDR_PreIndexedRegNegOffsetWB", "R0=0x8104,R1=4,LWORD[8100]=0xCAFEBABE",
                                            "R0=0x8100,R1=4,R2=0xCAFEBABE",
                                            "LDR R2,[R0,-R1]!" },
    { TLOC, "LDR_PreIndexedRegLsl", "R0=0x8100,R1=1,LWORD[8104]=0xCAFEBABE",
                                    "R0=0x8104,R1=1,R2=0xCAFEBABE",
                                    "LDR R2,[R0,R1,LSL #2]!" },
    { TLOC, "LDR_PreIndexedRegLsr", "R0=0x8100,R1=16,LWORD[8104]=0xCAFEBABE",
                                    "R0=0x8104,R1=16,R2=0xCAFEBABE",
                                    "LDR R2,[R0,R1,LSR #2]!" },
    { TLOC, "LDR_PreIndexedRegAsr", "R0=0x8100,R1=16,LWORD[8104]=0xCAFEBABE",
                                    "R0=0x8104,R1=16,R2=0xCAFEBABE",
                                    "LDR R2,[R0,R1,ASR #2]!" },
    { TLOC, "LDR_PreIndexedRegRor", "R0=0x8100,R1=8,LWORD[8104]=0xCAFEBABE",
                                    "R0=0x8104,R1=8,R2=0xCAFEBABE",
                                    "LDR R2,[R0,R1,RRX]!" },
    { TLOC, "LDR_PreIndexedByte",   "R0=0x8100,LWORD[8104]=0xCAFEBABE",
                                    "R0=0x8105,R1=0xBA",
                                    "LDRB R1,[R0,#5]!" },
    { TLOC, "LDR_PreIndexedUnaligned1", "R0=0x8100,LWORD[8104]=0xDEADBEEF",
                                        "R0=0x8105,R1=0xEFDEADBE",
                                        "LDR R1,[R0,#5]!" },
    { TLOC, "LDR_PreIndexedUnaligned2", "R0=0x8100,LWORD[8104]=0xDEADBEEF",
                                        "R0=0x8106,R1=0xBEEFDEAD",
                                        "LDR R1,[R0,#6]!" },
    { TLOC, "LDR_PreIndexedUnaligned3", "R0=0x8100,LWORD[8104]=0xDEADBEEF",
                                        "R0=0x8107,R1=0xADBEEFDE",
                                        "LDR R1,[R0,#7]!" },

    { TLOC, "LDR_PostIndexedImmedOffset",   "R0=0x8104,LWORD[8104]=0xDEADBEEF",
                                            "R0=0x8108,R1=0xDEADBEEF",
                                            "LDR R1,[R0],#4" },
    { TLOC, "LDR_PostIndexedImmedNegOffset",    "R0=0x8104,LWORD[8104]=0xDEADBEEF",
                                                "R0=0x8100,R1=0xDEADBEEF",
                                                "LDR R1,[R0],#-4" },
    { TLOC, "LDR_PostIndexedRegOffset", "R0=0x8104,R1=32,LWORD[8104]=0xCAFEBABE",
                                        "R0=0x8124,R1=32,R2=0xCAFEBABE",
                                        "LDR R2,[R0],R1" },
    { TLOC, "LDR_PostIndexedNegRegOffset",  "R0=0x8104,R1=4,LWORD[8104]=0xCAFEBABE",
                                            "R0=0x8100,R1=4,R2=0xCAFEBABE",
                                            "LDR R2,[R0],-R1" },
    { TLOC, "LDR_PostIndexedRegLsl",    "R0=0x8104,R1=1,LWORD[8104]=0xCAFEBABE",
                                        "R0=0x8108,R1=1,R2=0xCAFEBABE",
                                        "LDR R2,[R0],R1,LSL #2" },
    { TLOC, "LDR_PostIndexedRegLsr",    "R0=0x8104,R1=16,LWORD[8104]=0xCAFEBABE",
                                        "R0=0x8108,R1=16,R2=0xCAFEBABE",
                                        "LDR R2,[R0],R1,LSR #2" },
    { TLOC, "LDR_PostIndexedRegAsr",    "R0=0x8104,R1=16,LWORD[8104]=0xCAFEBABE",
                                        "R0=0x8108,R1=16,R2=0xCAFEBABE",
                                        "LDR R2,[R0],R1,ASR #2" },
    { TLOC, "LDR_PostIndexedRegRor",    "R0=0x8104,R1=16,LWORD[8104]=0xCAFEBABE",
                                        "R0=0x8108,R1=16,R2=0xCAFEBABE",
                                        "LDR R2,[R0],R1,ROR #2" },
    { TLOC, "LDR_PostIndexedRegRrx",    "R0=0x8104,R1=16,LWORD[8104]=0xCAFEBABE",
                                        "R0=0x810C,R1=16,R2=0xCAFEBABE",
                                        "LDR R2,[R0],R1,RRX" },
    { TLOC, "LDR_PostIndexedRegRrxCarry",   "R0=0x8104,R1=17,Status=0,LWORD[8104]=0xCAFEBABE",
                                            "R0=0x810C,R1=17,R2=0xCAFEBABE,Status=0",
                                            "LDR R2,[R0],R1,RRX" },
    { TLOC, "LDR_PostIndexedByte",  "R0=0x8105,LWORD[8104]=0xCAFEBABE",
                                    "R0=0x8106,R1=0xBA",
                                    "LDRB R1,[R0],#1" },
    { TLOC, "LDR_PostIndexedUnaligned1",    "R0=0x8105,LWORD[8104]=0xCAFEBABE",
                                            "R0=0x8109,R1=0xBECAFEBA",
                                            "LDR R1,[R0],#4" },
    { TLOC, "LDR_PostIndexedUnaligned2",    "R0=0x8106,LWORD[8104]=0xCAFEBABE",
                                            "R0=0x810A,R1=0xBABECAFE",
                                            "LDR R1,[R0],#4" },
    { TLOC, "LDR_PostIndexedUnaligned3",    "R0=0x8107,LWORD[8104]=0xCAFEBABE",
                                            "R0=0x810B,R1=0xFEBABECA",
                                            "LDR R1,[R0],#4" },

    { TLOC, "STR_PCRelative", "R0=0xDEADBEEF",
                              "R0=0xDEADBEEF,LWORD[8008]=0xDEADBEEF",
                              "STR R0,myData : BKPT 0xFFFF : .myData: EQUD 0xCAFEBABE" },
    { TLOC, "STR_RegisterNoOffset", "R0=0x8100,R1=0x12345678,LWORD[8100]=0x42424242",
                                    "R0=0x8100,R1=0x12345678,LWORD[8100]=0x12345678",
                                    "STR R1,[R0]" },
    { TLOC, "STR_PreIndexedImmedOffset",    "R0=0x8100,R1=0x12345678,LWORD[8104]=0x42424242",
                                            "R0=0x8100,R1=0x12345678,LWORD[8104]=0x12345678",
                                            "STR R1,[R0,#4]" },
    { TLOC, "STR_PreIndexedNegImmedOffset", "R0=0x8104,R1=0x12345678,LWORD[8100]=0x42424242",
                                            "R0=0x8104,R1=0x12345678,LWORD[8100]=0x12345678",
                                            "STR R1,[R0,#-4]" },
    { TLOC, "STR_PreIndexedImmedOffsetWB",  "R0=0x8100,R1=0x12345678,LWORD[8104]=0x42424242",
                                            "R0=0x8104,R1=0x12345678,LWORD[8104]=0x12345678",
                                            "STR R1,[R0,#4]!" },
    { TLOC, "STR_PreIndexedImmedNegOffsetWB",   "R0=0x8104,R1=0x12345678,LWORD[8100]=0x42424242",
                                                "R0=0x8100,R1=0x12345678,LWORD[8100]=0x12345678",
                                                "STR R1,[R0,#-4]!" },
    { TLOC, "STR_PreIndexedRegOffset",  "R0=0x8100,R1=4,R2=0x12345678,LWORD[8104]=0x42424242",
                                        "R0=0x8100,R1=4,R2=0x12345678,LWORD[8104]=0x12345678",
                                        "STR R2,[R0,R1]" },
    { TLOC, "STR_PreIndexedNegRegOffset",   "R0=0x8104,R1=4,R2=0x12345678,LWORD[8100]=0x42424242",
                                            "R0=0x8104,R1=4,R2=0x12345678,LWORD[8100]=0x12345678",
                                            "STR R2,[R0,-R1]" },
    { TLOC, "STR_PreIndexedRegOffsetWB",    "R0=0x8100,R1=4,R2=0x12345678,LWORD[8104]=0x42424242",
                                            "R0=0x8104,R1=4,R2=0x12345678,LWORD[8104]=0x12345678",
                                            "STR R2,[R0,R1]!" },
    { TLOC, "STR_PreIndexedNegRegOffsetWB", "R0=0x8104,R1=4,R2=0x12345678,LWORD[8100]=0x42424242",
                                            "R0=0x8100,R1=4,R2=0x12345678,LWORD[8100]=0x12345678",
                                            "STR R2,[R0,-R1]!" },
    { TLOC, "STR_PreIndexedRegLsl", "R0=0x8100,R1=1,R2=0x12345678,LWORD[8104]=0x42424242",
                                    "R0=0x8104,R1=1,R2=0x12345678,LWORD[8104]=0x12345678",
                                    "STR R2,[R0,R1,LSL #2]!" },
    { TLOC, "STR_PreIndexedRegLsr", "R0=0x8100,R1=16,R2=0x12345678,LWORD[8104]=0x42424242",
                                    "R0=0x8104,R1=16,R2=0x12345678,LWORD[8104]=0x12345678",
                                    "STR R2,[R0,R1,LSR #2]!" },
    { TLOC, "STR_PreIndexedRegAsr", "R0=0x8100,R1=16,R2=0x12345678,LWORD[8104]=0x42424242",
                                    "R0=0x8104,R1=16,R2=0x12345678,LWORD[8104]=0x12345678",
                                    "STR R2,[R0,R1,ASR #2]!" },
    { TLOC, "STR_PreIndexedRegRor", "R0=0x8100,R1=16,R2=0x12345678,LWORD[8104]=0x42424242",
                                    "R0=0x8104,R1=16,R2=0x12345678,LWORD[8104]=0x12345678",
                                    "STR R2,[R0,R1,ROR #2]!" },
    { TLOC, "STR_PreIndexedRegRrx", "R0=0x8100,R1=8,R2=0x12345678,LWORD[8104]=0x42424242",
                                    "R0=0x8104,R1=8,R2=0x12345678,LWORD[8104]=0x12345678",
                                    "STR R2,[R0,R1,RRX]!" },
    { TLOC, "STR_PreIndexedRegRrxCarry",    "R0=0x8100,R1=9,R2=0x12345678,LWORD[8104]=0x42424242,Status=0",
                                            "R0=0x8104,R1=9,R2=0x12345678,LWORD[8104]=0x12345678,Status=0",
                                            "STR R2,[R0,R1,RRX]!" },
    { TLOC, "STR_PreIndexedByte",   "R0=0x8100,R1=0x12345678,LWORD[8104]=0x42424242",
                                    "R0=0x8105,R1=0x12345678,LWORD[8104]=0x42427842",
                                    "STRB R1,[R0,#5]!" },
    { TLOC, "STR_PreIndexedUnaligned1", "R0=0x8100,R1=0x12345678,LWORD[8104]=0x42424242",
                                        "R0=0x8105,R1=0x12345678,LWORD[8104]=0x12345678",
                                        "STR R1,[R0,#5]!" },
    { TLOC, "STR_PreIndexedUnaligned2", "R0=0x8100,R1=0x12345678,LWORD[8104]=0x42424242",
                                        "R0=0x8106,R1=0x12345678,LWORD[8104]=0x12345678",
                                        "STR R1,[R0,#6]!" },
    { TLOC, "STR_PreIndexedUnaligned3", "R0=0x8100,R1=0x12345678,LWORD[8104]=0x42424242",
                                        "R0=0x8107,R1=0x12345678,LWORD[8104]=0x12345678",
                                        "STR R1,[R0,#7]!" },

    { TLOC, "STR_PostIndexedImmedOffset",   "R0=0x8100,R1=0x12345678,LWORD[8100]=0x42424242",
                                            "R0=0x8104,R1=0x12345678,LWORD[8100]=0x12345678",
                                            "STR R1,[R0],#4" },
    { TLOC, "STR_PostIndexedNegImmedOffset",    "R0=0x8100,R1=0x12345678,LWORD[8100]=0x42424242",
                                                "R0=0x80FC,R1=0x12345678,LWORD[8100]=0x12345678",
                                                "STR R1,[R0],#-4" },
    { TLOC, "STR_PostIndexedRegOffset", "R0=0x8100,R1=16,R2=0x12345678,LWORD[8100]=0x42424242",
                                        "R0=0x8110,R1=16,R2=0x12345678,LWORD[8100]=0x12345678",
                                        "STR R2,[R0],R1" },
    { TLOC, "STR_PostIndexedNegRegOffset",  "R0=0x8100,R1=16,R2=0x12345678,LWORD[8100]=0x42424242",
                                            "R0=0x80F0,R1=16,R2=0x12345678,LWORD[8100]=0x12345678",
                                            "STR R2,[R0],-R1" },
    { TLOC, "STR_PostIndexedRegLsl",    "R0=0x8100,R1=16,R2=0x12345678,LWORD[8100]=0x42424242",
                                        "R0=0x8140,R1=16,R2=0x12345678,LWORD[8100]=0x12345678",
                                        "STR R2,[R0],R1,LSL #2" },
    { TLOC, "STR_PostIndexedRegLsr",    "R0=0x8100,R1=16,R2=0x12345678,LWORD[8100]=0x42424242",
                                        "R0=0x8104,R1=16,R2=0x12345678,LWORD[8100]=0x12345678",
                                        "STR R2,[R0],R1,LSR #2" },
    { TLOC, "STR_PostIndexedRegAsr",    "R0=0x8100,R1=16,R2=0x12345678,LWORD[8100]=0x42424242",
                                        "R0=0x8104,R1=16,R2=0x12345678,LWORD[8100]=0x12345678",
                                        "STR R2,[R0],R1,ASR #2" },
    { TLOC, "STR_PostIndexedRegRor",    "R0=0x8100,R1=16,R2=0x12345678,LWORD[8100]=0x42424242",
                                        "R0=0x8104,R1=16,R2=0x12345678,LWORD[8100]=0x12345678",
                                        "STR R2,[R0],R1,ROR #2" },
    { TLOC, "STR_PostIndexedRegRrx",    "R0=0x8100,R1=16,R2=0x12345678,LWORD[8100]=0x42424242",
                                        "R0=0x8108,R1=16,R2=0x12345678,LWORD[8100]=0x12345678",
                                        "STR R2,[R0],R1,RRX" },
    { TLOC, "STR_PostIndexedByte",  "R0=0x8102,R1=0x12345678,LWORD[8100]=0x42424242",
                                    "R0=0x8104,R1=0x12345678,LWORD[8100]=0x42784242",
                                    "STRB R1,[R0],#2" },

    // NOTE: Addresses have bits 0 and 1 forced to 0 for STR instructions (see ARMv2 Data Sheet, page 26).
    { TLOC, "STR_PostIndexedUnaligned1",    "R0=0x8101,R1=0x12345678,LWORD[8100]=0x42424242",
                                            "R0=0x8105,R1=0x12345678,LWORD[8100]=0x12345678",
                                            "STR R1,[R0],#4" },
    { TLOC, "STR_PostIndexedUnaligned2",    "R0=0x8102,R1=0x12345678,LWORD[8100]=0x42424242",
                                            "R0=0x8106,R1=0x12345678,LWORD[8100]=0x12345678",
                                            "STR R1,[R0],#4" },
    { TLOC, "STR_PostIndexedUnaligned3",    "R0=0x8103,R1=0x12345678,LWORD[8100]=0x42424242",
                                            "R0=0x8107,R1=0x12345678,LWORD[8100]=0x12345678",
                                            "STR R1,[R0],#4" },

    { TLOC, "LDMIA_SingleReg",  "R0=0x8100,R1=42,LWORD[8100]=0xCAFEBEEF",
                                "R0=0x8100,R1=0xCAFEBEEF",
                                "LDMIA R0,{R1}" },
    { TLOC, "LDMIA_MultiReg",   "R0=0x8100,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                "R0=0x8100,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0xA4C9D209",
                                "LDMIA R0,{R1-R3}" },
    { TLOC, "LDMIA_PC_Only",    "R0=0x8100,R1=5,R2=3,LWORD[8100]=0x8008,Status=CZ",
                                "R0=0x8100,R1=1,R2=3,Status=CZ",
                                "LDMIA R0,{R15} : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMIA_SingleReg_WriteBack", "R0=0x8100,R1=42,LWORD[8100]=0xCAFEBEEF",
                                         "R0=0x8104,R1=0xCAFEBEEF",
                                         "LDMIA R0!,{R1}" },
    { TLOC, "LDMIA_MultiReg_WriteBack", "R0=0x8100,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                        "R0=0x810C,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0xA4C9D209",
                                        "LDMIA R0!,{R1-R3}" },
    { TLOC, "LDMIA_WriteBack_OverBase", "R0=0x8100,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                        "R0=0xCAFEBEEF,R1=0xBABEDEAD,R2=0xA4C9D209",
                                        "LDMIA R0!,{R0-R2}" },
    { TLOC, "LDMIA_PC_Only_Writeback",  "R0=0x8100,R1=5,R2=3,LWORD[8100]=0x8008,Status=CZ",
                                        "R0=0x8104,R1=1,R2=3,Status=CZ",
                                        "LDMIA R0!,{R15} : MOV R2,#2 : MOV R1,#1" },

    { TLOC, "LDMIA_SingleReg",  "R0=0x80FC,R1=42,LWORD[8100]=0xCAFEBEEF",
                                "R0=0x80FC,R1=0xCAFEBEEF",
                                "LDMIB R0,{R1}" },
    { TLOC, "LDMIB_MultiReg",   "R0=0x80FC,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                "R0=0x80FC,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0xA4C9D209",
                                "LDMIB R0,{R1-R3}" },
    { TLOC, "LDMIB_PC_Only",    "R0=0x80FC,R1=5,R2=3,LWORD[8100]=0x8008,Status=CZ",
                                "R0=0x80FC,R1=1,R2=3,Status=CZ",
                                "LDMIB R0,{R15} : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMIB_SingleReg_WriteBack", "R0=0x80FC,R1=42,LWORD[8100]=0xCAFEBEEF",
                                         "R0=0x8100,R1=0xCAFEBEEF",
                                         "LDMIB R0!,{R1}" },
    { TLOC, "LDMIB_MultiReg_WriteBack", "R0=0x80FC,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                        "R0=0x8108,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0xA4C9D209",
                                        "LDMIB R0!,{R1-R3}" },
    { TLOC, "LDMIB_WriteBack_OverBase", "R0=0x80FC,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                        "R0=0xCAFEBEEF,R1=0xBABEDEAD,R2=0xA4C9D209",
                                        "LDMIB R0!,{R0-R2}" },
    { TLOC, "LDMIB_PC_Only_Writeback",  "R0=0x80FC,R1=5,R2=3,LWORD[8100]=0x8008,Status=CZ",
                                        "R0=0x8100,R1=1,R2=3,Status=CZ",
                                        "LDMIB R0!,{R15} : MOV R2,#2 : MOV R1,#1" },

    { TLOC, "LDMDA_SingleReg",  "R0=0x8100,R1=42,LWORD[8100]=0xCAFEBEEF",
                                "R0=0x8100,R1=0xCAFEBEEF",
                                "LDMDA R0,{R1}" },
    { TLOC, "LDMDA_MultiReg",   "R0=0x8108,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                "R0=0x8108,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0xA4C9D209",
                                "LDMDA R0,{R1-R3}" },
    { TLOC, "LDMDA_PC_Only",    "R0=0x8100,R1=5,R2=3,LWORD[8100]=0x8008,Status=CZ",
                                "R0=0x8100,R1=1,R2=3,Status=CZ",
                                "LDMDA R0,{R15} : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMDA_SingleReg_WriteBack", "R0=0x8100,R1=42,LWORD[8100]=0xCAFEBEEF",
                                         "R0=0x80FC,R1=0xCAFEBEEF",
                                         "LDMDA R0!,{R1}" },
    { TLOC, "LDMDA_MultiReg_WriteBack", "R0=0x8108,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                        "R0=0x80FC,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0xA4C9D209",
                                        "LDMDA R0!,{R1-R3}" },
    { TLOC, "LDMDA_WriteBack_OverBase", "R0=0x8108,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                        "R0=0xCAFEBEEF,R1=0xBABEDEAD,R2=0xA4C9D209",
                                        "LDMDA R0!,{R0-R2}" },
    { TLOC, "LDMDA_PC_Only_Writeback",  "R0=0x8100,R1=5,R2=3,LWORD[8100]=0x8008,Status=CZ",
                                        "R0=0x80FC,R1=1,R2=3,Status=CZ",
                                        "LDMDA R0!,{R15} : MOV R2,#2 : MOV R1,#1" },

    { TLOC, "LDMDB_SingleReg",  "R0=0x8104,R1=42,LWORD[8100]=0xCAFEBEEF",
                                "R0=0x8104,R1=0xCAFEBEEF",
                                "LDMDB R0,{R1}" },
    { TLOC, "LDMDB_MultiReg",   "R0=0x810C,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                "R0=0x810C,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0xA4C9D209",
                                "LDMDB R0,{R1-R3}" },
    { TLOC, "LDMDB_PC_Only",    "R0=0x8104,R1=5,R2=3,LWORD[8100]=0x8008,Status=CZ",
                                "R0=0x8104,R1=1,R2=3,Status=CZ",
                                "LDMDB R0,{R15} : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMDB_SingleReg_WriteBack", "R0=0x8104,R1=42,LWORD[8100]=0xCAFEBEEF",
                                         "R0=0x8100,R1=0xCAFEBEEF",
                                         "LDMDB R0!,{R1}" },
    { TLOC, "LDMDB_MultiReg_WriteBack", "R0=0x810C,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                        "R0=0x8100,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0xA4C9D209",
                                        "LDMDB R0!,{R1-R3}" },
    { TLOC, "LDMDB_WriteBack_OverBase", "R0=0x810C,R1=42,R2=3,R3=69,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0xA4C9D209",
                                        "R0=0xCAFEBEEF,R1=0xBABEDEAD,R2=0xA4C9D209",
                                        "LDMDB R0!,{R0-R2}" },
    { TLOC, "LDMDB_PC_Only_Writeback",  "R0=0x8104,R1=5,R2=3,LWORD[8100]=0x8008,Status=CZ",
                                        "R0=0x8100,R1=1,R2=3,Status=CZ",
                                        "LDMDB R0!,{R15} : MOV R2,#2 : MOV R1,#1" },

    { TLOC, "STMIA_SingleReg",  "R0=0x8100,R1=0xCAFEBEEF",
                                "R0=0x8100,LWORD[8100]=0xCAFEBEEF",
                                "STMIA R0,{R1}" },
    { TLOC, "STMIA_MultiReg",   "R0=0x8100,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0x4269ABBA",
                                "R0=0x8100,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0x4269ABBA",
                                "STMIA R0,{R1-R3}" },
    { TLOC, "STMIA_SingleRegWriteBack", "R0=0x8100,R1=0xCAFEBEEF",
                                        "R0=0x8104,LWORD[8100]=0xCAFEBEEF",
                                        "STMIA R0!,{R1}" },
    { TLOC, "STMIA_MultiRegWriteBack",  "R0=0x8100,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0x4269ABBA",
                                        "R0=0x810C,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0x4269ABBA",
                                        "STMIA R0!,{R1-R3}" },
    // NOTE: Storing a base register which isn't first in the list and using
    // write-back should produce a different result.
    // See ARM Family Data Manual Page 2-41.
    { TLOC, "STMIA_WriteBackOverBase",  "R0=0x8100,R1=0xCAFEBEEF,R2=0xBABEDEAD",
                                        "R0=0x810C,LWORD[8100]=0x8100,LWORD[8104]=0xCAFEBEEF,LWORD[8108]=0xBABEDEAD",
                                        "STMIA R0!,{R0-R2}" },


    { TLOC, "STMIB_SingleReg",  "R0=0x80FC,R1=0xCAFEBEEF",
                                "R0=0x80FC,LWORD[8100]=0xCAFEBEEF",
                                "STMIB R0,{R1}" },
    { TLOC, "STMIB_MultiReg",   "R0=0x80FC,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0x4269ABBA",
                                "R0=0x80FC,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0x4269ABBA",
                                "STMIB R0,{R1-R3}" },
    { TLOC, "STMIB_SingleRegWriteBack", "R0=0x80FC,R1=0xCAFEBEEF",
                                        "R0=0x8100,LWORD[8100]=0xCAFEBEEF",
                                        "STMIB R0!,{R1}" },
    { TLOC, "STMIB_MultiRegWriteBack",  "R0=0x80FC,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0x4269ABBA",
                                        "R0=0x8108,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0x4269ABBA",
                                        "STMIB R0!,{R1-R3}" },
    // NOTE: Storing a base register which isn't first in the list and using
    // write-back should produce a different result.
    // See ARM Family Data Manual Page 2-41.
    { TLOC, "STMIB_WriteBackOverBase",  "R0=0x80FC,R1=0xCAFEBEEF,R2=0xBABEDEAD",
                                        "R0=0x8108,LWORD[8100]=0x80FC,LWORD[8104]=0xCAFEBEEF,LWORD[8108]=0xBABEDEAD",
                                        "STMIB R0!,{R0-R2}" },

    { TLOC, "STMDA_SingleReg",  "R0=0x8100,R1=0xCAFEBEEF",
                                "R0=0x8100,LWORD[8100]=0xCAFEBEEF",
                                "STMDA R0,{R1}" },
    { TLOC, "STMDA_MultiReg",   "R0=0x8108,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0x4269ABBA",
                                "R0=0x8108,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0x4269ABBA",
                                "STMDA R0,{R1-R3}" },
    { TLOC, "STMDA_SingleRegWriteBack", "R0=0x8100,R1=0xCAFEBEEF",
                                        "R0=0x80FC,LWORD[8100]=0xCAFEBEEF",
                                        "STMDA R0!,{R1}" },
    { TLOC, "STMDA_MultiRegWriteBack",  "R0=0x8108,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0x4269ABBA",
                                        "R0=0x80FC,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0x4269ABBA",
                                        "STMDA R0!,{R1-R3}" },
    // NOTE: Storing a base register which isn't first in the list and using
    // write-back should produce a different result.
    // See ARM Family Data Manual Page 2-41.
    { TLOC, "STMDA_WriteBackOverBase",  "R0=0x8108,R1=0xCAFEBEEF,R2=0xBABEDEAD",
                                        "R0=0x80FC,LWORD[8100]=0x8108,LWORD[8104]=0xCAFEBEEF,LWORD[8108]=0xBABEDEAD",
                                        "STMDA R0!,{R0-R2}" },


    { TLOC, "STMDB_SingleReg",  "R0=0x8104,R1=0xCAFEBEEF",
                                "R0=0x8104,LWORD[8100]=0xCAFEBEEF",
                                "STMDB R0,{R1}" },
    { TLOC, "STMDB_MultiReg",   "R0=0x810C,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0x4269ABBA",
                                "R0=0x810C,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0x4269ABBA",
                                "STMDB R0,{R1-R3}" },
    { TLOC, "STMDB_SingleRegWriteBack", "R0=0x8104,R1=0xCAFEBEEF",
                                        "R0=0x8100,LWORD[8100]=0xCAFEBEEF",
                                        "STMDB R0!,{R1}" },
    { TLOC, "STMDB_MultiRegWriteBack",  "R0=0x810C,R1=0xCAFEBEEF,R2=0xBABEDEAD,R3=0x4269ABBA",
                                        "R0=0x8100,LWORD[8100]=0xCAFEBEEF,LWORD[8104]=0xBABEDEAD,LWORD[8108]=0x4269ABBA",
                                        "STMDB R0!,{R1-R3}" },
    // NOTE: Storing a base register which isn't first in the list and using
    // write-back should produce a different result.
    // See ARM Family Data Manual Page 2-41.
    { TLOC, "STMDB_WriteBackOverBase",  "R0=0x810C,R1=0xCAFEBEEF,R2=0xBABEDEAD",
                                        "R0=0x8100,LWORD[8100]=0x810C,LWORD[8104]=0xCAFEBEEF,LWORD[8108]=0xBABEDEAD",
                                        "STMDB R0!,{R0-R2}" },

};

const CoreTestParams basicDataTransfer26Bit[] = {
    { TLOC, "LDR_PreIndexedAddrException", "R0=0xF0000000,R1=42", "R0=0xF0000000,R1=42,CPSR=0x08000003,R14=0x8008,PC=0x18", "LDR R1,[R0,#3]!" },
    { TLOC, "LDR_PreIndexedDataAbort", "R0=0x00F00000,R1=42", "R0=0x00F00000,R1=42,CPSR=0x08000003,R14=0x8008,PC=0x14", "LDR R1,[R0,#3]!" },
    { TLOC, "LDR_PostIndexedAddrException", "R0=0xF0000000,R1=42", "R0=0xF0000000,R1=42,CPSR=0x08000003,R14=0x8008,PC=0x18", "LDR R1,[R0],#3" },
    { TLOC, "LDR_PostIndexedDataAbort", "R0=0x00F00000,R1=42", "R0=0x00F00000,R1=42,CPSR=0x08000003,R14=0x8008,PC=0x14", "LDR R1,[R0],#3" },

    // TODO: Test accessing protected memory in SVC mode based on underlying MMU.
    { TLOC, "LDR_PostIndexedImmediateUserPrivilages", "R0=0x8104,R1=69,LWORD[8104]=0xDEADBEEF", "R0=0x8108,R1=0xDEADBEEF", "LDRT R1,[R0],#4" },
    { TLOC, "LDR_PostIndexedRegOffsetUserPrivilages", "R0=0x8104,R1=16,R2=69,LWORD[8104]=0xBEEFBABE", "R0=0x8114,R1=16,R2=0xBEEFBABE", "LDRT R2,[R0],R1" },
    { TLOC, "STR_PostIndexedImmedOffsetUserPrivileges", "R0=0x8100,R1=0x12345678,LWORD[8100]=0x42424242", "R0=0x8104,R1=0x12345678,LWORD[8100]=0x12345678", "STRT R1,[R0],#4" },
    { TLOC, "STR_PostIndexedRegOffsetUserPrivileges", "R0=0x8100,R1=16,R2=0x12345678,LWORD[8100]=0x42424242", "R0=0x8110,R1=16,R2=0x12345678,LWORD[8100]=0x12345678", "STRT R2,[R0],R1" },

    { TLOC, "STR_PreIndexedAddrException", "R0=0xF0000000,R1=0x12345678", "R0=0xF0000000,R1=0x12345678,R14=0x8008,PC=0x18,CPSR=0x08000003", "STR R1,[R0,#3]!" },
    { TLOC, "STR_PreIndexedDataAbort", "R0=0x00F00000,R1=0x12345678", "R0=0x00F00000,R1=0x12345678,R14=0x8008,PC=0x14,CPSR=0x08000003", "STR R1,[R0,#3]!" },
    { TLOC, "STR_PostIndexedAddrException", "R0=0xF0000000,R1=0x12345678", "R0=0xF0000000,R1=0x12345678,R14=0x8008,PC=0x18,CPSR=0x08000003", "STR R1,[R0],#3" },
    { TLOC, "STR_PostIndexedDataAbort", "R0=0x00F00000,R1=0x12345678", "R0=0x00F00000,R1=0x12345678,R14=0x8008,PC=0x14,CPSR=0x08000003", "STR R1,[R0],#3" },


    { TLOC, "LDMIA_PCAndPSR", "R0=0x8100,R1=5,R2=3,LWORD[8100]=0x10008008,Status=NC",
                              "R0=0x8100,R1=1,R2=3,Status=V",
                              "LDMIA R0,{R15}^ : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMIA_PCAndPSR_Writeback", "R0=0x8100,R1=5,R2=3,LWORD[8100]=0x10008008,Status=CZ",
                                        "R0=0x8104,R1=1,R2=3,Status=V",
                                        "LDMIA R0!,{R15}^ : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMIA_AddressException",   "R0=0x4000010,Status=NC",
                                        "R0=0x4000010,R1=0,CPSR=0xA8000003,R14=0xA0008008,PC=0x18",
                                        "LDMIA R0!,{R1-R5}" },
    { TLOC, "LDMIA_NoException",    "R0=0x03FFFFFC",
                                    "R0=0x00000010,R1=0xE121FF7F,R2=0xDFDFDFDF,R3=0xDFDFDFDF,R4=0xDFDFDFDF,R5=0xDFDFDFDF",
                                    "LDMIA R0!,{R1-R5}" },

    { TLOC, "LDMIB_PCAndPSR", "R0=0x80FC,R1=5,R2=3,LWORD[8100]=0x10008008,Status=NC",
                              "R0=0x80FC,R1=1,R2=3,Status=V",
                              "LDMIB R0,{R15}^ : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMIB_PCAndPSR_Writeback", "R0=0x80FC,R1=5,R2=3,LWORD[8100]=0x10008008,Status=CZ",
                                        "R0=0x8100,R1=1,R2=3,Status=V",
                                        "LDMIB R0!,{R15}^ : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMIB_AddressException",   "R0=0x3FFFFFC,Status=NC",
                                        "R0=0x3FFFFFC,R1=0,CPSR=0xA8000003,R14=0xA0008008,PC=0x18",
                                        "LDMIB R0!,{R1-R5}" },
    { TLOC, "LDMIB_NoException",    "R0=0x03FFFFF8",
                                    "R0=0x0000000C,R1=0xE121FF7F,R2=0xDFDFDFDF,R3=0xDFDFDFDF,R4=0xDFDFDFDF,R5=0xDFDFDFDF",
                                    "LDMIB R0!,{R1-R5}" },

    { TLOC, "LDMDA_PCAndPSR", "R0=0x8100,R1=5,R2=3,LWORD[8100]=0x10008008,Status=NC",
                              "R0=0x8100,R1=1,R2=3,Status=V",
                              "LDMDA R0,{R15}^ : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMDA_PCAndPSR_Writeback", "R0=0x8100,R1=5,R2=3,LWORD[8100]=0x10008008,Status=CZ",
                                        "R0=0x80FC,R1=1,R2=3,Status=V",
                                        "LDMDA R0!,{R15}^ : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMDA_AddressException",   "R0=0x4000010,Status=NC",
                                        "R0=0x4000010,R1=0,CPSR=0xA8000003,R14=0xA0008008,PC=0x18",
                                        "LDMDA R0!,{R1-R5}" },
    { TLOC, "LDMDA_NoException",    "R0=0x0",
                                    "R0=0x03FFFFEC,R1=0xE121FF7C,R2=0xE121FF7D,R3=0xE121FF7E,R4=0xE121FF7F,R5=0xDFDFDFDF",
                                    "LDMDA R0!,{R1-R5}" },

    { TLOC, "LDMDB_PCAndPSR", "R0=0x8104,R1=5,R2=3,LWORD[8100]=0x10008008,Status=NC",
                              "R0=0x8104,R1=1,R2=3,Status=V",
                              "LDMDB R0,{R15}^ : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMDB_PCAndPSR_Writeback", "R0=0x8104,R1=5,R2=3,LWORD[8100]=0x10008008,Status=CZ",
                                        "R0=0x8100,R1=1,R2=3,Status=V",
                                        "LDMDB R0!,{R15}^ : MOV R2,#2 : MOV R1,#1" },
    { TLOC, "LDMDB_AddressException",   "R0=0x4000004,Status=NC",
                                        "R0=0x4000004,R1=0,CPSR=0xA8000003,R14=0xA0008008,PC=0x18",
                                        "LDMDB R0!,{R1-R5}" },
    { TLOC, "LDMDB_NoException",    "R0=0x4",
                                    "R0=0x03FFFFF0,R1=0xE121FF7C,R2=0xE121FF7D,R3=0xE121FF7E,R4=0xE121FF7F,R5=0xDFDFDFDF",
                                    "LDMDB R0!,{R1-R5}" },


    { TLOC, "STMIA_PCAndPSR",   "R0=0x8100,Status=V",
                                "R0=0x8100,LWORD[8100]=0x1000800C", // PC + 12, See ARM Family Data Manual Page 2-41.
                                "STMIA R0,{R15}" },
    { TLOC, "STMIA_AddressException",   "R0=0x4000000,Status=V",
                                        "R0=0x4000000,R14=0x10008008,PC=0x18,CPSR=0x18000003",
                                        "STMIA R0!,{R1-R3}" },
    { TLOC, "STMIA_NoAddressException", "R0=0x3FFFFFC,CPSR=0x10000000",
                                        "R0=0x0000008,CPSR=0x10000000",
                                        "STMIA R0!,{R1-R3}" },
    { TLOC, "STMIB_PCAndPSR",   "R0=0x80FC,Status=V",
                                "R0=0x80FC,LWORD[8100]=0x1000800C", // PC + 12, See ARM Family Data Manual Page 2-41.
                                "STMIB R0,{R15}" },
    { TLOC, "STMIB_AddressException",   "R0=0x3FFFFFC,Status=V",
                                        "R0=0x3FFFFFC,R14=0x10008008,PC=0x18,CPSR=0x18000003",
                                        "STMIB R0!,{R1-R3}" },
    { TLOC, "STMIB_NoAddressException", "R0=0x3FFFFF8,CPSR=0x10000000",
                                        "R0=0x0000004,CPSR=0x10000000",
                                        "STMIB R0!,{R1-R3}" },

    { TLOC, "STMDA_PCAndPSR",   "R0=0x8100,Status=V",
                                "R0=0x8100,LWORD[8100]=0x1000800C", // PC + 12, See ARM Family Data Manual Page 2-41.
                                "STMDA R0,{R15}" },
    { TLOC, "STMDA_AddressException",   "R0=0x4000000,Status=V",
                                        "R0=0x4000000,R14=0x10008008,PC=0x18,CPSR=0x18000003",
                                        "STMDA R0!,{R1-R3}" },
    { TLOC, "STMDA_NoAddressException", "R0=0x0000000,CPSR=0x10000000",
                                        "R0=0x3FFFFF4,CPSR=0x10000000",
                                        "STMDA R0!,{R1-R3}" },


    { TLOC, "STMDB_PCAndPSR",   "R0=0x8104,Status=V",
                                "R0=0x8104,LWORD[8100]=0x1000800C", // PC + 12, See ARM Family Data Manual Page 2-41.
                                "STMDB R0,{R15}" },
    { TLOC, "STMDB_AddressException",   "R0=0x4000004,Status=V",
                                        "R0=0x4000004,R14=0x10008008,PC=0x18,CPSR=0x18000003",
                                        "STMDB R0!,{R1-R3}" },
    { TLOC, "STMDB_NoAddressException", "R0=0x0000004,CPSR=0x10000000",
                                        "R0=0x3FFFFF8,CPSR=0x10000000",
                                        "STMDB R0!,{R1-R3}" },

    // Reinstate Data Abort tests when Data Abort conditions in the test system are better understood.
    //{ TLOC, "LDMIA_DataAbort",  "R0=0x10000",
    //                            "R0=0x10000,R1=0,CPSR=0x08000003,R14=0x8008,PC=1C",
    //                            "LDMIA R0!,{R1-R5}" },
    //{ TLOC, "LDMIA_NoDataAbort",    "R0=0x8FFC",
    //                                "R0=0x9010,R1=0,R2=0xDFDFDFDF,R3=0xDFDFDFDF,R4=0xDFDFDFDF,R5=0xDFDFDFDF",
    //                                "LDMIA R0!,{R1-R5}" },
    //{ TLOC, "LDMIB_DataAbort",  "R0=0x10000",
    //                            "R0=0x10000,R1=0,CPSR=0x08000003,R14=0x8008,PC=1C",
    //                            "LDMIB R0!,{R1-R5}" },
    //{ TLOC, "LDMIB_NoDataAbort",    "R0=0x8FFC8",
    //                                "R0=0x900C,R1=0,R2=0xDFDFDFDF,R3=0xDFDFDFDF,R4=0xDFDFDFDF,R5=0xDFDFDFDF",
    //                                "LDMIB R0!,{R1-R5}" },
    //{ TLOC, "LDMDA_DataAbort",  "R0=0x10000",
    //                            "R0=0x10000,R1=0,CPSR=0x08000003,R14=0x8008,PC=1C",
    //                            "LDMDA R0!,{R1-R5}" },
    //{ TLOC, "LDMDA_NoDataAbort",    "R0=0x03FF0000",
    //                                "R0=0x03FEFFEC,R1=0,R2=0xDFDFDFDF,R3=0xDFDFDFDF,R4=0xDFDFDFDF,R5=0xDFDFDFDF",
    //                                "LDMDA R0!,{R1-R5}" },
    //{ TLOC, "LDMDB_DataAbort",  "R0=0x10004",
    //                            "R0=0x10004,R1=0,CPSR=0x08000003,R14=0x8008,PC=1C",
    //                            "LDMDB R0!,{R1-R5}" },
    //{ TLOC, "LDMDB_NoDataAbort",    "R0=0x03FF0004",
    //                                "R0=0x03FEFFE8,R1=0,R2=0xDFDFDFDF,R3=0xDFDFDFDF,R4=0xDFDFDFDF,R5=0xDFDFDFDF",
    //                                "LDMDB R0!,{R1-R5}" },
    //{ TLOC, "STMIA_DataAbort",  "R0=0x10000,Status=V",
    //                            "R0=0x10000,R14=0x10008008,PC=0x1C,CPSR=0x18000003",
    //                            "STMIA R0!,{R1-R3}" },
    //{ TLOC, "STMIA_NoDataAbort",    "R0=0x0FFFC,CPSR=0x10000000",
    //                                "R0=0x10008,CPSR=0x10000000,LWORD[0FFFC]=0",
    //                                "STMIA R0!,{R1-R3}" },
    //{ TLOC, "STMIB_DataAbort",  "R0=0xFFFC,Status=V",
    //                            "R0=0xFFFC,R14=0x10008008,PC=0x1C,CPSR=0x18000003",
    //                            "STMIB R0!,{R1-R3}" },
    //{ TLOC, "STMIB_NoDataAbort",    "R0=0x0FFF8,CPSR=0x10000000",
    //                                "R0=0x10004,CPSR=0x10000000,LWORD[0FFFC]=0",
    //                                "STMIB R0!,{R1-R3}" },
    //{ TLOC, "STMDA_DataAbort",  "R0=0x10000,Status=V",
    //                            "R0=0x10000,R14=0x10008008,PC=0x1C,CPSR=0x18000003",
    //                            "STMDA R0!,{R1-R3}" },
    //{ TLOC, "STMDA_NoDataAbort",    "R0=0x03FF0000,CPSR=0x10000000",
    //                                "R0=0x03FEFFEC,CPSR=0x10000000",
    //                                "STMDA R0!,{R1-R3}" },
    //{ TLOC, "STMDB_DataAbort",  "R0=0x10004,Status=V",
    //                            "R0=0x10004,R14=0x10008008,PC=0x1C,CPSR=0x18000003",
    //                            "STMDB R0!,{R1-R3}" },
    //{ TLOC, "STMDB_NoDataAbort",    "R0=0x03FF0004,CPSR=0x10000000",
    //                                "R0=0x03FEFFF0,CPSR=0x10000000",
    //                                "STMDB R0!,{R1-R3}" },
};

const CoreTestParams armV2aDataTransfer[] = {
    // SWP Word/Byte
    { TLOC, "SWP_Word", "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x8100,LWORD[8100]=0xDEADBEEF",
                        "R0=0xDEADBEEF,R1=0xCAFEBABE,R2=0x8100,LWORD[8100]=0xCAFEBABE",
                        "SWP R0,R1,[R2]" },

    { TLOC, "SWP_WordAtPC", "R0=0xABBAABBA,R1=0xE12FFF7F,LWORD[8008]=0xE1200070",
                            "R0=0xE1200070,R1=0xE12FFF7F,LWORD[8008]=0xE12FFF7F",
                            "SWP R0,R1,[PC]" },
    { TLOC, "SWP_WordFromPC",   "R0=0xABBAABBA,R2=0x8100,LWORD[8100]=0xDEADBEEF,Status=V",
                                "R0=0xDEADBEEF,R2=0x8100,LWORD[8100]=0x10008008,Status=V",
                                "SWP R0,PC,[R2]" },
    { TLOC, "SWP_WordToPC", "R1=0xCAFEBABE,R2=0x8100,LWORD[8100]=0x10000020,Status=C",
                            "R1=0xCAFEBABE,R2=0x8100,PC=0x24,LWORD[8100]=0xCAFEBABE,Status=C",
                            "SWP PC,R1,[R2]" },

    { TLOC, "SWP_WordUnaligned1",   "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x8101,LWORD[8100]=0xDEADBEEF",
                                    "R0=0xEFDEADBE,R1=0xCAFEBABE,R2=0x8101,LWORD[8100]=0xCAFEBABE",
                                    "SWP R0,R1,[R2]" },
    { TLOC, "SWP_WordUnaligned2",   "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x8102,LWORD[8100]=0xDEADBEEF",
                                    "R0=0xBEEFDEAD,R1=0xCAFEBABE,R2=0x8102,LWORD[8100]=0xCAFEBABE",
                                    "SWP R0,R1,[R2]" },
    { TLOC, "SWP_WordUnaligned3",   "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x8103,LWORD[8100]=0xDEADBEEF",
                                    "R0=0xADBEEFDE,R1=0xCAFEBABE,R2=0x8103,LWORD[8100]=0xCAFEBABE",
                                    "SWP R0,R1,[R2]" },

    { TLOC, "SWP_WordAddressException", "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x4000000,LWORD[8100]=0xDEADBEEF",
                                        "R0=0xABBAABBA,R14=0x8008,PC=0x18,CPSR=0x8000003,LWORD[8100]=0xDEADBEEF",
                                        "SWP R0,R1,[R2]" },

    { TLOC, "SWP_WordDataAbort",    "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x10000,LWORD[8100]=0xDEADBEEF",
                                    "R0=0xABBAABBA,R14=0x8008,PC=0x14,CPSR=0x8000003",
                                    "SWP R0,R1,[R2]" },


    { TLOC, "SWP_Byte", "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x8100,LWORD[8100]=0xDEADBEEF",
                        "R0=0xEF,R1=0xCAFEBABE,R2=0x8100,LWORD[8100]=0xDEADBEBE",
                        "SWPB R0,R1,[R2]" },

    { TLOC, "SWP_ByteUnaligned1",   "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x8101,LWORD[8100]=0xDEADBEEF",
                                    "R0=0xBE,R1=0xCAFEBABE,R2=0x8101,LWORD[8100]=0xDEADBAEF",
                                    "SWPB R0,R1,[R2]" },
    { TLOC, "SWP_ByteUnaligned2",   "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x8102,LWORD[8100]=0xDEADBEEF",
                                    "R0=0xAD,R1=0xCAFEBABE,R2=0x8102,LWORD[8100]=0xDEFEBEEF",
                                    "SWPB R0,R1,[R2]" },
    { TLOC, "SWP_ByteUnaligned3",   "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x8103,LWORD[8100]=0xDEADBEEF",
                                    "R0=0xDE,R1=0xCAFEBABE,R2=0x8103,LWORD[8100]=0xCAADBEEF",
                                    "SWPB R0,R1,[R2]" },

    { TLOC, "SWP_ByteAddressException", "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x4000000,LWORD[8100]=0xDEADBEEF",
                                        "R0=0xABBAABBA,R14=0x8008,PC=0x18,CPSR=0x8000003,LWORD[8100]=0xDEADBEEF",
                                        "SWPB R0,R1,[R2]" },

    { TLOC, "SWP_ByteDataAbort",    "R0=0xABBAABBA,R1=0xCAFEBABE,R2=0x10000,LWORD[8100]=0xDEADBEEF",
                                    "R0=0xABBAABBA,R14=0x8008,PC=0x14,CPSR=0x8000003",
                                    "SWPB R0,R1,[R2]" },
};

} // Anonymous namespace

////////////////////////////////////////////////////////////////////////////////
// Global Functions
////////////////////////////////////////////////////////////////////////////////
//! @brief Registers test for data transfer instructions for each type of system
//! they should be tested against.
void registerDataTransferExecTests()
{
    // Register test points against basic ARMv2 implementation.
    RegisterExecTests<ArmV2TestSystemTraits>("ARMv2_DataTransfer", basicDataTransfer,
                                             std::size(basicDataTransfer));
    RegisterExecTests<ArmV2TestSystemTraits>("ARMv2_DataTransfer", basicDataTransfer26Bit,
                                             std::size(basicDataTransfer26Bit));

    // Repeat the test for the ARMv2a architecture.
    RegisterExecTests<ArmV2aTestSystemTraits>("ARMv2a_DataTransfer", basicDataTransfer,
                                              std::size(basicDataTransfer));
    RegisterExecTests<ArmV2aTestSystemTraits>("ARMv2a_DataTransfer", basicDataTransfer26Bit,
                                              std::size(basicDataTransfer26Bit));
    RegisterExecTests<ArmV2aTestSystemTraits>("ARMv2a_DataTransfer", armV2aDataTransfer,
                                              std::size(armV2aDataTransfer));
}

}} // namespace Mo::Arm
////////////////////////////////////////////////////////////////////////////////

