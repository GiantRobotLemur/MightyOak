//! @file Test_MemcSystem.cpp
//! @brief The definition of unit tests for emulated MEMC-based ARM hardware
//! platforms.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2023-2024
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header File Includes
////////////////////////////////////////////////////////////////////////////////
#include <gtest/gtest.h>

#include "LoggerDevice.hpp"
#include "ArmEmu/ArmSystemBuilder.hpp"

////////////////////////////////////////////////////////////////////////////////
// Macro Definitions
////////////////////////////////////////////////////////////////////////////////

namespace Mo {
namespace Arm {

namespace {
////////////////////////////////////////////////////////////////////////////////
// Local Data Types
////////////////////////////////////////////////////////////////////////////////
class MemcSystemTests : public ::testing::Test
{
protected:
    LoggerDevice _logger;
    IArmSystemUPtr specimen;

    MemcSystemTests()
    {
        Options opts;
        opts.setHardwareArchitecture(SystemModel::ASeries);

        //opts.setCustomRom();

        ArmSystemBuilder builder(opts);
        builder.addMapping(&_logger, 0x3011000, MemoryAccess::ReadWrite);

        specimen = builder.createSystem();
        specimen.reset();
    }
};

////////////////////////////////////////////////////////////////////////////////
// Local Data
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Unit Tests
////////////////////////////////////////////////////////////////////////////////

} // Anonymous namespace

}} // namespace Mo::Arm
////////////////////////////////////////////////////////////////////////////////

