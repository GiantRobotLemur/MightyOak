//! @file ArmEmu/IrqSink.hpp
//! @brief The declaration of an interface to an object which can receive
//! emulated interrupt signals.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2022-2023
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

#ifndef __ARM_EMU_IRQ_SINK_HPP__
#define __ARM_EMU_IRQ_SINK_HPP__

////////////////////////////////////////////////////////////////////////////////
// Dependent Header Files
////////////////////////////////////////////////////////////////////////////////
#include <cstdint>
#include <cstddef>

namespace Mo {
namespace Arm {

////////////////////////////////////////////////////////////////////////////////
// Data Type Declarations
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Class Declarations
////////////////////////////////////////////////////////////////////////////////
//! @brief The interface to an object which can receive emulated interrupt
//! signals.
class IIrqSink
{
public:
    // Construction/Destruction
    virtual ~IIrqSink() = default;

    // Accessors

    // Operations
    //! @brief Marks an interrupt as pending.
    virtual void raiseIrq() = 0;

    //! @brief Clears any pending interrupt.
    virtual void clearIrq() = 0;

    //! @brief Marks a fast interrupt as pending.
    virtual void raiseFirq() = 0;

    //! @brief Clears any pending fast interrupt.
    virtual void clearFirq() = 0;
};

////////////////////////////////////////////////////////////////////////////////
// Function Declarations
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Templates
////////////////////////////////////////////////////////////////////////////////

}} // namespace Mo::Arm

#endif // Header guard
////////////////////////////////////////////////////////////////////////////////
