//! @file ArmDebugger/Annotations/AssemblyLabel.cpp
//! @brief The definition of an annotation which applies a label to a specific
//! memory location.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2024
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header File Includes
////////////////////////////////////////////////////////////////////////////////
#include "AssemblyLabel.hpp"
#include "Tools.hpp"

////////////////////////////////////////////////////////////////////////////////
// Macro Definitions
////////////////////////////////////////////////////////////////////////////////

namespace Mo {

namespace {
////////////////////////////////////////////////////////////////////////////////
// Local Data Types
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Data
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Functions
////////////////////////////////////////////////////////////////////////////////

} // Anonymous namespace

////////////////////////////////////////////////////////////////////////////////
// AssemblyLabel Member Function Definitions
////////////////////////////////////////////////////////////////////////////////
AssemblyLabel::AssemblyLabel() :
    Annotation(AnnotationType::Label)
{
}

AssemblyLabel::AssemblyLabel(uint32_t address, const QString &symbol) :
    Annotation(AnnotationType::Label, address, 0),
    _symbol(symbol)
{
}

const QString &AssemblyLabel::getSymbol() const { return _symbol; }

QJsonObject AssemblyLabel::write() const
{
    QJsonObject obj = Annotation::write();

    obj.insert("Symbol", _symbol);

    return obj;
}

void AssemblyLabel::read(const QJsonObject &jsonObj)
{
    QString symbol;

    tryGetJsonValue(jsonObj, "Symbol", _symbol);
}

////////////////////////////////////////////////////////////////////////////////
// Global Function Definitions
////////////////////////////////////////////////////////////////////////////////

} // namespace Mo
////////////////////////////////////////////////////////////////////////////////

