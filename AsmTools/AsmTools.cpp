//! @file AsmTools.cpp
//! @brief The definition of the public interface to the AsmTools library.
//! @author GiantRobotLemur@na-se.co.uk
//! @date 2021-2023
//! @copyright This file is part of the Mighty Oak project which is released
//! under LGPL 3 license. See LICENSE file at the repository root or go to
//! https://github.com/GiantRobotLemur/MightyOak for full license details.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Header File Includes
////////////////////////////////////////////////////////////////////////////////
#include "AsmTools.hpp"
#include "ExprContexts.hpp"
#include "InputSet.hpp"
#include "LexicalAnalysers.hpp"
#include "ParseContext.hpp"
#include "Parser.hpp"
#include "StatementListNode.hpp"

////////////////////////////////////////////////////////////////////////////////
// Macro Definitions
////////////////////////////////////////////////////////////////////////////////

namespace Ag {

//! @brief A namespace containing the tools required to assemble and disassemble
//! ARM machine code.
namespace Asm {

namespace {
////////////////////////////////////////////////////////////////////////////////
// Local Data Types
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Data
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// Local Functions
////////////////////////////////////////////////////////////////////////////////
ObjectCode assemble(const Options &options, ParseContext &context)
{
    // Parse the source code into a list of statements.
    AssemblyStateSPtr initialState = std::make_shared<AssemblyState>(options);
    IScopedContextSPtr globalScope = std::make_shared<RootEvalContext>(options.getLoadAddress());

    StatementListNode statementList(initialState, globalScope,
                                    options.getLoadAddress());

    parseSourceCode(context, &statementList);

    // Output the assembled machine code as an immutable blob.
    return statementList.assemble(context.getMessages());
}

} // TED

////////////////////////////////////////////////////////////////////////////////
// Class Method Definitions
////////////////////////////////////////////////////////////////////////////////
//! @brief Assembles source code from a specified file and any files it
//! includes internally.
//! @param[in] filePath The path to the file to include.
//! @param[in] assemblyOptions Properties used to configure the assembly process.
//! @param[out] messages An object which receives messages generated by the
//! assembly process.
//! @returns An object containing the assembled machine code. The object will be
//! in an empty state if assembly failed.
ObjectCode assembleFile(const String &filePath, const Options &assemblyOptions,
                        Messages &messages)
{
    Fs::Path primaryPath(filePath);
    VisitedSourceSet visitedFiles;

    ParseContext context(visitedFiles,
                         createFileInputSet(primaryPath,
                                            assemblyOptions.getIncludePaths()),
                         messages);

    ObjectCode result;
    String error;

    // Attempt to open the initial input file.
    if (context.tryBegin(getStatementLexer(), error))
    {
        // Perform the assembly process.
        result = assemble(assemblyOptions, context);
    }
    else
    {
        messages.appendFatal(Location(),
                             "Failed to open primary source code file: {0}",
                             { error });
    }

    return result;
}

//! @brief Assembles source code from a string.
//! @param[in] sourceCode The ARM assembly language source code to assemble.
//! @param[in] assemblyOptions Properties used to configure the assembly process.
//! @param[out] messages An object which receives messages generated by the
//! assembly process.
//! @returns An object containing the assembled machine code. The object will be
//! in an empty state if assembly failed.
ObjectCode assembleText(const String &sourceCode, const Options &assemblyOptions,
                        Messages &messages)
{
    VisitedSourceSet visitedSources;
    ParseContext context(visitedSources,
                         createStringInputSet("(buffer)", sourceCode),
                         messages);

    ObjectCode result;
    String error;

    // Attempt to get the initial input text buffer.
    if (context.tryBegin(getStatementLexer(), error))
    {
        // Perform the assembly process.
        result = assemble(assemblyOptions, context);
    }
    else
    {
        messages.appendFatal(Location(),
                             "Failed to obtain primary source code buffer: {0}",
                             { error });
    }

    return result;
}
////////////////////////////////////////////////////////////////////////////////
// Global Function Definitions
////////////////////////////////////////////////////////////////////////////////

}} // namespace Ag::Asm
////////////////////////////////////////////////////////////////////////////////

